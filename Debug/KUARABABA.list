
KUARABABA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800df90  0800df90  0000ef90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e668  0800e668  00010270  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e668  0800e668  0000f668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e670  0800e670  00010270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e670  0800e670  0000f670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e674  0800e674  0000f674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  0800e678  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010270  2**0
                  CONTENTS
 10 .bss          000006cc  20000270  20000270  00010270  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000093c  2000093c  00010270  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f01  00000000  00000000  000102a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d0e  00000000  00000000  000251a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  00027eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f05  00000000  00000000  000291b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002390d  00000000  00000000  0002a0bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b10  00000000  00000000  0004d9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d341b  00000000  00000000  000654da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001388f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006938  00000000  00000000  00138938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0013f270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800df78 	.word	0x0800df78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	0800df78 	.word	0x0800df78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <prv_parse_number>:
 * \param[in]       ghandle: GPS handle
 * \param[in]       text: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* ghandle, const char* text) {
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
    uint8_t minus = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	72fb      	strb	r3, [r7, #11]

    if (text == NULL) {
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d106      	bne.n	8000f9a <prv_parse_number+0x26>
        text = ghandle->p.term_str;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3371      	adds	r3, #113	@ 0x71
 8000f90:	603b      	str	r3, [r7, #0]
    }
    for (; text != NULL && *text == ' '; ++text) {} /* Strip leading spaces */
 8000f92:	e002      	b.n	8000f9a <prv_parse_number+0x26>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	603b      	str	r3, [r7, #0]
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <prv_parse_number+0x34>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b20      	cmp	r3, #32
 8000fa6:	d0f5      	beq.n	8000f94 <prv_parse_number+0x20>

    minus = (*text == '-' ? (++text, 1) : 0);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b2d      	cmp	r3, #45	@ 0x2d
 8000fae:	d104      	bne.n	8000fba <prv_parse_number+0x46>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <prv_parse_number+0x48>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	72fb      	strb	r3, [r7, #11]
    for (; text != NULL && CIN(*text); ++text) {
 8000fbe:	e00d      	b.n	8000fdc <prv_parse_number+0x68>
        res = 10L * res + CTN(*text);
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	461a      	mov	r2, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	3b30      	subs	r3, #48	@ 0x30
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
    for (; text != NULL && CIN(*text); ++text) {
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d007      	beq.n	8000ff2 <prv_parse_number+0x7e>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b2f      	cmp	r3, #47	@ 0x2f
 8000fe8:	d903      	bls.n	8000ff2 <prv_parse_number+0x7e>
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b39      	cmp	r3, #57	@ 0x39
 8000ff0:	d9e6      	bls.n	8000fc0 <prv_parse_number+0x4c>
    }
    return minus ? -res : res;
 8000ff2:	7afb      	ldrb	r3, [r7, #11]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <prv_parse_number+0x8a>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	e000      	b.n	8001000 <prv_parse_number+0x8c>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <prv_parse_float_number>:
 * \param[in]       ghandle: GPS handle
 * \param[in]       text: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* ghandle, const char* text) {
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1;
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	f04f 0300 	mov.w	r3, #0
 800101e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001022:	f04f 0200 	mov.w	r2, #0
 8001026:	4b4d      	ldr	r3, [pc, #308]	@ (800115c <prv_parse_float_number+0x150>)
 8001028:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int sign = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	60fb      	str	r3, [r7, #12]

    if (text == NULL) {
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d106      	bne.n	8001044 <prv_parse_float_number+0x38>
        text = ghandle->p.term_str;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3371      	adds	r3, #113	@ 0x71
 800103a:	603b      	str	r3, [r7, #0]
    }
    for (; text != NULL && *text == ' '; ++text) {} /* Strip leading spaces */
 800103c:	e002      	b.n	8001044 <prv_parse_float_number+0x38>
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <prv_parse_float_number+0x46>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b20      	cmp	r3, #32
 8001050:	d0f5      	beq.n	800103e <prv_parse_float_number+0x32>

    if (*text == '-') { /* Check sign */
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b2d      	cmp	r3, #45	@ 0x2d
 8001058:	d124      	bne.n	80010a4 <prv_parse_float_number+0x98>
        sign = -1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	60fb      	str	r3, [r7, #12]
        ++text;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*text)) { /* Convert main part */
 8001066:	e01d      	b.n	80010a4 <prv_parse_float_number+0x98>
        value = value * (lwgps_float_t)10 + CTN(*text);
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	4b3c      	ldr	r3, [pc, #240]	@ (8001160 <prv_parse_float_number+0x154>)
 800106e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001072:	f7ff fac1 	bl	80005f8 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4614      	mov	r4, r2
 800107c:	461d      	mov	r5, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	3b30      	subs	r3, #48	@ 0x30
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa4d 	bl	8000524 <__aeabi_i2d>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4620      	mov	r0, r4
 8001090:	4629      	mov	r1, r5
 8001092:	f7ff f8fb 	bl	800028c <__adddf3>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        ++text;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	603b      	str	r3, [r7, #0]
    while (CIN(*text)) { /* Convert main part */
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80010aa:	d903      	bls.n	80010b4 <prv_parse_float_number+0xa8>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b39      	cmp	r3, #57	@ 0x39
 80010b2:	d9d9      	bls.n	8001068 <prv_parse_float_number+0x5c>
    }
    if (*text == '.') { /* Skip the dot character */
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80010ba:	d12c      	bne.n	8001116 <prv_parse_float_number+0x10a>
        ++text;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*text)) { /* Get the power */
 80010c2:	e028      	b.n	8001116 <prv_parse_float_number+0x10a>
        value = value * (lwgps_float_t)10 + CTN(*text);
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b25      	ldr	r3, [pc, #148]	@ (8001160 <prv_parse_float_number+0x154>)
 80010ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010ce:	f7ff fa93 	bl	80005f8 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4614      	mov	r4, r2
 80010d8:	461d      	mov	r5, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3b30      	subs	r3, #48	@ 0x30
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa1f 	bl	8000524 <__aeabi_i2d>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4620      	mov	r0, r4
 80010ec:	4629      	mov	r1, r5
 80010ee:	f7ff f8cd 	bl	800028c <__adddf3>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
        power *= (lwgps_float_t)10;
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <prv_parse_float_number+0x154>)
 8001100:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001104:	f7ff fa78 	bl	80005f8 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ++text;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	603b      	str	r3, [r7, #0]
    while (CIN(*text)) { /* Get the power */
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b2f      	cmp	r3, #47	@ 0x2f
 800111c:	d903      	bls.n	8001126 <prv_parse_float_number+0x11a>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b39      	cmp	r3, #57	@ 0x39
 8001124:	d9ce      	bls.n	80010c4 <prv_parse_float_number+0xb8>
    }
    return sign * value / power;
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f7ff f9fc 	bl	8000524 <__aeabi_i2d>
 800112c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001130:	f7ff fa62 	bl	80005f8 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4610      	mov	r0, r2
 800113a:	4619      	mov	r1, r3
 800113c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001140:	f7ff fb84 	bl	800084c <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	ec43 2b17 	vmov	d7, r2, r3
}
 800114c:	eeb0 0a47 	vmov.f32	s0, s14
 8001150:	eef0 0a67 	vmov.f32	s1, s15
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bdb0      	pop	{r4, r5, r7, pc}
 800115a:	bf00      	nop
 800115c:	3ff00000 	.word	0x3ff00000
 8001160:	40240000 	.word	0x40240000

08001164 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       ghandle: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* ghandle) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
    lwgps_float_t llong, deg, min;

    llong = prv_parse_float_number(ghandle, NULL); /* Parse value as double */
 800116c:	2100      	movs	r1, #0
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff4c 	bl	800100c <prv_parse_float_number>
 8001174:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)llong / 100));            /* Get absolute degrees value, interested in integer part only */
 8001178:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800117c:	f7ff fcec 	bl	8000b58 <__aeabi_d2iz>
 8001180:	4603      	mov	r3, r0
 8001182:	4a1d      	ldr	r2, [pc, #116]	@ (80011f8 <prv_parse_lat_long+0x94>)
 8001184:	fb82 1203 	smull	r1, r2, r2, r3
 8001188:	1152      	asrs	r2, r2, #5
 800118a:	17db      	asrs	r3, r3, #31
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9c8 	bl	8000524 <__aeabi_i2d>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = llong - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <prv_parse_lat_long+0x98>)
 80011a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80011b2:	f7ff f869 	bl	8000288 <__aeabi_dsub>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	e9c7 2302 	strd	r2, r3, [r7, #8]
    llong = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <prv_parse_lat_long+0x9c>)
 80011c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011c8:	f7ff fb40 	bl	800084c <__aeabi_ddiv>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011d4:	f7ff f85a 	bl	800028c <__adddf3>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return llong;
 80011e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80011e8:	eeb0 0a47 	vmov.f32	s0, s14
 80011ec:	eef0 0a67 	vmov.f32	s1, s15
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	51eb851f 	.word	0x51eb851f
 80011fc:	40590000 	.word	0x40590000
 8001200:	404e0000 	.word	0x404e0000

08001204 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* ghandle) {
 8001204:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
    if (ghandle->p.term_num == 0) { /* Check string type */
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 8001214:	2900      	cmp	r1, #0
 8001216:	d169      	bne.n	80012ec <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(ghandle->p.term_str, "$GPGGA", 6) || !strncmp(ghandle->p.term_str, "$GNGGA", 6)) {
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3371      	adds	r3, #113	@ 0x71
 800121c:	2206      	movs	r2, #6
 800121e:	49ba      	ldr	r1, [pc, #744]	@ (8001508 <prv_parse_term+0x304>)
 8001220:	4618      	mov	r0, r3
 8001222:	f008 fa50 	bl	80096c6 <strncmp>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d009      	beq.n	8001240 <prv_parse_term+0x3c>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3371      	adds	r3, #113	@ 0x71
 8001230:	2206      	movs	r2, #6
 8001232:	49b6      	ldr	r1, [pc, #728]	@ (800150c <prv_parse_term+0x308>)
 8001234:	4618      	mov	r0, r3
 8001236:	f008 fa46 	bl	80096c6 <strncmp>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d104      	bne.n	800124a <prv_parse_term+0x46>
            ghandle->p.stat = STAT_GGA;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 8001248:	e04e      	b.n	80012e8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(ghandle->p.term_str, "$GPGSA", 6) || !strncmp(ghandle->p.term_str, "$GNGSA", 6)) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3371      	adds	r3, #113	@ 0x71
 800124e:	2206      	movs	r2, #6
 8001250:	49af      	ldr	r1, [pc, #700]	@ (8001510 <prv_parse_term+0x30c>)
 8001252:	4618      	mov	r0, r3
 8001254:	f008 fa37 	bl	80096c6 <strncmp>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <prv_parse_term+0x6e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3371      	adds	r3, #113	@ 0x71
 8001262:	2206      	movs	r2, #6
 8001264:	49ab      	ldr	r1, [pc, #684]	@ (8001514 <prv_parse_term+0x310>)
 8001266:	4618      	mov	r0, r3
 8001268:	f008 fa2d 	bl	80096c6 <strncmp>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d104      	bne.n	800127c <prv_parse_term+0x78>
            ghandle->p.stat = STAT_GSA;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2202      	movs	r2, #2
 8001276:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 800127a:	e035      	b.n	80012e8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(ghandle->p.term_str, "$GPGSV", 6) || !strncmp(ghandle->p.term_str, "$GNGSV", 6)) {
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3371      	adds	r3, #113	@ 0x71
 8001280:	2206      	movs	r2, #6
 8001282:	49a5      	ldr	r1, [pc, #660]	@ (8001518 <prv_parse_term+0x314>)
 8001284:	4618      	mov	r0, r3
 8001286:	f008 fa1e 	bl	80096c6 <strncmp>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d009      	beq.n	80012a4 <prv_parse_term+0xa0>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3371      	adds	r3, #113	@ 0x71
 8001294:	2206      	movs	r2, #6
 8001296:	49a1      	ldr	r1, [pc, #644]	@ (800151c <prv_parse_term+0x318>)
 8001298:	4618      	mov	r0, r3
 800129a:	f008 fa14 	bl	80096c6 <strncmp>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d104      	bne.n	80012ae <prv_parse_term+0xaa>
            ghandle->p.stat = STAT_GSV;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2203      	movs	r2, #3
 80012a8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80012ac:	e01c      	b.n	80012e8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(ghandle->p.term_str, "$GPRMC", 6) || !strncmp(ghandle->p.term_str, "$GNRMC", 6)) {
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3371      	adds	r3, #113	@ 0x71
 80012b2:	2206      	movs	r2, #6
 80012b4:	499a      	ldr	r1, [pc, #616]	@ (8001520 <prv_parse_term+0x31c>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	f008 fa05 	bl	80096c6 <strncmp>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d009      	beq.n	80012d6 <prv_parse_term+0xd2>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	3371      	adds	r3, #113	@ 0x71
 80012c6:	2206      	movs	r2, #6
 80012c8:	4996      	ldr	r1, [pc, #600]	@ (8001524 <prv_parse_term+0x320>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f008 f9fb 	bl	80096c6 <strncmp>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d104      	bne.n	80012e0 <prv_parse_term+0xdc>
            ghandle->p.stat = STAT_RMC;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2204      	movs	r2, #4
 80012da:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
 80012de:	e003      	b.n	80012e8 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(ghandle->p.term_str, "$PUBX", 5)) {
            ghandle->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            ghandle->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        }
        return 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e231      	b.n	8001750 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (ghandle->p.stat == STAT_UNKNOWN) {
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80012f2:	2900      	cmp	r1, #0
 80012f4:	f000 822b 	beq.w	800174e <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (ghandle->p.stat == STAT_GGA) { /* Process GPGGA statement */
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80012fe:	2901      	cmp	r1, #1
 8001300:	f040 80c9 	bne.w	8001496 <prv_parse_term+0x292>
        switch (ghandle->p.term_num) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 800130a:	3b01      	subs	r3, #1
 800130c:	2b0a      	cmp	r3, #10
 800130e:	f200 8213 	bhi.w	8001738 <prv_parse_term+0x534>
 8001312:	a201      	add	r2, pc, #4	@ (adr r2, 8001318 <prv_parse_term+0x114>)
 8001314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001318:	08001345 	.word	0x08001345
 800131c:	080013bf 	.word	0x080013bf
 8001320:	080013d5 	.word	0x080013d5
 8001324:	080013ff 	.word	0x080013ff
 8001328:	08001415 	.word	0x08001415
 800132c:	0800143f 	.word	0x0800143f
 8001330:	08001453 	.word	0x08001453
 8001334:	08001739 	.word	0x08001739
 8001338:	08001467 	.word	0x08001467
 800133c:	08001739 	.word	0x08001739
 8001340:	0800147f 	.word	0x0800147f
            case 1: /* Process UTC time */
                ghandle->p.data.gga.hours = 10 * CTN(ghandle->p.term_str[0]) + CTN(ghandle->p.term_str[1]);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800134a:	3b30      	subs	r3, #48	@ 0x30
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	0092      	lsls	r2, r2, #2
 8001352:	4413      	add	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	b2da      	uxtb	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800135e:	4413      	add	r3, r2
 8001360:	b2db      	uxtb	r3, r3
 8001362:	3b30      	subs	r3, #48	@ 0x30
 8001364:	b2da      	uxtb	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                ghandle->p.data.gga.minutes = 10 * CTN(ghandle->p.term_str[2]) + CTN(ghandle->p.term_str[3]);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 8001372:	3b30      	subs	r3, #48	@ 0x30
 8001374:	b2db      	uxtb	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	0092      	lsls	r2, r2, #2
 800137a:	4413      	add	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8001386:	4413      	add	r3, r2
 8001388:	b2db      	uxtb	r3, r3
 800138a:	3b30      	subs	r3, #48	@ 0x30
 800138c:	b2da      	uxtb	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
                ghandle->p.data.gga.seconds = 10 * CTN(ghandle->p.term_str[4]) + CTN(ghandle->p.term_str[5]);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800139a:	3b30      	subs	r3, #48	@ 0x30
 800139c:	b2db      	uxtb	r3, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80013ae:	4413      	add	r3, r2
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	3b30      	subs	r3, #48	@ 0x30
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
                break;
 80013bc:	e1c7      	b.n	800174e <prv_parse_term+0x54a>
            case 2:                                                         /* Latitude */
                ghandle->p.data.gga.latitude = prv_parse_lat_long(ghandle); /* Parse latitude */
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fed0 	bl	8001164 <prv_parse_lat_long>
 80013c4:	eeb0 7a40 	vmov.f32	s14, s0
 80013c8:	eef0 7a60 	vmov.f32	s15, s1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
                break;
 80013d2:	e1bc      	b.n	800174e <prv_parse_term+0x54a>
            case 3: /* Latitude north/south information */
                if (ghandle->p.term_str[0] == 'S' || ghandle->p.term_str[0] == 's') {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80013da:	2b53      	cmp	r3, #83	@ 0x53
 80013dc:	d005      	beq.n	80013ea <prv_parse_term+0x1e6>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80013e4:	2b73      	cmp	r3, #115	@ 0x73
 80013e6:	f040 81a9 	bne.w	800173c <prv_parse_term+0x538>
                    ghandle->p.data.gga.latitude = -ghandle->p.data.gga.latitude;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80013f0:	4690      	mov	r8, r2
 80013f2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	e9c3 8922 	strd	r8, r9, [r3, #136]	@ 0x88
                }
                break;
 80013fc:	e19e      	b.n	800173c <prv_parse_term+0x538>
            case 4:                                                          /* Longitude */
                ghandle->p.data.gga.longitude = prv_parse_lat_long(ghandle); /* Parse longitude */
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff feb0 	bl	8001164 <prv_parse_lat_long>
 8001404:	eeb0 7a40 	vmov.f32	s14, s0
 8001408:	eef0 7a60 	vmov.f32	s15, s1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001412:	e19c      	b.n	800174e <prv_parse_term+0x54a>
            case 5: /* Longitude east/west information */
                if (ghandle->p.term_str[0] == 'W' || ghandle->p.term_str[0] == 'w') {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800141a:	2b57      	cmp	r3, #87	@ 0x57
 800141c:	d005      	beq.n	800142a <prv_parse_term+0x226>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001424:	2b77      	cmp	r3, #119	@ 0x77
 8001426:	f040 818b 	bne.w	8001740 <prv_parse_term+0x53c>
                    ghandle->p.data.gga.longitude = -ghandle->p.data.gga.longitude;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001430:	4614      	mov	r4, r2
 8001432:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	e9c3 4524 	strd	r4, r5, [r3, #144]	@ 0x90
                }
                break;
 800143c:	e180      	b.n	8001740 <prv_parse_term+0x53c>
            case 6: /* Fix status */ ghandle->p.data.gga.fix = (uint8_t)prv_parse_number(ghandle, NULL); break;
 800143e:	2100      	movs	r1, #0
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff fd97 	bl	8000f74 <prv_parse_number>
 8001446:	4603      	mov	r3, r0
 8001448:	b2da      	uxtb	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
 8001450:	e17d      	b.n	800174e <prv_parse_term+0x54a>
            case 7: /* Satellites in use */
                ghandle->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(ghandle, NULL);
 8001452:	2100      	movs	r1, #0
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fd8d 	bl	8000f74 <prv_parse_number>
 800145a:	4603      	mov	r3, r0
 800145c:	b2da      	uxtb	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
                break;
 8001464:	e173      	b.n	800174e <prv_parse_term+0x54a>
            case 9: /* Altitude */ ghandle->p.data.gga.altitude = prv_parse_float_number(ghandle, NULL); break;
 8001466:	2100      	movs	r1, #0
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fdcf 	bl	800100c <prv_parse_float_number>
 800146e:	eeb0 7a40 	vmov.f32	s14, s0
 8001472:	eef0 7a60 	vmov.f32	s15, s1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
 800147c:	e167      	b.n	800174e <prv_parse_term+0x54a>
            case 11: /* Altitude above ellipsoid */
                ghandle->p.data.gga.geo_sep = prv_parse_float_number(ghandle, NULL);
 800147e:	2100      	movs	r1, #0
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff fdc3 	bl	800100c <prv_parse_float_number>
 8001486:	eeb0 7a40 	vmov.f32	s14, s0
 800148a:	eef0 7a60 	vmov.f32	s15, s1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 8001494:	e15b      	b.n	800174e <prv_parse_term+0x54a>
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (ghandle->p.stat == STAT_GSA) { /* Process GPGSA statement */
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 800149c:	2902      	cmp	r1, #2
 800149e:	f040 8083 	bne.w	80015a8 <prv_parse_term+0x3a4>
        switch (ghandle->p.term_num) {
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80014a8:	3b02      	subs	r3, #2
 80014aa:	2b0f      	cmp	r3, #15
 80014ac:	d860      	bhi.n	8001570 <prv_parse_term+0x36c>
 80014ae:	a201      	add	r2, pc, #4	@ (adr r2, 80014b4 <prv_parse_term+0x2b0>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	080014f5 	.word	0x080014f5
 80014b8:	08001571 	.word	0x08001571
 80014bc:	08001571 	.word	0x08001571
 80014c0:	08001571 	.word	0x08001571
 80014c4:	08001571 	.word	0x08001571
 80014c8:	08001571 	.word	0x08001571
 80014cc:	08001571 	.word	0x08001571
 80014d0:	08001571 	.word	0x08001571
 80014d4:	08001571 	.word	0x08001571
 80014d8:	08001571 	.word	0x08001571
 80014dc:	08001571 	.word	0x08001571
 80014e0:	08001571 	.word	0x08001571
 80014e4:	08001571 	.word	0x08001571
 80014e8:	08001529 	.word	0x08001529
 80014ec:	08001541 	.word	0x08001541
 80014f0:	08001559 	.word	0x08001559
            case 2: ghandle->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(ghandle, NULL); break;
 80014f4:	2100      	movs	r1, #0
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fd3c 	bl	8000f74 <prv_parse_number>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8001506:	e122      	b.n	800174e <prv_parse_term+0x54a>
 8001508:	0800df90 	.word	0x0800df90
 800150c:	0800df98 	.word	0x0800df98
 8001510:	0800dfa0 	.word	0x0800dfa0
 8001514:	0800dfa8 	.word	0x0800dfa8
 8001518:	0800dfb0 	.word	0x0800dfb0
 800151c:	0800dfb8 	.word	0x0800dfb8
 8001520:	0800dfc0 	.word	0x0800dfc0
 8001524:	0800dfc8 	.word	0x0800dfc8
            case 15: ghandle->p.data.gsa.dop_p = prv_parse_float_number(ghandle, NULL); break;
 8001528:	2100      	movs	r1, #0
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fd6e 	bl	800100c <prv_parse_float_number>
 8001530:	eeb0 7a40 	vmov.f32	s14, s0
 8001534:	eef0 7a60 	vmov.f32	s15, s1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
 800153e:	e106      	b.n	800174e <prv_parse_term+0x54a>
            case 16: ghandle->p.data.gsa.dop_h = prv_parse_float_number(ghandle, NULL); break;
 8001540:	2100      	movs	r1, #0
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff fd62 	bl	800100c <prv_parse_float_number>
 8001548:	eeb0 7a40 	vmov.f32	s14, s0
 800154c:	eef0 7a60 	vmov.f32	s15, s1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	ed83 7b22 	vstr	d7, [r3, #136]	@ 0x88
 8001556:	e0fa      	b.n	800174e <prv_parse_term+0x54a>
            case 17: ghandle->p.data.gsa.dop_v = prv_parse_float_number(ghandle, NULL); break;
 8001558:	2100      	movs	r1, #0
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fd56 	bl	800100c <prv_parse_float_number>
 8001560:	eeb0 7a40 	vmov.f32	s14, s0
 8001564:	eef0 7a60 	vmov.f32	s15, s1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
 800156e:	e0ee      	b.n	800174e <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (ghandle->p.term_num >= 3 && ghandle->p.term_num <= 14) {
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001576:	2b02      	cmp	r3, #2
 8001578:	f240 80e4 	bls.w	8001744 <prv_parse_term+0x540>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001582:	2b0e      	cmp	r3, #14
 8001584:	f200 80de 	bhi.w	8001744 <prv_parse_term+0x540>
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
                        (uint8_t)prv_parse_number(ghandle, NULL);
 8001588:	2100      	movs	r1, #0
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f7ff fcf2 	bl	8000f74 <prv_parse_number>
 8001590:	4602      	mov	r2, r0
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001598:	3b03      	subs	r3, #3
                        (uint8_t)prv_parse_number(ghandle, NULL);
 800159a:	b2d1      	uxtb	r1, r2
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	460a      	mov	r2, r1
 80015a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
                }
                break;
 80015a6:	e0cd      	b.n	8001744 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (ghandle->p.stat == STAT_GSV) { /* Process GPGSV statement */
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80015ae:	2903      	cmp	r1, #3
 80015b0:	d11b      	bne.n	80015ea <prv_parse_term+0x3e6>
        switch (ghandle->p.term_num) {
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d002      	beq.n	80015c2 <prv_parse_term+0x3be>
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d00a      	beq.n	80015d6 <prv_parse_term+0x3d2>
                            default: break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80015c0:	e0c5      	b.n	800174e <prv_parse_term+0x54a>
                ghandle->p.data.gsv.stat_num = (uint8_t)prv_parse_number(ghandle, NULL);
 80015c2:	2100      	movs	r1, #0
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff fcd5 	bl	8000f74 <prv_parse_number>
 80015ca:	4603      	mov	r3, r0
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                break;
 80015d4:	e0bb      	b.n	800174e <prv_parse_term+0x54a>
                ghandle->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(ghandle, NULL);
 80015d6:	2100      	movs	r1, #0
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fccb 	bl	8000f74 <prv_parse_number>
 80015de:	4603      	mov	r3, r0
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
                break;
 80015e8:	e0b1      	b.n	800174e <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (ghandle->p.stat == STAT_RMC) { /* Process GPRMC statement */
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f891 1070 	ldrb.w	r1, [r1, #112]	@ 0x70
 80015f0:	2904      	cmp	r1, #4
 80015f2:	f040 80ac 	bne.w	800174e <prv_parse_term+0x54a>
        switch (ghandle->p.term_num) {
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f891 107f 	ldrb.w	r1, [r1, #127]	@ 0x7f
 80015fc:	3902      	subs	r1, #2
 80015fe:	2909      	cmp	r1, #9
 8001600:	f200 80a2 	bhi.w	8001748 <prv_parse_term+0x544>
 8001604:	a001      	add	r0, pc, #4	@ (adr r0, 800160c <prv_parse_term+0x408>)
 8001606:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800160a:	bf00      	nop
 800160c:	08001635 	.word	0x08001635
 8001610:	08001749 	.word	0x08001749
 8001614:	08001749 	.word	0x08001749
 8001618:	08001749 	.word	0x08001749
 800161c:	08001749 	.word	0x08001749
 8001620:	0800164f 	.word	0x0800164f
 8001624:	08001667 	.word	0x08001667
 8001628:	0800167f 	.word	0x0800167f
 800162c:	080016f9 	.word	0x080016f9
 8001630:	08001711 	.word	0x08001711
            case 2: /* Process valid status */ ghandle->p.data.rmc.is_valid = (ghandle->p.term_str[0] == 'A'); break;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800163a:	2b41      	cmp	r3, #65	@ 0x41
 800163c:	bf0c      	ite	eq
 800163e:	2301      	moveq	r3, #1
 8001640:	2300      	movne	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
 800164c:	e07f      	b.n	800174e <prv_parse_term+0x54a>
            case 7: /* Process ground speed in knots */
                ghandle->p.data.rmc.speed = prv_parse_float_number(ghandle, NULL);
 800164e:	2100      	movs	r1, #0
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fcdb 	bl	800100c <prv_parse_float_number>
 8001656:	eeb0 7a40 	vmov.f32	s14, s0
 800165a:	eef0 7a60 	vmov.f32	s15, s1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	ed83 7b24 	vstr	d7, [r3, #144]	@ 0x90
                break;
 8001664:	e073      	b.n	800174e <prv_parse_term+0x54a>
            case 8: /* Process true ground coarse */
                ghandle->p.data.rmc.course = prv_parse_float_number(ghandle, NULL);
 8001666:	2100      	movs	r1, #0
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fccf 	bl	800100c <prv_parse_float_number>
 800166e:	eeb0 7a40 	vmov.f32	s14, s0
 8001672:	eef0 7a60 	vmov.f32	s15, s1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
                break;
 800167c:	e067      	b.n	800174e <prv_parse_term+0x54a>
            case 9: /* Process date */
                ghandle->p.data.rmc.date = (uint8_t)(10U * CTN(ghandle->p.term_str[0]) + CTN(ghandle->p.term_str[1]));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001684:	3b30      	subs	r3, #48	@ 0x30
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	4413      	add	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	b2da      	uxtb	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001698:	4413      	add	r3, r2
 800169a:	b2db      	uxtb	r3, r3
 800169c:	3b30      	subs	r3, #48	@ 0x30
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
                ghandle->p.data.rmc.month = (uint8_t)(10U * CTN(ghandle->p.term_str[2]) + CTN(ghandle->p.term_str[3]));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
 80016ac:	3b30      	subs	r3, #48	@ 0x30
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80016c0:	4413      	add	r3, r2
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	3b30      	subs	r3, #48	@ 0x30
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
                ghandle->p.data.rmc.year = (uint8_t)(10U * CTN(ghandle->p.term_str[4]) + CTN(ghandle->p.term_str[5]));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 80016d4:	3b30      	subs	r3, #48	@ 0x30
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	0092      	lsls	r2, r2, #2
 80016dc:	4413      	add	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3076 	ldrb.w	r3, [r3, #118]	@ 0x76
 80016e8:	4413      	add	r3, r2
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	3b30      	subs	r3, #48	@ 0x30
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
                break;
 80016f6:	e02a      	b.n	800174e <prv_parse_term+0x54a>
            case 10: /* Process magnetic variation */
                ghandle->p.data.rmc.variation = prv_parse_float_number(ghandle, NULL);
 80016f8:	2100      	movs	r1, #0
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fc86 	bl	800100c <prv_parse_float_number>
 8001700:	eeb0 7a40 	vmov.f32	s14, s0
 8001704:	eef0 7a60 	vmov.f32	s15, s1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
                break;
 800170e:	e01e      	b.n	800174e <prv_parse_term+0x54a>
            case 11: /* Process magnetic variation east/west */
                if (ghandle->p.term_str[0] == 'W' || ghandle->p.term_str[0] == 'w') {
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 8001716:	2957      	cmp	r1, #87	@ 0x57
 8001718:	d004      	beq.n	8001724 <prv_parse_term+0x520>
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	f891 1071 	ldrb.w	r1, [r1, #113]	@ 0x71
 8001720:	2977      	cmp	r1, #119	@ 0x77
 8001722:	d113      	bne.n	800174c <prv_parse_term+0x548>
                    ghandle->p.data.rmc.variation = -ghandle->p.data.rmc.variation;
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	@ 0xa0
 800172a:	4602      	mov	r2, r0
 800172c:	f081 4300 	eor.w	r3, r1, #2147483648	@ 0x80000000
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
                }
                break;
 8001736:	e009      	b.n	800174c <prv_parse_term+0x548>
            default: break;
 8001738:	bf00      	nop
 800173a:	e008      	b.n	800174e <prv_parse_term+0x54a>
                break;
 800173c:	bf00      	nop
 800173e:	e006      	b.n	800174e <prv_parse_term+0x54a>
                break;
 8001740:	bf00      	nop
 8001742:	e004      	b.n	800174e <prv_parse_term+0x54a>
                break;
 8001744:	bf00      	nop
 8001746:	e002      	b.n	800174e <prv_parse_term+0x54a>
            default: break;
 8001748:	bf00      	nop
 800174a:	e000      	b.n	800174e <prv_parse_term+0x54a>
                break;
 800174c:	bf00      	nop
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800175a:	bf00      	nop

0800175c <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* ghandle) {
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 800176a:	2b2f      	cmp	r3, #47	@ 0x2f
 800176c:	d90a      	bls.n	8001784 <prv_check_crc+0x28>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001774:	2b39      	cmp	r3, #57	@ 0x39
 8001776:	d805      	bhi.n	8001784 <prv_check_crc+0x28>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	b2da      	uxtb	r2, r3
 8001782:	e024      	b.n	80017ce <prv_check_crc+0x72>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 800178a:	2b60      	cmp	r3, #96	@ 0x60
 800178c:	d90c      	bls.n	80017a8 <prv_check_crc+0x4c>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001794:	2b7a      	cmp	r3, #122	@ 0x7a
 8001796:	d807      	bhi.n	80017a8 <prv_check_crc+0x4c>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 800179e:	3b57      	subs	r3, #87	@ 0x57
 80017a0:	b2db      	uxtb	r3, r3
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	e012      	b.n	80017ce <prv_check_crc+0x72>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 80017ae:	2b40      	cmp	r3, #64	@ 0x40
 80017b0:	d90c      	bls.n	80017cc <prv_check_crc+0x70>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80017b8:	2b5a      	cmp	r3, #90	@ 0x5a
 80017ba:	d807      	bhi.n	80017cc <prv_check_crc+0x70>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 80017c2:	3b37      	subs	r3, #55	@ 0x37
 80017c4:	b2db      	uxtb	r3, r3
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	e000      	b.n	80017ce <prv_check_crc+0x72>
 80017cc:	2200      	movs	r2, #0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80017d6:	d90b      	bls.n	80017f0 <prv_check_crc+0x94>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017de:	2b39      	cmp	r3, #57	@ 0x39
 80017e0:	d806      	bhi.n	80017f0 <prv_check_crc+0x94>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	e026      	b.n	800183e <prv_check_crc+0xe2>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 80017f6:	2b60      	cmp	r3, #96	@ 0x60
 80017f8:	d90d      	bls.n	8001816 <prv_check_crc+0xba>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001800:	2b7a      	cmp	r3, #122	@ 0x7a
 8001802:	d808      	bhi.n	8001816 <prv_check_crc+0xba>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800180a:	3b57      	subs	r3, #87	@ 0x57
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	b2db      	uxtb	r3, r3
 8001814:	e013      	b.n	800183e <prv_check_crc+0xe2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 800181c:	2b40      	cmp	r3, #64	@ 0x40
 800181e:	d90d      	bls.n	800183c <prv_check_crc+0xe0>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001826:	2b5a      	cmp	r3, #90	@ 0x5a
 8001828:	d808      	bhi.n	800183c <prv_check_crc+0xe0>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8001830:	3b37      	subs	r3, #55	@ 0x37
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f003 030f 	and.w	r3, r3, #15
 8001838:	b2db      	uxtb	r3, r3
 800183a:	e000      	b.n	800183e <prv_check_crc+0xe2>
 800183c:	2300      	movs	r3, #0
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 800183e:	4313      	orrs	r3, r2
 8001840:	73fb      	strb	r3, [r7, #15]
    return ghandle->p.crc_calc == crc;              /* They must match! */
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001848:	7bfa      	ldrb	r2, [r7, #15]
 800184a:	429a      	cmp	r2, r3
 800184c:	bf0c      	ite	eq
 800184e:	2301      	moveq	r3, #1
 8001850:	2300      	movne	r3, #0
 8001852:	b2db      	uxtb	r3, r3
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* ghandle) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (ghandle->p.stat == STAT_GGA) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800186e:	2b01      	cmp	r3, #1
 8001870:	d136      	bne.n	80018e0 <prv_copy_from_tmp_memory+0x80>
        ghandle->latitude = ghandle->p.data.gga.latitude;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	e9c1 2300 	strd	r2, r3, [r1]
        ghandle->longitude = ghandle->p.data.gga.longitude;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	e9c1 2302 	strd	r2, r3, [r1, #8]
        ghandle->altitude = ghandle->p.data.gga.altitude;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ghandle->geo_sep = ghandle->p.data.gga.geo_sep;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ghandle->sats_in_use = ghandle->p.data.gga.sats_in_use;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 20a8 	ldrb.w	r2, [r3, #168]	@ 0xa8
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f883 2020 	strb.w	r2, [r3, #32]
        ghandle->fix = ghandle->p.data.gga.fix;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 20a9 	ldrb.w	r2, [r3, #169]	@ 0xa9
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        ghandle->hours = ghandle->p.data.gga.hours;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        ghandle->minutes = ghandle->p.data.gga.minutes;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 20ab 	ldrb.w	r2, [r3, #171]	@ 0xab
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
        ghandle->seconds = ghandle->p.data.gga.seconds;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 20ac 	ldrb.w	r2, [r3, #172]	@ 0xac
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80018de:	e061      	b.n	80019a4 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (ghandle->p.stat == STAT_GSA) {
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d121      	bne.n	800192e <prv_copy_from_tmp_memory+0xce>
        ghandle->dop_h = ghandle->p.data.gsa.dop_h;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        ghandle->dop_p = ghandle->p.data.gsa.dop_p;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        ghandle->dop_v = ghandle->p.data.gsa.dop_v;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        ghandle->fix_mode = ghandle->p.data.gsa.fix_mode;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 20a0 	ldrb.w	r2, [r3, #160]	@ 0xa0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        LWGPS_MEMCPY(ghandle->satellites_ids, ghandle->p.data.gsa.satellites_ids, sizeof(ghandle->satellites_ids));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f103 0041 	add.w	r0, r3, #65	@ 0x41
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	33a1      	adds	r3, #161	@ 0xa1
 8001924:	220c      	movs	r2, #12
 8001926:	4619      	mov	r1, r3
 8001928:	f007 ff57 	bl	80097da <memcpy>
 800192c:	e03a      	b.n	80019a4 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (ghandle->p.stat == STAT_GSV) {
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 8001934:	2b03      	cmp	r3, #3
 8001936:	d106      	bne.n	8001946 <prv_copy_from_tmp_memory+0xe6>
        ghandle->sats_in_view = ghandle->p.data.gsv.sats_in_view;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8001944:	e02e      	b.n	80019a4 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (ghandle->p.stat == STAT_RMC) {
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800194c:	2b04      	cmp	r3, #4
 800194e:	d129      	bne.n	80019a4 <prv_copy_from_tmp_memory+0x144>
        ghandle->course = ghandle->p.data.rmc.course;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
        ghandle->is_valid = ghandle->p.data.rmc.is_valid;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
        ghandle->speed = ghandle->p.data.rmc.speed;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        ghandle->variation = ghandle->p.data.rmc.variation;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
        ghandle->date = ghandle->p.data.rmc.date;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 2089 	ldrb.w	r2, [r3, #137]	@ 0x89
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
        ghandle->month = ghandle->p.data.rmc.month;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 208a 	ldrb.w	r2, [r3, #138]	@ 0x8a
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
        ghandle->year = ghandle->p.data.rmc.year;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 208b 	ldrb.w	r2, [r3, #139]	@ 0x8b
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        ghandle->clk_bias = ghandle->p.data.time.clk_bias;
        ghandle->clk_drift = ghandle->p.data.time.clk_drift;
        ghandle->tp_gran = ghandle->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 80019a4:	2301      	movs	r3, #1
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       ghandle: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* ghandle) {
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
    LWGPS_MEMSET(ghandle, 0x00, sizeof(*ghandle)); /* Reset structure */
 80019b6:	22b0      	movs	r2, #176	@ 0xb0
 80019b8:	2100      	movs	r1, #0
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f007 fe7b 	bl	80096b6 <memset>
    return 1;
 80019c0:	2301      	movs	r3, #1
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* ghandle, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* ghandle, const void* data, size_t len) {
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	60f8      	str	r0, [r7, #12]
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                                /* Process all bytes */
 80019da:	e0ad      	b.n	8001b38 <lwgps_process+0x16e>
        if (*d == '$') {                                         /* Check for beginning of NMEA line */
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b24      	cmp	r3, #36	@ 0x24
 80019e2:	d128      	bne.n	8001a36 <lwgps_process+0x6c>
            LWGPS_MEMSET(&ghandle->p, 0x00, sizeof(ghandle->p)); /* Reset private memory */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3370      	adds	r3, #112	@ 0x70
 80019e8:	2240      	movs	r2, #64	@ 0x40
 80019ea:	2100      	movs	r1, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f007 fe62 	bl	80096b6 <memset>
            TERM_ADD(ghandle, *d);                               /* Add character to term */
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 80019f8:	2b0b      	cmp	r3, #11
 80019fa:	f200 8097 	bhi.w	8001b2c <lwgps_process+0x162>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001a04:	4619      	mov	r1, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001a28:	461a      	mov	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a34:	e07a      	b.n	8001b2c <lwgps_process+0x162>
        } else if (*d == ',') {                                  /* Term separator character */
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b2c      	cmp	r3, #44	@ 0x2c
 8001a3c:	d11d      	bne.n	8001a7a <lwgps_process+0xb0>
            prv_parse_term(ghandle);                             /* Parse term we have currently in memory */
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f7ff fbe0 	bl	8001204 <prv_parse_term>
            CRC_ADD(ghandle, *d);                                /* Add character to CRC computation */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4053      	eors	r3, r2
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            TERM_NEXT(ghandle);                                  /* Start with next term */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001a6e:	3301      	adds	r3, #1
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001a78:	e058      	b.n	8001b2c <lwgps_process+0x162>
        } else if (*d == '*') {                                  /* Start indicates end of data for CRC computation */
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a80:	d117      	bne.n	8001ab2 <lwgps_process+0xe8>
            prv_parse_term(ghandle);                             /* Parse term we have currently in memory */
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f7ff fbbe 	bl	8001204 <prv_parse_term>
            ghandle->p.star = 1;                                 /* STAR detected */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            TERM_NEXT(ghandle);                                  /* Start with next term */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 307f 	ldrb.w	r3, [r3, #127]	@ 0x7f
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f
 8001ab0:	e03c      	b.n	8001b2c <lwgps_process+0x162>
        } else if (*d == '\r') {
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b0d      	cmp	r3, #13
 8001ab8:	d109      	bne.n	8001ace <lwgps_process+0x104>
            if (prv_check_crc(ghandle)) { /* Check for CRC result */
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f7ff fe4e 	bl	800175c <prv_check_crc>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d032      	beq.n	8001b2c <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(ghandle); /* Copy memory from temporary to user memory */
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f7ff feca 	bl	8001860 <prv_copy_from_tmp_memory>
 8001acc:	e02e      	b.n	8001b2c <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!ghandle->p.star) {   /* Add to CRC only if star not yet detected */
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <lwgps_process+0x122>
                CRC_ADD(ghandle, *d); /* Add to CRC */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f893 2081 	ldrb.w	r2, [r3, #129]	@ 0x81
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	4053      	eors	r3, r2
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
            }
            TERM_ADD(ghandle, *d); /* Add character to term */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001af2:	2b0b      	cmp	r3, #11
 8001af4:	d81a      	bhi.n	8001b2c <lwgps_process+0x162>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001afc:	4619      	mov	r1, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	781a      	ldrb	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	440b      	add	r3, r1
 8001b06:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001b10:	3301      	adds	r3, #1
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
 8001b20:	461a      	mov	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4413      	add	r3, r2
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
    for (; len > 0; ++d, --len) {                                /* Process all bytes */
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f47f af4e 	bne.w	80019dc <lwgps_process+0x12>
        }
    }
    return 1;
 8001b40:	2301      	movs	r3, #1
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_UART_RxCpltCallback>:
	uint8_t adres_l = 0x02;
	uint8_t kanal	= 0x12;


	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	    if (huart == &huart6)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a4e      	ldr	r2, [pc, #312]	@ (8001c90 <HAL_UART_RxCpltCallback+0x144>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d125      	bne.n	8001ba8 <HAL_UART_RxCpltCallback+0x5c>
	    {
	        if (rx_data != '\n' && rx_index < sizeof(rx_buffer))
 8001b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c94 <HAL_UART_RxCpltCallback+0x148>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b0a      	cmp	r3, #10
 8001b62:	d010      	beq.n	8001b86 <HAL_UART_RxCpltCallback+0x3a>
 8001b64:	4b4c      	ldr	r3, [pc, #304]	@ (8001c98 <HAL_UART_RxCpltCallback+0x14c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b25b      	sxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <HAL_UART_RxCpltCallback+0x3a>
	            rx_buffer[rx_index++] = rx_data;
 8001b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c98 <HAL_UART_RxCpltCallback+0x14c>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	b2d1      	uxtb	r1, r2
 8001b76:	4a48      	ldr	r2, [pc, #288]	@ (8001c98 <HAL_UART_RxCpltCallback+0x14c>)
 8001b78:	7011      	strb	r1, [r2, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b45      	ldr	r3, [pc, #276]	@ (8001c94 <HAL_UART_RxCpltCallback+0x148>)
 8001b7e:	7819      	ldrb	r1, [r3, #0]
 8001b80:	4b46      	ldr	r3, [pc, #280]	@ (8001c9c <HAL_UART_RxCpltCallback+0x150>)
 8001b82:	5499      	strb	r1, [r3, r2]
 8001b84:	e00a      	b.n	8001b9c <HAL_UART_RxCpltCallback+0x50>
	        else {
	            lwgps_process(&gps, rx_buffer, rx_index + 1);
 8001b86:	4b44      	ldr	r3, [pc, #272]	@ (8001c98 <HAL_UART_RxCpltCallback+0x14c>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4943      	ldr	r1, [pc, #268]	@ (8001c9c <HAL_UART_RxCpltCallback+0x150>)
 8001b90:	4843      	ldr	r0, [pc, #268]	@ (8001ca0 <HAL_UART_RxCpltCallback+0x154>)
 8001b92:	f7ff ff1a 	bl	80019ca <lwgps_process>
	            rx_index = 0;
 8001b96:	4b40      	ldr	r3, [pc, #256]	@ (8001c98 <HAL_UART_RxCpltCallback+0x14c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
	        }

	        // Sadece huart6 için tekrar alım ayarla
	        HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	493d      	ldr	r1, [pc, #244]	@ (8001c94 <HAL_UART_RxCpltCallback+0x148>)
 8001ba0:	483b      	ldr	r0, [pc, #236]	@ (8001c90 <HAL_UART_RxCpltCallback+0x144>)
 8001ba2:	f006 f866 	bl	8007c72 <HAL_UART_Receive_IT>
	        }

	        // Sadece huart4 için tekrar alım ayarla
	        HAL_UART_Receive_IT(&huart4, &test_data, 1);
	    }
	}
 8001ba6:	e06f      	b.n	8001c88 <HAL_UART_RxCpltCallback+0x13c>
	    else if (huart == &huart4)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a3e      	ldr	r2, [pc, #248]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x158>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d16b      	bne.n	8001c88 <HAL_UART_RxCpltCallback+0x13c>
	        if (test_index == 0 && sut_index == 0)
 8001bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x15c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d112      	bne.n	8001bde <HAL_UART_RxCpltCallback+0x92>
 8001bb8:	4b3c      	ldr	r3, [pc, #240]	@ (8001cac <HAL_UART_RxCpltCallback+0x160>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10e      	bne.n	8001bde <HAL_UART_RxCpltCallback+0x92>
	            if (test_data == 0xAA) dinleme_durumu = 0;
 8001bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x164>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2baa      	cmp	r3, #170	@ 0xaa
 8001bc6:	d103      	bne.n	8001bd0 <HAL_UART_RxCpltCallback+0x84>
 8001bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x168>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e006      	b.n	8001bde <HAL_UART_RxCpltCallback+0x92>
	            else if (test_data == 0xAB) dinleme_durumu = 1;
 8001bd0:	4b37      	ldr	r3, [pc, #220]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x164>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2bab      	cmp	r3, #171	@ 0xab
 8001bd6:	d102      	bne.n	8001bde <HAL_UART_RxCpltCallback+0x92>
 8001bd8:	4b36      	ldr	r3, [pc, #216]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x168>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]
	        if (dinleme_durumu == 0)
 8001bde:	4b35      	ldr	r3, [pc, #212]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x168>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d12f      	bne.n	8001c46 <HAL_UART_RxCpltCallback+0xfa>
	            if (test_data != 0x0A)
 8001be6:	4b32      	ldr	r3, [pc, #200]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x164>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b0a      	cmp	r3, #10
 8001bec:	d00b      	beq.n	8001c06 <HAL_UART_RxCpltCallback+0xba>
	                test_buffer[test_index++] = test_data;
 8001bee:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x15c>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	b2d1      	uxtb	r1, r2
 8001bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x15c>)
 8001bf8:	7011      	strb	r1, [r2, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x164>)
 8001bfe:	7819      	ldrb	r1, [r3, #0]
 8001c00:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x16c>)
 8001c02:	5499      	strb	r1, [r3, r2]
 8001c04:	e03b      	b.n	8001c7e <HAL_UART_RxCpltCallback+0x132>
	                if (test_buffer[1] == 0x20) { calisma_durumu = 1; dinleme_durumu = 0; }
 8001c06:	4b2c      	ldr	r3, [pc, #176]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x16c>)
 8001c08:	785b      	ldrb	r3, [r3, #1]
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d106      	bne.n	8001c1c <HAL_UART_RxCpltCallback+0xd0>
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cbc <HAL_UART_RxCpltCallback+0x170>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	4b27      	ldr	r3, [pc, #156]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x168>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e010      	b.n	8001c3e <HAL_UART_RxCpltCallback+0xf2>
	                else if (test_buffer[1] == 0x22) { calisma_durumu = 2; dinleme_durumu = 1; }
 8001c1c:	4b26      	ldr	r3, [pc, #152]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x16c>)
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	2b22      	cmp	r3, #34	@ 0x22
 8001c22:	d106      	bne.n	8001c32 <HAL_UART_RxCpltCallback+0xe6>
 8001c24:	4b25      	ldr	r3, [pc, #148]	@ (8001cbc <HAL_UART_RxCpltCallback+0x170>)
 8001c26:	2202      	movs	r2, #2
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	4b22      	ldr	r3, [pc, #136]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x168>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e005      	b.n	8001c3e <HAL_UART_RxCpltCallback+0xf2>
	                else { calisma_durumu = 0; dinleme_durumu = 0; }
 8001c32:	4b22      	ldr	r3, [pc, #136]	@ (8001cbc <HAL_UART_RxCpltCallback+0x170>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x168>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
	                test_index = 0;
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x15c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	e01b      	b.n	8001c7e <HAL_UART_RxCpltCallback+0x132>
	        else if (dinleme_durumu == 1)
 8001c46:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x168>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d117      	bne.n	8001c7e <HAL_UART_RxCpltCallback+0x132>
	            sut_buffer[sut_index] = test_data;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <HAL_UART_RxCpltCallback+0x160>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x164>)
 8001c56:	7819      	ldrb	r1, [r3, #0]
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x174>)
 8001c5a:	5499      	strb	r1, [r3, r2]
	            sut_index = (sut_index + 1) % 36;
 8001c5c:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <HAL_UART_RxCpltCallback+0x160>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x178>)
 8001c64:	fb83 1302 	smull	r1, r3, r3, r2
 8001c68:	10d9      	asrs	r1, r3, #3
 8001c6a:	17d3      	asrs	r3, r2, #31
 8001c6c:	1ac9      	subs	r1, r1, r3
 8001c6e:	460b      	mov	r3, r1
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	440b      	add	r3, r1
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	1ad1      	subs	r1, r2, r3
 8001c78:	b2ca      	uxtb	r2, r1
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <HAL_UART_RxCpltCallback+0x160>)
 8001c7c:	701a      	strb	r2, [r3, #0]
	        HAL_UART_Receive_IT(&huart4, &test_data, 1);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	490b      	ldr	r1, [pc, #44]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x164>)
 8001c82:	4808      	ldr	r0, [pc, #32]	@ (8001ca4 <HAL_UART_RxCpltCallback+0x158>)
 8001c84:	f005 fff5 	bl	8007c72 <HAL_UART_Receive_IT>
	}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000041c 	.word	0x2000041c
 8001c94:	20000729 	.word	0x20000729
 8001c98:	20000728 	.word	0x20000728
 8001c9c:	200006a8 	.word	0x200006a8
 8001ca0:	200005f8 	.word	0x200005f8
 8001ca4:	2000038c 	.word	0x2000038c
 8001ca8:	20000731 	.word	0x20000731
 8001cac:	20000758 	.word	0x20000758
 8001cb0:	20000732 	.word	0x20000732
 8001cb4:	200004b8 	.word	0x200004b8
 8001cb8:	2000072c 	.word	0x2000072c
 8001cbc:	200004b4 	.word	0x200004b4
 8001cc0:	20000734 	.word	0x20000734
 8001cc4:	38e38e39 	.word	0x38e38e39

08001cc8 <Calculate_Altitude>:


	float Calculate_Altitude(float pressure_mbar) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	ed87 0a01 	vstr	s0, [r7, #4]
	    return 44330.0f * (1.0f - pow((pressure_mbar * 100.0f / 101325.0f), 1.0f / 5.255f));
 8001cd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cd6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001d50 <Calculate_Altitude+0x88>
 8001cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cde:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001d54 <Calculate_Altitude+0x8c>
 8001ce2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ce6:	ee16 0a90 	vmov	r0, s13
 8001cea:	f7fe fc2d 	bl	8000548 <__aeabi_f2d>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	ed9f 1b13 	vldr	d1, [pc, #76]	@ 8001d40 <Calculate_Altitude+0x78>
 8001cf6:	ec43 2b10 	vmov	d0, r2, r3
 8001cfa:	f009 fdbd 	bl	800b878 <pow>
 8001cfe:	ec53 2b10 	vmov	r2, r3, d0
 8001d02:	f04f 0000 	mov.w	r0, #0
 8001d06:	4914      	ldr	r1, [pc, #80]	@ (8001d58 <Calculate_Altitude+0x90>)
 8001d08:	f7fe fabe 	bl	8000288 <__aeabi_dsub>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	a30c      	add	r3, pc, #48	@ (adr r3, 8001d48 <Calculate_Altitude+0x80>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	f7fe fc6d 	bl	80005f8 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe ff3f 	bl	8000ba8 <__aeabi_d2f>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	ee07 3a90 	vmov	s15, r3
	}
 8001d30:	eeb0 0a67 	vmov.f32	s0, s15
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	f3af 8000 	nop.w
 8001d40:	c0000000 	.word	0xc0000000
 8001d44:	3fc85b95 	.word	0x3fc85b95
 8001d48:	00000000 	.word	0x00000000
 8001d4c:	40e5a540 	.word	0x40e5a540
 8001d50:	42c80000 	.word	0x42c80000
 8001d54:	47c5e680 	.word	0x47c5e680
 8001d58:	3ff00000 	.word	0x3ff00000
 8001d5c:	00000000 	.word	0x00000000

08001d60 <Calculate_Pitch>:

	float Calculate_Pitch(float accX, float accY, float accZ) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d6a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d6e:	ed87 1a01 	vstr	s2, [r7, #4]
	    return atan2f(accX, sqrtf(accY * accY + accZ * accZ)) * 180.0f / M_PI;
 8001d72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d76:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d86:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8a:	f00a f85b 	bl	800be44 <sqrtf>
 8001d8e:	eef0 7a40 	vmov.f32	s15, s0
 8001d92:	eef0 0a67 	vmov.f32	s1, s15
 8001d96:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d9a:	f00a f851 	bl	800be40 <atan2f>
 8001d9e:	eef0 7a40 	vmov.f32	s15, s0
 8001da2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001de0 <Calculate_Pitch+0x80>
 8001da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001daa:	ee17 0a90 	vmov	r0, s15
 8001dae:	f7fe fbcb 	bl	8000548 <__aeabi_f2d>
 8001db2:	a309      	add	r3, pc, #36	@ (adr r3, 8001dd8 <Calculate_Pitch+0x78>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	f7fe fd48 	bl	800084c <__aeabi_ddiv>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7fe fef0 	bl	8000ba8 <__aeabi_d2f>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	ee07 3a90 	vmov	s15, r3
	}
 8001dce:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	54442d18 	.word	0x54442d18
 8001ddc:	400921fb 	.word	0x400921fb
 8001de0:	43340000 	.word	0x43340000

08001de4 <floatToBigEndian>:


	void floatToBigEndian(uint8_t *d,float v){
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	ed87 0a00 	vstr	s0, [r7]
	    float r=((int)(v*100.0f))/100.0f;
 8001df0:	edd7 7a00 	vldr	s15, [r7]
 8001df4:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001e40 <floatToBigEndian+0x5c>
 8001df8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e04:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001e40 <floatToBigEndian+0x5c>
 8001e08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e0c:	edc7 7a03 	vstr	s15, [r7, #12]
	    union{float f;uint8_t b[4];}u;u.f=r;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	60bb      	str	r3, [r7, #8]
	    d[0]=u.b[3];d[1]=u.b[2];d[2]=u.b[1];d[3]=u.b[0];
 8001e14:	7afa      	ldrb	r2, [r7, #11]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	701a      	strb	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	7aba      	ldrb	r2, [r7, #10]
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3302      	adds	r3, #2
 8001e26:	7a7a      	ldrb	r2, [r7, #9]
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3303      	adds	r3, #3
 8001e2e:	7a3a      	ldrb	r2, [r7, #8]
 8001e30:	701a      	strb	r2, [r3, #0]
	}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	42c80000 	.word	0x42c80000

08001e44 <bigEndianToFloat>:

	float bigEndianToFloat(uint8_t *d)
	{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	    union { float f; uint8_t b[4]; } u;
	    // Big endian gelen veriyi ters çeviriyoruz
	    u.b[0] = d[3];
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	78db      	ldrb	r3, [r3, #3]
 8001e50:	733b      	strb	r3, [r7, #12]
	    u.b[1] = d[2];
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	789b      	ldrb	r3, [r3, #2]
 8001e56:	737b      	strb	r3, [r7, #13]
	    u.b[2] = d[1];
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	785b      	ldrb	r3, [r3, #1]
 8001e5c:	73bb      	strb	r3, [r7, #14]
	    u.b[3] = d[0];
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	73fb      	strb	r3, [r7, #15]
	    return u.f;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	ee07 3a90 	vmov	s15, r3
	}
 8001e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <transmit_SIT_packet>:


	void transmit_SIT_packet(float irtifa, float press, float accX, float accY, float accZ,
	                         float gyroX, float gyroY, float gyroZ) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	@ 0x28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	ed87 0a07 	vstr	s0, [r7, #28]
 8001e82:	edc7 0a06 	vstr	s1, [r7, #24]
 8001e86:	ed87 1a05 	vstr	s2, [r7, #20]
 8001e8a:	edc7 1a04 	vstr	s3, [r7, #16]
 8001e8e:	ed87 2a03 	vstr	s4, [r7, #12]
 8001e92:	edc7 2a02 	vstr	s5, [r7, #8]
 8001e96:	ed87 3a01 	vstr	s6, [r7, #4]
 8001e9a:	edc7 3a00 	vstr	s7, [r7]

	    veri[0] = 0xAB;
 8001e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f50 <transmit_SIT_packet+0xd8>)
 8001ea0:	22ab      	movs	r2, #171	@ 0xab
 8001ea2:	701a      	strb	r2, [r3, #0]

	    floatToBigEndian(&veri[1],  irtifa);
 8001ea4:	ed97 0a07 	vldr	s0, [r7, #28]
 8001ea8:	482a      	ldr	r0, [pc, #168]	@ (8001f54 <transmit_SIT_packet+0xdc>)
 8001eaa:	f7ff ff9b 	bl	8001de4 <floatToBigEndian>
	    floatToBigEndian(&veri[5],  press);
 8001eae:	ed97 0a06 	vldr	s0, [r7, #24]
 8001eb2:	4829      	ldr	r0, [pc, #164]	@ (8001f58 <transmit_SIT_packet+0xe0>)
 8001eb4:	f7ff ff96 	bl	8001de4 <floatToBigEndian>
	    floatToBigEndian(&veri[9],  accX);
 8001eb8:	ed97 0a05 	vldr	s0, [r7, #20]
 8001ebc:	4827      	ldr	r0, [pc, #156]	@ (8001f5c <transmit_SIT_packet+0xe4>)
 8001ebe:	f7ff ff91 	bl	8001de4 <floatToBigEndian>
	    floatToBigEndian(&veri[13], accY);
 8001ec2:	ed97 0a04 	vldr	s0, [r7, #16]
 8001ec6:	4826      	ldr	r0, [pc, #152]	@ (8001f60 <transmit_SIT_packet+0xe8>)
 8001ec8:	f7ff ff8c 	bl	8001de4 <floatToBigEndian>
	    floatToBigEndian(&veri[17], accZ);
 8001ecc:	ed97 0a03 	vldr	s0, [r7, #12]
 8001ed0:	4824      	ldr	r0, [pc, #144]	@ (8001f64 <transmit_SIT_packet+0xec>)
 8001ed2:	f7ff ff87 	bl	8001de4 <floatToBigEndian>
	    floatToBigEndian(&veri[21], gyroX);
 8001ed6:	ed97 0a02 	vldr	s0, [r7, #8]
 8001eda:	4823      	ldr	r0, [pc, #140]	@ (8001f68 <transmit_SIT_packet+0xf0>)
 8001edc:	f7ff ff82 	bl	8001de4 <floatToBigEndian>
	    floatToBigEndian(&veri[25], gyroY);
 8001ee0:	ed97 0a01 	vldr	s0, [r7, #4]
 8001ee4:	4821      	ldr	r0, [pc, #132]	@ (8001f6c <transmit_SIT_packet+0xf4>)
 8001ee6:	f7ff ff7d 	bl	8001de4 <floatToBigEndian>
	    floatToBigEndian(&veri[29], gyroZ);
 8001eea:	ed97 0a00 	vldr	s0, [r7]
 8001eee:	4820      	ldr	r0, [pc, #128]	@ (8001f70 <transmit_SIT_packet+0xf8>)
 8001ef0:	f7ff ff78 	bl	8001de4 <floatToBigEndian>

	    uint8_t checksum = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	    for (int i = 0; i <= 32; i++) {
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
 8001efe:	e00b      	b.n	8001f18 <transmit_SIT_packet+0xa0>
	        checksum += veri[i];
 8001f00:	4a13      	ldr	r2, [pc, #76]	@ (8001f50 <transmit_SIT_packet+0xd8>)
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	4413      	add	r3, r2
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	    for (int i = 0; i <= 32; i++) {
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	3301      	adds	r3, #1
 8001f16:	623b      	str	r3, [r7, #32]
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	ddf0      	ble.n	8001f00 <transmit_SIT_packet+0x88>
	    }
	    checksum &= 0xFF;

	    veri[33] = checksum;
 8001f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f50 <transmit_SIT_packet+0xd8>)
 8001f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f24:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
	    veri[34] = 0x0D;
 8001f28:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <transmit_SIT_packet+0xd8>)
 8001f2a:	220d      	movs	r2, #13
 8001f2c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	    veri[35] = 0x0A;
 8001f30:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <transmit_SIT_packet+0xd8>)
 8001f32:	220a      	movs	r2, #10
 8001f34:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	    HAL_UART_Transmit(&huart4, veri, sizeof(veri), HAL_MAX_DELAY);
 8001f38:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3c:	2224      	movs	r2, #36	@ 0x24
 8001f3e:	4904      	ldr	r1, [pc, #16]	@ (8001f50 <transmit_SIT_packet+0xd8>)
 8001f40:	480c      	ldr	r0, [pc, #48]	@ (8001f74 <transmit_SIT_packet+0xfc>)
 8001f42:	f005 fe0b 	bl	8007b5c <HAL_UART_Transmit>
	}
 8001f46:	bf00      	nop
 8001f48:	3728      	adds	r7, #40	@ 0x28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000075c 	.word	0x2000075c
 8001f54:	2000075d 	.word	0x2000075d
 8001f58:	20000761 	.word	0x20000761
 8001f5c:	20000765 	.word	0x20000765
 8001f60:	20000769 	.word	0x20000769
 8001f64:	2000076d 	.word	0x2000076d
 8001f68:	20000771 	.word	0x20000771
 8001f6c:	20000775 	.word	0x20000775
 8001f70:	20000779 	.word	0x20000779
 8001f74:	2000038c 	.word	0x2000038c

08001f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f7c:	b0ae      	sub	sp, #184	@ 0xb8
 8001f7e:	af18      	add	r7, sp, #96	@ 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f80:	f002 fc24 	bl	80047cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f84:	f000 fdae 	bl	8002ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f88:	f000 ff28 	bl	8002ddc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f8c:	f000 fe16 	bl	8002bbc <MX_I2C1_Init>
  MX_I2C2_Init();
 8001f90:	f000 fe42 	bl	8002c18 <MX_I2C2_Init>
  MX_UART4_Init();
 8001f94:	f000 fea4 	bl	8002ce0 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8001f98:	f000 fecc 	bl	8002d34 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001f9c:	f000 fef4 	bl	8002d88 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8001fa0:	f000 fe68 	bl	8002c74 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  lastTick = HAL_GetTick();
 8001fa4:	f002 fc48 	bl	8004838 <HAL_GetTick>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4ac9      	ldr	r2, [pc, #804]	@ (80022d0 <main+0x358>)
 8001fac:	6013      	str	r3, [r2, #0]


HAL_GPIO_WritePin(GPIOD, LoRa_M0_Pin, GPIO_PIN_RESET); // M0 = 0
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fb4:	48c7      	ldr	r0, [pc, #796]	@ (80022d4 <main+0x35c>)
 8001fb6:	f002 ff7f 	bl	8004eb8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOD, LoRa_M1_Pin, GPIO_PIN_RESET); // M1 = 0
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fc0:	48c4      	ldr	r0, [pc, #784]	@ (80022d4 <main+0x35c>)
 8001fc2:	f002 ff79 	bl	8004eb8 <HAL_GPIO_WritePin>
HAL_Delay(50); // Modülün moda geçmesini bekle
 8001fc6:	2032      	movs	r0, #50	@ 0x32
 8001fc8:	f002 fc42 	bl	8004850 <HAL_Delay>

lwgps_init(&gps);
 8001fcc:	48c2      	ldr	r0, [pc, #776]	@ (80022d8 <main+0x360>)
 8001fce:	f7ff fcee 	bl	80019ae <lwgps_init>
HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	49c1      	ldr	r1, [pc, #772]	@ (80022dc <main+0x364>)
 8001fd6:	48c2      	ldr	r0, [pc, #776]	@ (80022e0 <main+0x368>)
 8001fd8:	f005 fe4b 	bl	8007c72 <HAL_UART_Receive_IT>
HAL_UART_Receive_IT(&huart4, &test_data, 1);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	49c1      	ldr	r1, [pc, #772]	@ (80022e4 <main+0x36c>)
 8001fe0:	48c1      	ldr	r0, [pc, #772]	@ (80022e8 <main+0x370>)
 8001fe2:	f005 fe46 	bl	8007c72 <HAL_UART_Receive_IT>


#ifdef MS5611_H_
MS5611.I2C_ADDRESS = MS5611_I2C_ADDRESS_H;
 8001fe6:	4bc1      	ldr	r3, [pc, #772]	@ (80022ec <main+0x374>)
 8001fe8:	22ee      	movs	r2, #238	@ 0xee
 8001fea:	809a      	strh	r2, [r3, #4]
MS5611.i2c = &hi2c1;
 8001fec:	4bbf      	ldr	r3, [pc, #764]	@ (80022ec <main+0x374>)
 8001fee:	4ac0      	ldr	r2, [pc, #768]	@ (80022f0 <main+0x378>)
 8001ff0:	601a      	str	r2, [r3, #0]
MS5611_Init(&MS5611);
 8001ff2:	48be      	ldr	r0, [pc, #760]	@ (80022ec <main+0x374>)
 8001ff4:	f001 fbda 	bl	80037ac <MS5611_Init>
#endif

rocket_state = 0;
 8001ff8:	4bbe      	ldr	r3, [pc, #760]	@ (80022f4 <main+0x37c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]

MS5611_Read_ActVal(&MS5611);
 8001ffe:	48bb      	ldr	r0, [pc, #748]	@ (80022ec <main+0x374>)
 8002000:	f002 f826 	bl	8004050 <MS5611_Read_ActVal>
MS5611_FirstCalculateDatas(&MS5611);
 8002004:	48b9      	ldr	r0, [pc, #740]	@ (80022ec <main+0x374>)
 8002006:	f001 fdb5 	bl	8003b74 <MS5611_FirstCalculateDatas>
MPU9255_Init(&hi2c2);
 800200a:	48bb      	ldr	r0, [pc, #748]	@ (80022f8 <main+0x380>)
 800200c:	f000 ffa6 	bl	8002f5c <MPU9255_Init>

baslangic_irtifa = 44330 * (1 - pow((MS5611_Press * 100 / 101325), (1 / 5.255)));
 8002010:	4bba      	ldr	r3, [pc, #744]	@ (80022fc <main+0x384>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8002300 <main+0x388>
 800201a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800201e:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8002304 <main+0x38c>
 8002022:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002026:	ee16 0a90 	vmov	r0, s13
 800202a:	f7fe fa8d 	bl	8000548 <__aeabi_f2d>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	ed9f 1ba1 	vldr	d1, [pc, #644]	@ 80022b8 <main+0x340>
 8002036:	ec43 2b10 	vmov	d0, r2, r3
 800203a:	f009 fc1d 	bl	800b878 <pow>
 800203e:	ec53 2b10 	vmov	r2, r3, d0
 8002042:	f04f 0000 	mov.w	r0, #0
 8002046:	49b0      	ldr	r1, [pc, #704]	@ (8002308 <main+0x390>)
 8002048:	f7fe f91e 	bl	8000288 <__aeabi_dsub>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	a39a      	add	r3, pc, #616	@ (adr r3, 80022c0 <main+0x348>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	f7fe facd 	bl	80005f8 <__aeabi_dmul>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f7fe fd9f 	bl	8000ba8 <__aeabi_d2f>
 800206a:	4603      	mov	r3, r0
 800206c:	4aa7      	ldr	r2, [pc, #668]	@ (800230c <main+0x394>)
 800206e:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
{

	if (HAL_GetTick() - lastTick >= 100)
 8002070:	f002 fbe2 	bl	8004838 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	4b96      	ldr	r3, [pc, #600]	@ (80022d0 <main+0x358>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b63      	cmp	r3, #99	@ 0x63
 800207e:	d9f7      	bls.n	8002070 <main+0xf8>
	{
	// calışma moduna uygun veri alımının belirlenmesi
	lastTick = HAL_GetTick();
 8002080:	f002 fbda 	bl	8004838 <HAL_GetTick>
 8002084:	4603      	mov	r3, r0
 8002086:	4a92      	ldr	r2, [pc, #584]	@ (80022d0 <main+0x358>)
 8002088:	6013      	str	r3, [r2, #0]
	        if ((calisma_durumu == 0) || (calisma_durumu == 1))
 800208a:	4ba1      	ldr	r3, [pc, #644]	@ (8002310 <main+0x398>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d004      	beq.n	800209c <main+0x124>
 8002092:	4b9f      	ldr	r3, [pc, #636]	@ (8002310 <main+0x398>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b01      	cmp	r3, #1
 8002098:	f040 81d2 	bne.w	8002440 <main+0x4c8>
	        {
	            MS5611_Read_ActVal(&MS5611);
 800209c:	4893      	ldr	r0, [pc, #588]	@ (80022ec <main+0x374>)
 800209e:	f001 ffd7 	bl	8004050 <MS5611_Read_ActVal>
	            MS5611_FirstCalculateDatas(&MS5611);
 80020a2:	4892      	ldr	r0, [pc, #584]	@ (80022ec <main+0x374>)
 80020a4:	f001 fd66 	bl	8003b74 <MS5611_FirstCalculateDatas>
	            MPU9255_Read_All(&hi2c2,&DataStruct);
 80020a8:	499a      	ldr	r1, [pc, #616]	@ (8002314 <main+0x39c>)
 80020aa:	4893      	ldr	r0, [pc, #588]	@ (80022f8 <main+0x380>)
 80020ac:	f000 ffe0 	bl	8003070 <MPU9255_Read_All>

              float roll_rad = DataStruct.KalmanAngleX * (M_PI / 180.0f);
 80020b0:	4b98      	ldr	r3, [pc, #608]	@ (8002314 <main+0x39c>)
 80020b2:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 80020b6:	a384      	add	r3, pc, #528	@ (adr r3, 80022c8 <main+0x350>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe fa9c 	bl	80005f8 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	f7fe fd6e 	bl	8000ba8 <__aeabi_d2f>
 80020cc:	4603      	mov	r3, r0
 80020ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
              float pitch_rad = DataStruct.KalmanAngleY * (M_PI / 180.0f);
 80020d0:	4b90      	ldr	r3, [pc, #576]	@ (8002314 <main+0x39c>)
 80020d2:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 80020d6:	a37c      	add	r3, pc, #496	@ (adr r3, 80022c8 <main+0x350>)
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	f7fe fa8c 	bl	80005f8 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fd5e 	bl	8000ba8 <__aeabi_d2f>
 80020ec:	4603      	mov	r3, r0
 80020ee:	64bb      	str	r3, [r7, #72]	@ 0x48

              float mag_x_comp = DataStruct.Mx * cos(pitch_rad) + DataStruct.My * sin(pitch_rad) * sin(roll_rad) + DataStruct.Mz * sin(pitch_rad) * cos(roll_rad);
 80020f0:	4b88      	ldr	r3, [pc, #544]	@ (8002314 <main+0x39c>)
 80020f2:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 80020f6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80020f8:	f7fe fa26 	bl	8000548 <__aeabi_f2d>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	ec43 2b10 	vmov	d0, r2, r3
 8002104:	f009 fdec 	bl	800bce0 <cos>
 8002108:	ec53 2b10 	vmov	r2, r3, d0
 800210c:	4620      	mov	r0, r4
 800210e:	4629      	mov	r1, r5
 8002110:	f7fe fa72 	bl	80005f8 <__aeabi_dmul>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4690      	mov	r8, r2
 800211a:	4699      	mov	r9, r3
 800211c:	4b7d      	ldr	r3, [pc, #500]	@ (8002314 <main+0x39c>)
 800211e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 8002122:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002124:	f7fe fa10 	bl	8000548 <__aeabi_f2d>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	ec43 2b10 	vmov	d0, r2, r3
 8002130:	f009 fe32 	bl	800bd98 <sin>
 8002134:	ec53 2b10 	vmov	r2, r3, d0
 8002138:	4620      	mov	r0, r4
 800213a:	4629      	mov	r1, r5
 800213c:	f7fe fa5c 	bl	80005f8 <__aeabi_dmul>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4614      	mov	r4, r2
 8002146:	461d      	mov	r5, r3
 8002148:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800214a:	f7fe f9fd 	bl	8000548 <__aeabi_f2d>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	ec43 2b10 	vmov	d0, r2, r3
 8002156:	f009 fe1f 	bl	800bd98 <sin>
 800215a:	ec53 2b10 	vmov	r2, r3, d0
 800215e:	4620      	mov	r0, r4
 8002160:	4629      	mov	r1, r5
 8002162:	f7fe fa49 	bl	80005f8 <__aeabi_dmul>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4640      	mov	r0, r8
 800216c:	4649      	mov	r1, r9
 800216e:	f7fe f88d 	bl	800028c <__adddf3>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4690      	mov	r8, r2
 8002178:	4699      	mov	r9, r3
 800217a:	4b66      	ldr	r3, [pc, #408]	@ (8002314 <main+0x39c>)
 800217c:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 8002180:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002182:	f7fe f9e1 	bl	8000548 <__aeabi_f2d>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	ec43 2b10 	vmov	d0, r2, r3
 800218e:	f009 fe03 	bl	800bd98 <sin>
 8002192:	ec53 2b10 	vmov	r2, r3, d0
 8002196:	4620      	mov	r0, r4
 8002198:	4629      	mov	r1, r5
 800219a:	f7fe fa2d 	bl	80005f8 <__aeabi_dmul>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4614      	mov	r4, r2
 80021a4:	461d      	mov	r5, r3
 80021a6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80021a8:	f7fe f9ce 	bl	8000548 <__aeabi_f2d>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	ec43 2b10 	vmov	d0, r2, r3
 80021b4:	f009 fd94 	bl	800bce0 <cos>
 80021b8:	ec53 2b10 	vmov	r2, r3, d0
 80021bc:	4620      	mov	r0, r4
 80021be:	4629      	mov	r1, r5
 80021c0:	f7fe fa1a 	bl	80005f8 <__aeabi_dmul>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4640      	mov	r0, r8
 80021ca:	4649      	mov	r1, r9
 80021cc:	f7fe f85e 	bl	800028c <__adddf3>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4610      	mov	r0, r2
 80021d6:	4619      	mov	r1, r3
 80021d8:	f7fe fce6 	bl	8000ba8 <__aeabi_d2f>
 80021dc:	4603      	mov	r3, r0
 80021de:	647b      	str	r3, [r7, #68]	@ 0x44
              float mag_y_comp = DataStruct.My * cos(roll_rad) - DataStruct.Mz * sin(roll_rad);
 80021e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002314 <main+0x39c>)
 80021e2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80021e6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80021e8:	f7fe f9ae 	bl	8000548 <__aeabi_f2d>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	ec43 2b10 	vmov	d0, r2, r3
 80021f4:	f009 fd74 	bl	800bce0 <cos>
 80021f8:	ec53 2b10 	vmov	r2, r3, d0
 80021fc:	4620      	mov	r0, r4
 80021fe:	4629      	mov	r1, r5
 8002200:	f7fe f9fa 	bl	80005f8 <__aeabi_dmul>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4690      	mov	r8, r2
 800220a:	4699      	mov	r9, r3
 800220c:	4b41      	ldr	r3, [pc, #260]	@ (8002314 <main+0x39c>)
 800220e:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 8002212:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8002214:	f7fe f998 	bl	8000548 <__aeabi_f2d>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	ec43 2b10 	vmov	d0, r2, r3
 8002220:	f009 fdba 	bl	800bd98 <sin>
 8002224:	ec53 2b10 	vmov	r2, r3, d0
 8002228:	4620      	mov	r0, r4
 800222a:	4629      	mov	r1, r5
 800222c:	f7fe f9e4 	bl	80005f8 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4640      	mov	r0, r8
 8002236:	4649      	mov	r1, r9
 8002238:	f7fe f826 	bl	8000288 <__aeabi_dsub>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f7fe fcb0 	bl	8000ba8 <__aeabi_d2f>
 8002248:	4603      	mov	r3, r0
 800224a:	643b      	str	r3, [r7, #64]	@ 0x40

              float yaw_angle = atan2f(mag_y_comp, mag_x_comp) * RAD_TO_DEG;
 800224c:	edd7 0a11 	vldr	s1, [r7, #68]	@ 0x44
 8002250:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8002254:	f009 fdf4 	bl	800be40 <atan2f>
 8002258:	eef0 7a40 	vmov.f32	s15, s0
 800225c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002318 <main+0x3a0>
 8002260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002264:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

	            angX=DataStruct.KalmanAngleX; angY=DataStruct.KalmanAngleY; angZ=yaw_angle;
 8002268:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <main+0x39c>)
 800226a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800226e:	4610      	mov	r0, r2
 8002270:	4619      	mov	r1, r3
 8002272:	f7fe fc99 	bl	8000ba8 <__aeabi_d2f>
 8002276:	4603      	mov	r3, r0
 8002278:	4a28      	ldr	r2, [pc, #160]	@ (800231c <main+0x3a4>)
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b25      	ldr	r3, [pc, #148]	@ (8002314 <main+0x39c>)
 800227e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7fe fc8f 	bl	8000ba8 <__aeabi_d2f>
 800228a:	4603      	mov	r3, r0
 800228c:	4a24      	ldr	r2, [pc, #144]	@ (8002320 <main+0x3a8>)
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	4a24      	ldr	r2, [pc, #144]	@ (8002324 <main+0x3ac>)
 8002292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002294:	6013      	str	r3, [r2, #0]
	            accX=DataStruct.Ax; accY=DataStruct.Ay; accZ=DataStruct.Az;
 8002296:	4b1f      	ldr	r3, [pc, #124]	@ (8002314 <main+0x39c>)
 8002298:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f7fe fc82 	bl	8000ba8 <__aeabi_d2f>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4a20      	ldr	r2, [pc, #128]	@ (8002328 <main+0x3b0>)
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <main+0x39c>)
 80022ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	e03a      	b.n	800232c <main+0x3b4>
 80022b6:	bf00      	nop
 80022b8:	ccd9456c 	.word	0xccd9456c
 80022bc:	3fc85b95 	.word	0x3fc85b95
 80022c0:	00000000 	.word	0x00000000
 80022c4:	40e5a540 	.word	0x40e5a540
 80022c8:	a2529d39 	.word	0xa2529d39
 80022cc:	3f91df46 	.word	0x3f91df46
 80022d0:	200005f4 	.word	0x200005f4
 80022d4:	40020c00 	.word	0x40020c00
 80022d8:	200005f8 	.word	0x200005f8
 80022dc:	20000729 	.word	0x20000729
 80022e0:	2000041c 	.word	0x2000041c
 80022e4:	20000732 	.word	0x20000732
 80022e8:	2000038c 	.word	0x2000038c
 80022ec:	200005b8 	.word	0x200005b8
 80022f0:	2000028c 	.word	0x2000028c
 80022f4:	200004b0 	.word	0x200004b0
 80022f8:	200002e0 	.word	0x200002e0
 80022fc:	20000464 	.word	0x20000464
 8002300:	42c80000 	.word	0x42c80000
 8002304:	47c5e680 	.word	0x47c5e680
 8002308:	3ff00000 	.word	0x3ff00000
 800230c:	20000470 	.word	0x20000470
 8002310:	200004b4 	.word	0x200004b4
 8002314:	20000540 	.word	0x20000540
 8002318:	42652ee1 	.word	0x42652ee1
 800231c:	2000047c 	.word	0x2000047c
 8002320:	20000480 	.word	0x20000480
 8002324:	20000484 	.word	0x20000484
 8002328:	20000488 	.word	0x20000488
 800232c:	f7fe fc3c 	bl	8000ba8 <__aeabi_d2f>
 8002330:	4603      	mov	r3, r0
 8002332:	4a35      	ldr	r2, [pc, #212]	@ (8002408 <main+0x490>)
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b35      	ldr	r3, [pc, #212]	@ (800240c <main+0x494>)
 8002338:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	f7fe fc32 	bl	8000ba8 <__aeabi_d2f>
 8002344:	4603      	mov	r3, r0
 8002346:	4a32      	ldr	r2, [pc, #200]	@ (8002410 <main+0x498>)
 8002348:	6013      	str	r3, [r2, #0]
	            gyroX=DataStruct.Gx; gyroY=DataStruct.Gy; gyroZ=DataStruct.Gz;
 800234a:	4b30      	ldr	r3, [pc, #192]	@ (800240c <main+0x494>)
 800234c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	f7fe fc28 	bl	8000ba8 <__aeabi_d2f>
 8002358:	4603      	mov	r3, r0
 800235a:	4a2e      	ldr	r2, [pc, #184]	@ (8002414 <main+0x49c>)
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b2b      	ldr	r3, [pc, #172]	@ (800240c <main+0x494>)
 8002360:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f7fe fc1e 	bl	8000ba8 <__aeabi_d2f>
 800236c:	4603      	mov	r3, r0
 800236e:	4a2a      	ldr	r2, [pc, #168]	@ (8002418 <main+0x4a0>)
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b26      	ldr	r3, [pc, #152]	@ (800240c <main+0x494>)
 8002374:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f7fe fc14 	bl	8000ba8 <__aeabi_d2f>
 8002380:	4603      	mov	r3, r0
 8002382:	4a26      	ldr	r2, [pc, #152]	@ (800241c <main+0x4a4>)
 8002384:	6013      	str	r3, [r2, #0]
	            enlem=gps.latitude; boylam=gps.longitude; gps_irtifa=gps.altitude;
 8002386:	4b26      	ldr	r3, [pc, #152]	@ (8002420 <main+0x4a8>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	f7fe fc0a 	bl	8000ba8 <__aeabi_d2f>
 8002394:	4603      	mov	r3, r0
 8002396:	4a23      	ldr	r2, [pc, #140]	@ (8002424 <main+0x4ac>)
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b21      	ldr	r3, [pc, #132]	@ (8002420 <main+0x4a8>)
 800239c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	f7fe fc00 	bl	8000ba8 <__aeabi_d2f>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002428 <main+0x4b0>)
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002420 <main+0x4a8>)
 80023b0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	f7fe fbf6 	bl	8000ba8 <__aeabi_d2f>
 80023bc:	4603      	mov	r3, r0
 80023be:	4a1b      	ldr	r2, [pc, #108]	@ (800242c <main+0x4b4>)
 80023c0:	6013      	str	r3, [r2, #0]

	            irtifa=Calculate_Altitude(MS5611_Press);
 80023c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <main+0x4b8>)
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	eeb0 0a67 	vmov.f32	s0, s15
 80023cc:	f7ff fc7c 	bl	8001cc8 <Calculate_Altitude>
 80023d0:	eef0 7a40 	vmov.f32	s15, s0
 80023d4:	4b17      	ldr	r3, [pc, #92]	@ (8002434 <main+0x4bc>)
 80023d6:	edc3 7a00 	vstr	s15, [r3]
	            yunuslama=Calculate_Pitch(accX,accY,accZ);
 80023da:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <main+0x4c0>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <main+0x490>)
 80023e2:	ed93 7a00 	vldr	s14, [r3]
 80023e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002410 <main+0x498>)
 80023e8:	edd3 6a00 	vldr	s13, [r3]
 80023ec:	eeb0 1a66 	vmov.f32	s2, s13
 80023f0:	eef0 0a47 	vmov.f32	s1, s14
 80023f4:	eeb0 0a67 	vmov.f32	s0, s15
 80023f8:	f7ff fcb2 	bl	8001d60 <Calculate_Pitch>
 80023fc:	eef0 7a40 	vmov.f32	s15, s0
 8002400:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <main+0x4c4>)
 8002402:	edc3 7a00 	vstr	s15, [r3]
	        {
 8002406:	e1d7      	b.n	80027b8 <main+0x840>
 8002408:	2000048c 	.word	0x2000048c
 800240c:	20000540 	.word	0x20000540
 8002410:	20000490 	.word	0x20000490
 8002414:	20000494 	.word	0x20000494
 8002418:	20000498 	.word	0x20000498
 800241c:	2000049c 	.word	0x2000049c
 8002420:	200005f8 	.word	0x200005f8
 8002424:	200004a0 	.word	0x200004a0
 8002428:	200004a4 	.word	0x200004a4
 800242c:	200004a8 	.word	0x200004a8
 8002430:	20000464 	.word	0x20000464
 8002434:	20000474 	.word	0x20000474
 8002438:	20000488 	.word	0x20000488
 800243c:	200004ac 	.word	0x200004ac
	        }
	        else if (calisma_durumu == 2)
 8002440:	4ba6      	ldr	r3, [pc, #664]	@ (80026dc <main+0x764>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b02      	cmp	r3, #2
 8002446:	f040 81b7 	bne.w	80027b8 <main+0x840>
	                {


	        		  irtifa       = bigEndianToFloat(&sut_buffer[1]);
 800244a:	48a5      	ldr	r0, [pc, #660]	@ (80026e0 <main+0x768>)
 800244c:	f7ff fcfa 	bl	8001e44 <bigEndianToFloat>
 8002450:	eef0 7a40 	vmov.f32	s15, s0
 8002454:	4ba3      	ldr	r3, [pc, #652]	@ (80026e4 <main+0x76c>)
 8002456:	edc3 7a00 	vstr	s15, [r3]
	        	    MS5611_Press = bigEndianToFloat(&sut_buffer[5]);
 800245a:	48a3      	ldr	r0, [pc, #652]	@ (80026e8 <main+0x770>)
 800245c:	f7ff fcf2 	bl	8001e44 <bigEndianToFloat>
 8002460:	eef0 7a40 	vmov.f32	s15, s0
 8002464:	4ba1      	ldr	r3, [pc, #644]	@ (80026ec <main+0x774>)
 8002466:	edc3 7a00 	vstr	s15, [r3]
	        	    accX         = bigEndianToFloat(&sut_buffer[9]);
 800246a:	48a1      	ldr	r0, [pc, #644]	@ (80026f0 <main+0x778>)
 800246c:	f7ff fcea 	bl	8001e44 <bigEndianToFloat>
 8002470:	eef0 7a40 	vmov.f32	s15, s0
 8002474:	4b9f      	ldr	r3, [pc, #636]	@ (80026f4 <main+0x77c>)
 8002476:	edc3 7a00 	vstr	s15, [r3]
	        	    accY         = bigEndianToFloat(&sut_buffer[13]);
 800247a:	489f      	ldr	r0, [pc, #636]	@ (80026f8 <main+0x780>)
 800247c:	f7ff fce2 	bl	8001e44 <bigEndianToFloat>
 8002480:	eef0 7a40 	vmov.f32	s15, s0
 8002484:	4b9d      	ldr	r3, [pc, #628]	@ (80026fc <main+0x784>)
 8002486:	edc3 7a00 	vstr	s15, [r3]
	        	    accZ         = bigEndianToFloat(&sut_buffer[17]);
 800248a:	489d      	ldr	r0, [pc, #628]	@ (8002700 <main+0x788>)
 800248c:	f7ff fcda 	bl	8001e44 <bigEndianToFloat>
 8002490:	eef0 7a40 	vmov.f32	s15, s0
 8002494:	4b9b      	ldr	r3, [pc, #620]	@ (8002704 <main+0x78c>)
 8002496:	edc3 7a00 	vstr	s15, [r3]
	        	    gyroX        = bigEndianToFloat(&sut_buffer[21]);
 800249a:	489b      	ldr	r0, [pc, #620]	@ (8002708 <main+0x790>)
 800249c:	f7ff fcd2 	bl	8001e44 <bigEndianToFloat>
 80024a0:	eef0 7a40 	vmov.f32	s15, s0
 80024a4:	4b99      	ldr	r3, [pc, #612]	@ (800270c <main+0x794>)
 80024a6:	edc3 7a00 	vstr	s15, [r3]
	        	    gyroY        = bigEndianToFloat(&sut_buffer[25]);
 80024aa:	4899      	ldr	r0, [pc, #612]	@ (8002710 <main+0x798>)
 80024ac:	f7ff fcca 	bl	8001e44 <bigEndianToFloat>
 80024b0:	eef0 7a40 	vmov.f32	s15, s0
 80024b4:	4b97      	ldr	r3, [pc, #604]	@ (8002714 <main+0x79c>)
 80024b6:	edc3 7a00 	vstr	s15, [r3]
	        	    gyroZ        = bigEndianToFloat(&sut_buffer[29]);
 80024ba:	4897      	ldr	r0, [pc, #604]	@ (8002718 <main+0x7a0>)
 80024bc:	f7ff fcc2 	bl	8001e44 <bigEndianToFloat>
 80024c0:	eef0 7a40 	vmov.f32	s15, s0
 80024c4:	4b95      	ldr	r3, [pc, #596]	@ (800271c <main+0x7a4>)
 80024c6:	edc3 7a00 	vstr	s15, [r3]

                      if(ilk_irtifa == false){
 80024ca:	4b95      	ldr	r3, [pc, #596]	@ (8002720 <main+0x7a8>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	f083 0301 	eor.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <main+0x56e>
                        baslangic_irtifa =irtifa;
 80024d8:	4b82      	ldr	r3, [pc, #520]	@ (80026e4 <main+0x76c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a91      	ldr	r2, [pc, #580]	@ (8002724 <main+0x7ac>)
 80024de:	6013      	str	r3, [r2, #0]
                        ilk_irtifa = true;
 80024e0:	4b8f      	ldr	r3, [pc, #572]	@ (8002720 <main+0x7a8>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
                      }

	                    yunuslama=Calculate_Pitch(accX,accY,accZ);
 80024e6:	4b83      	ldr	r3, [pc, #524]	@ (80026f4 <main+0x77c>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	4b83      	ldr	r3, [pc, #524]	@ (80026fc <main+0x784>)
 80024ee:	ed93 7a00 	vldr	s14, [r3]
 80024f2:	4b84      	ldr	r3, [pc, #528]	@ (8002704 <main+0x78c>)
 80024f4:	edd3 6a00 	vldr	s13, [r3]
 80024f8:	eeb0 1a66 	vmov.f32	s2, s13
 80024fc:	eef0 0a47 	vmov.f32	s1, s14
 8002500:	eeb0 0a67 	vmov.f32	s0, s15
 8002504:	f7ff fc2c 	bl	8001d60 <Calculate_Pitch>
 8002508:	eef0 7a40 	vmov.f32	s15, s0
 800250c:	4b86      	ldr	r3, [pc, #536]	@ (8002728 <main+0x7b0>)
 800250e:	edc3 7a00 	vstr	s15, [r3]

	                    if ((irtifa-baslangic_irtifa)>5){b0=1;}
 8002512:	4b74      	ldr	r3, [pc, #464]	@ (80026e4 <main+0x76c>)
 8002514:	ed93 7a00 	vldr	s14, [r3]
 8002518:	4b82      	ldr	r3, [pc, #520]	@ (8002724 <main+0x7ac>)
 800251a:	edd3 7a00 	vldr	s15, [r3]
 800251e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002522:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800252a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252e:	dd02      	ble.n	8002536 <main+0x5be>
 8002530:	4b7e      	ldr	r3, [pc, #504]	@ (800272c <main+0x7b4>)
 8002532:	2201      	movs	r2, #1
 8002534:	701a      	strb	r2, [r3, #0]
	                    if ((b0==1)&&(accZ<0)){b1=1;}
 8002536:	4b7d      	ldr	r3, [pc, #500]	@ (800272c <main+0x7b4>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d10a      	bne.n	8002554 <main+0x5dc>
 800253e:	4b71      	ldr	r3, [pc, #452]	@ (8002704 <main+0x78c>)
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254c:	d502      	bpl.n	8002554 <main+0x5dc>
 800254e:	4b78      	ldr	r3, [pc, #480]	@ (8002730 <main+0x7b8>)
 8002550:	2201      	movs	r2, #1
 8002552:	701a      	strb	r2, [r3, #0]
	                    if (irtifa>2000){b2=1;}
 8002554:	4b63      	ldr	r3, [pc, #396]	@ (80026e4 <main+0x76c>)
 8002556:	edd3 7a00 	vldr	s15, [r3]
 800255a:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8002734 <main+0x7bc>
 800255e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002566:	dd02      	ble.n	800256e <main+0x5f6>
 8002568:	4b73      	ldr	r3, [pc, #460]	@ (8002738 <main+0x7c0>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
	                    if (gyroY>50||gyroY<-60){b3=1;}
 800256e:	4b69      	ldr	r3, [pc, #420]	@ (8002714 <main+0x79c>)
 8002570:	edd3 7a00 	vldr	s15, [r3]
 8002574:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 800273c <main+0x7c4>
 8002578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002580:	dc09      	bgt.n	8002596 <main+0x61e>
 8002582:	4b64      	ldr	r3, [pc, #400]	@ (8002714 <main+0x79c>)
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8002740 <main+0x7c8>
 800258c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002594:	d502      	bpl.n	800259c <main+0x624>
 8002596:	4b6b      	ldr	r3, [pc, #428]	@ (8002744 <main+0x7cc>)
 8002598:	2201      	movs	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
	                    if (((onceki_irtifa-irtifa)>0)&&(b3==1)){b4=1;}
 800259c:	4b6a      	ldr	r3, [pc, #424]	@ (8002748 <main+0x7d0>)
 800259e:	ed93 7a00 	vldr	s14, [r3]
 80025a2:	4b50      	ldr	r3, [pc, #320]	@ (80026e4 <main+0x76c>)
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b4:	dd06      	ble.n	80025c4 <main+0x64c>
 80025b6:	4b63      	ldr	r3, [pc, #396]	@ (8002744 <main+0x7cc>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d102      	bne.n	80025c4 <main+0x64c>
 80025be:	4b63      	ldr	r3, [pc, #396]	@ (800274c <main+0x7d4>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
	                    if ((b1==1)&&(b4==1)&&(b3 == 1)){b5=1;HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);}
 80025c4:	4b5a      	ldr	r3, [pc, #360]	@ (8002730 <main+0x7b8>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d10f      	bne.n	80025ec <main+0x674>
 80025cc:	4b5f      	ldr	r3, [pc, #380]	@ (800274c <main+0x7d4>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d10b      	bne.n	80025ec <main+0x674>
 80025d4:	4b5b      	ldr	r3, [pc, #364]	@ (8002744 <main+0x7cc>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d107      	bne.n	80025ec <main+0x674>
 80025dc:	4b5c      	ldr	r3, [pc, #368]	@ (8002750 <main+0x7d8>)
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	2201      	movs	r2, #1
 80025e4:	2140      	movs	r1, #64	@ 0x40
 80025e6:	485b      	ldr	r0, [pc, #364]	@ (8002754 <main+0x7dc>)
 80025e8:	f002 fc66 	bl	8004eb8 <HAL_GPIO_WritePin>
	                    if ((irtifa<600)&&(b5==1)){b6=1;}
 80025ec:	4b3d      	ldr	r3, [pc, #244]	@ (80026e4 <main+0x76c>)
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8002758 <main+0x7e0>
 80025f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fe:	d506      	bpl.n	800260e <main+0x696>
 8002600:	4b53      	ldr	r3, [pc, #332]	@ (8002750 <main+0x7d8>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d102      	bne.n	800260e <main+0x696>
 8002608:	4b54      	ldr	r3, [pc, #336]	@ (800275c <main+0x7e4>)
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
	                    if ((b6==1)&&(irtifa<600 )&& (irtifa>400)){b7=1; HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);}
 800260e:	4b53      	ldr	r3, [pc, #332]	@ (800275c <main+0x7e4>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d11b      	bne.n	800264e <main+0x6d6>
 8002616:	4b33      	ldr	r3, [pc, #204]	@ (80026e4 <main+0x76c>)
 8002618:	edd3 7a00 	vldr	s15, [r3]
 800261c:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002758 <main+0x7e0>
 8002620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002628:	d511      	bpl.n	800264e <main+0x6d6>
 800262a:	4b2e      	ldr	r3, [pc, #184]	@ (80026e4 <main+0x76c>)
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002760 <main+0x7e8>
 8002634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263c:	dd07      	ble.n	800264e <main+0x6d6>
 800263e:	4b49      	ldr	r3, [pc, #292]	@ (8002764 <main+0x7ec>)
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	2201      	movs	r2, #1
 8002646:	2180      	movs	r1, #128	@ 0x80
 8002648:	4842      	ldr	r0, [pc, #264]	@ (8002754 <main+0x7dc>)
 800264a:	f002 fc35 	bl	8004eb8 <HAL_GPIO_WritePin>
	                    sut_byte=(b7<<7)|(b6<<6)|(b5<<5)|(b4<<4)|(b3<<3)|(b2<<2)|(b1<<1)|(b0<<0);
 800264e:	4b45      	ldr	r3, [pc, #276]	@ (8002764 <main+0x7ec>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	b25b      	sxtb	r3, r3
 8002654:	01db      	lsls	r3, r3, #7
 8002656:	b25a      	sxtb	r2, r3
 8002658:	4b40      	ldr	r3, [pc, #256]	@ (800275c <main+0x7e4>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b25b      	sxtb	r3, r3
 800265e:	019b      	lsls	r3, r3, #6
 8002660:	b25b      	sxtb	r3, r3
 8002662:	4313      	orrs	r3, r2
 8002664:	b25a      	sxtb	r2, r3
 8002666:	4b3a      	ldr	r3, [pc, #232]	@ (8002750 <main+0x7d8>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	b25b      	sxtb	r3, r3
 800266c:	015b      	lsls	r3, r3, #5
 800266e:	b25b      	sxtb	r3, r3
 8002670:	4313      	orrs	r3, r2
 8002672:	b25a      	sxtb	r2, r3
 8002674:	4b35      	ldr	r3, [pc, #212]	@ (800274c <main+0x7d4>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	b25b      	sxtb	r3, r3
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	b25b      	sxtb	r3, r3
 800267e:	4313      	orrs	r3, r2
 8002680:	b25a      	sxtb	r2, r3
 8002682:	4b30      	ldr	r3, [pc, #192]	@ (8002744 <main+0x7cc>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b25b      	sxtb	r3, r3
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	b25b      	sxtb	r3, r3
 800268c:	4313      	orrs	r3, r2
 800268e:	b25a      	sxtb	r2, r3
 8002690:	4b29      	ldr	r3, [pc, #164]	@ (8002738 <main+0x7c0>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b25b      	sxtb	r3, r3
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	b25b      	sxtb	r3, r3
 800269a:	4313      	orrs	r3, r2
 800269c:	b25a      	sxtb	r2, r3
 800269e:	4b24      	ldr	r3, [pc, #144]	@ (8002730 <main+0x7b8>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	b25b      	sxtb	r3, r3
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	4313      	orrs	r3, r2
 80026aa:	b25a      	sxtb	r2, r3
 80026ac:	4b1f      	ldr	r3, [pc, #124]	@ (800272c <main+0x7b4>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	b25b      	sxtb	r3, r3
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b25b      	sxtb	r3, r3
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002768 <main+0x7f0>)
 80026ba:	701a      	strb	r2, [r3, #0]
	                    sut_durum_bilgi[0]=0xAA; sut_durum_bilgi[1]=sut_byte; sut_durum_bilgi[2]=0;
 80026bc:	4b2b      	ldr	r3, [pc, #172]	@ (800276c <main+0x7f4>)
 80026be:	22aa      	movs	r2, #170	@ 0xaa
 80026c0:	701a      	strb	r2, [r3, #0]
 80026c2:	4b29      	ldr	r3, [pc, #164]	@ (8002768 <main+0x7f0>)
 80026c4:	781a      	ldrb	r2, [r3, #0]
 80026c6:	4b29      	ldr	r3, [pc, #164]	@ (800276c <main+0x7f4>)
 80026c8:	705a      	strb	r2, [r3, #1]
 80026ca:	4b28      	ldr	r3, [pc, #160]	@ (800276c <main+0x7f4>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	709a      	strb	r2, [r3, #2]
	                    uint8_t chk=0; for(int i=1;i<3;i++) chk+=sut_durum_bilgi[i]; chk%=256;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80026d6:	2301      	movs	r3, #1
 80026d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80026da:	e055      	b.n	8002788 <main+0x810>
 80026dc:	200004b4 	.word	0x200004b4
 80026e0:	20000735 	.word	0x20000735
 80026e4:	20000474 	.word	0x20000474
 80026e8:	20000739 	.word	0x20000739
 80026ec:	20000464 	.word	0x20000464
 80026f0:	2000073d 	.word	0x2000073d
 80026f4:	20000488 	.word	0x20000488
 80026f8:	20000741 	.word	0x20000741
 80026fc:	2000048c 	.word	0x2000048c
 8002700:	20000745 	.word	0x20000745
 8002704:	20000490 	.word	0x20000490
 8002708:	20000749 	.word	0x20000749
 800270c:	20000494 	.word	0x20000494
 8002710:	2000074d 	.word	0x2000074d
 8002714:	20000498 	.word	0x20000498
 8002718:	20000751 	.word	0x20000751
 800271c:	2000049c 	.word	0x2000049c
 8002720:	200004bc 	.word	0x200004bc
 8002724:	20000470 	.word	0x20000470
 8002728:	200004ac 	.word	0x200004ac
 800272c:	20000787 	.word	0x20000787
 8002730:	20000786 	.word	0x20000786
 8002734:	44fa0000 	.word	0x44fa0000
 8002738:	20000785 	.word	0x20000785
 800273c:	42480000 	.word	0x42480000
 8002740:	c2700000 	.word	0xc2700000
 8002744:	20000784 	.word	0x20000784
 8002748:	20000478 	.word	0x20000478
 800274c:	20000783 	.word	0x20000783
 8002750:	20000782 	.word	0x20000782
 8002754:	40020c00 	.word	0x40020c00
 8002758:	44160000 	.word	0x44160000
 800275c:	20000781 	.word	0x20000781
 8002760:	43c80000 	.word	0x43c80000
 8002764:	20000780 	.word	0x20000780
 8002768:	20000788 	.word	0x20000788
 800276c:	2000078c 	.word	0x2000078c
 8002770:	4a29      	ldr	r2, [pc, #164]	@ (8002818 <main+0x8a0>)
 8002772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002774:	4413      	add	r3, r2
 8002776:	781a      	ldrb	r2, [r3, #0]
 8002778:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800277c:	4413      	add	r3, r2
 800277e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8002782:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002784:	3301      	adds	r3, #1
 8002786:	653b      	str	r3, [r7, #80]	@ 0x50
 8002788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800278a:	2b02      	cmp	r3, #2
 800278c:	ddf0      	ble.n	8002770 <main+0x7f8>
	                    sut_durum_bilgi[3]=chk; sut_durum_bilgi[4]=0x0D; sut_durum_bilgi[5]=0x0A;
 800278e:	4a22      	ldr	r2, [pc, #136]	@ (8002818 <main+0x8a0>)
 8002790:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002794:	70d3      	strb	r3, [r2, #3]
 8002796:	4b20      	ldr	r3, [pc, #128]	@ (8002818 <main+0x8a0>)
 8002798:	220d      	movs	r2, #13
 800279a:	711a      	strb	r2, [r3, #4]
 800279c:	4b1e      	ldr	r3, [pc, #120]	@ (8002818 <main+0x8a0>)
 800279e:	220a      	movs	r2, #10
 80027a0:	715a      	strb	r2, [r3, #5]
                      HAL_UART_Transmit(&huart4, &sut_durum_bilgi, sizeof(sut_durum_bilgi), HAL_MAX_DELAY);
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	2206      	movs	r2, #6
 80027a8:	491b      	ldr	r1, [pc, #108]	@ (8002818 <main+0x8a0>)
 80027aa:	481c      	ldr	r0, [pc, #112]	@ (800281c <main+0x8a4>)
 80027ac:	f005 f9d6 	bl	8007b5c <HAL_UART_Transmit>

                      onceki_irtifa = irtifa;
 80027b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002820 <main+0x8a8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002824 <main+0x8ac>)
 80027b6:	6013      	str	r3, [r2, #0]

	                }

	if (calisma_durumu == 1) {
 80027b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002828 <main+0x8b0>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d143      	bne.n	8002848 <main+0x8d0>
	    transmit_SIT_packet(irtifa, MS5611_Press, accX, accY, accZ, angX, angY, angZ);
 80027c0:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <main+0x8a8>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	4b19      	ldr	r3, [pc, #100]	@ (800282c <main+0x8b4>)
 80027c8:	ed93 7a00 	vldr	s14, [r3]
 80027cc:	4b18      	ldr	r3, [pc, #96]	@ (8002830 <main+0x8b8>)
 80027ce:	edd3 6a00 	vldr	s13, [r3]
 80027d2:	4b18      	ldr	r3, [pc, #96]	@ (8002834 <main+0x8bc>)
 80027d4:	ed93 6a00 	vldr	s12, [r3]
 80027d8:	4b17      	ldr	r3, [pc, #92]	@ (8002838 <main+0x8c0>)
 80027da:	edd3 5a00 	vldr	s11, [r3]
 80027de:	4b17      	ldr	r3, [pc, #92]	@ (800283c <main+0x8c4>)
 80027e0:	ed93 5a00 	vldr	s10, [r3]
 80027e4:	4b16      	ldr	r3, [pc, #88]	@ (8002840 <main+0x8c8>)
 80027e6:	edd3 4a00 	vldr	s9, [r3]
 80027ea:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <main+0x8cc>)
 80027ec:	ed93 4a00 	vldr	s8, [r3]
 80027f0:	eef0 3a44 	vmov.f32	s7, s8
 80027f4:	eeb0 3a64 	vmov.f32	s6, s9
 80027f8:	eef0 2a45 	vmov.f32	s5, s10
 80027fc:	eeb0 2a65 	vmov.f32	s4, s11
 8002800:	eef0 1a46 	vmov.f32	s3, s12
 8002804:	eeb0 1a66 	vmov.f32	s2, s13
 8002808:	eef0 0a47 	vmov.f32	s1, s14
 800280c:	eeb0 0a67 	vmov.f32	s0, s15
 8002810:	f7ff fb32 	bl	8001e78 <transmit_SIT_packet>
 8002814:	e42c      	b.n	8002070 <main+0xf8>
 8002816:	bf00      	nop
 8002818:	2000078c 	.word	0x2000078c
 800281c:	2000038c 	.word	0x2000038c
 8002820:	20000474 	.word	0x20000474
 8002824:	20000478 	.word	0x20000478
 8002828:	200004b4 	.word	0x200004b4
 800282c:	20000464 	.word	0x20000464
 8002830:	20000488 	.word	0x20000488
 8002834:	2000048c 	.word	0x2000048c
 8002838:	20000490 	.word	0x20000490
 800283c:	2000047c 	.word	0x2000047c
 8002840:	20000480 	.word	0x20000480
 8002844:	20000484 	.word	0x20000484
	}

	  else if (calisma_durumu == 0) {
 8002848:	4b8c      	ldr	r3, [pc, #560]	@ (8002a7c <main+0xb04>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f47f ac0f 	bne.w	8002070 <main+0xf8>
		  if ((irtifa - baslangic_irtifa > 10) && rocket_state == 0) {
 8002852:	4b8b      	ldr	r3, [pc, #556]	@ (8002a80 <main+0xb08>)
 8002854:	ed93 7a00 	vldr	s14, [r3]
 8002858:	4b8a      	ldr	r3, [pc, #552]	@ (8002a84 <main+0xb0c>)
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002862:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	dd06      	ble.n	800287e <main+0x906>
 8002870:	4b85      	ldr	r3, [pc, #532]	@ (8002a88 <main+0xb10>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d102      	bne.n	800287e <main+0x906>
			  rocket_state = 1;
 8002878:	4b83      	ldr	r3, [pc, #524]	@ (8002a88 <main+0xb10>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]
		  }


		  if ((rocket_state == 1) && ((onceki_irtifa - irtifa) > 1) && (yunuslama > 60.0 || yunuslama < -60.0)) {
 800287e:	4b82      	ldr	r3, [pc, #520]	@ (8002a88 <main+0xb10>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d12a      	bne.n	80028dc <main+0x964>
 8002886:	4b81      	ldr	r3, [pc, #516]	@ (8002a8c <main+0xb14>)
 8002888:	ed93 7a00 	vldr	s14, [r3]
 800288c:	4b7c      	ldr	r3, [pc, #496]	@ (8002a80 <main+0xb08>)
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002896:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800289a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a2:	dd1b      	ble.n	80028dc <main+0x964>
 80028a4:	4b7a      	ldr	r3, [pc, #488]	@ (8002a90 <main+0xb18>)
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002a94 <main+0xb1c>
 80028ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028b6:	dc09      	bgt.n	80028cc <main+0x954>
 80028b8:	4b75      	ldr	r3, [pc, #468]	@ (8002a90 <main+0xb18>)
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8002a98 <main+0xb20>
 80028c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ca:	d507      	bpl.n	80028dc <main+0x964>
			  rocket_state = 2;
 80028cc:	4b6e      	ldr	r3, [pc, #440]	@ (8002a88 <main+0xb10>)
 80028ce:	2202      	movs	r2, #2
 80028d0:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 80028d2:	2201      	movs	r2, #1
 80028d4:	2140      	movs	r1, #64	@ 0x40
 80028d6:	4871      	ldr	r0, [pc, #452]	@ (8002a9c <main+0xb24>)
 80028d8:	f002 faee 	bl	8004eb8 <HAL_GPIO_WritePin>

		  }


		  if ((rocket_state == 2) && (irtifa < 600 || irtifa > 400)) {
 80028dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002a88 <main+0xb10>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d11b      	bne.n	800291c <main+0x9a4>
 80028e4:	4b66      	ldr	r3, [pc, #408]	@ (8002a80 <main+0xb08>)
 80028e6:	edd3 7a00 	vldr	s15, [r3]
 80028ea:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8002aa0 <main+0xb28>
 80028ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f6:	d409      	bmi.n	800290c <main+0x994>
 80028f8:	4b61      	ldr	r3, [pc, #388]	@ (8002a80 <main+0xb08>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002aa4 <main+0xb2c>
 8002902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	dd07      	ble.n	800291c <main+0x9a4>
			  rocket_state = 3;
 800290c:	4b5e      	ldr	r3, [pc, #376]	@ (8002a88 <main+0xb10>)
 800290e:	2203      	movs	r2, #3
 8002910:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, SET);
 8002912:	2201      	movs	r2, #1
 8002914:	2180      	movs	r1, #128	@ 0x80
 8002916:	4861      	ldr	r0, [pc, #388]	@ (8002a9c <main+0xb24>)
 8002918:	f002 face 	bl	8004eb8 <HAL_GPIO_WritePin>

		  }


		  if ((rocket_state == 3) && (irtifa == onceki_irtifa)) {
 800291c:	4b5a      	ldr	r3, [pc, #360]	@ (8002a88 <main+0xb10>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d10d      	bne.n	8002940 <main+0x9c8>
 8002924:	4b56      	ldr	r3, [pc, #344]	@ (8002a80 <main+0xb08>)
 8002926:	ed93 7a00 	vldr	s14, [r3]
 800292a:	4b58      	ldr	r3, [pc, #352]	@ (8002a8c <main+0xb14>)
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	eeb4 7a67 	vcmp.f32	s14, s15
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	d102      	bne.n	8002940 <main+0x9c8>
			  rocket_state = 4;
 800293a:	4b53      	ldr	r3, [pc, #332]	@ (8002a88 <main+0xb10>)
 800293c:	2204      	movs	r2, #4
 800293e:	601a      	str	r2, [r3, #0]

		  }


		  snprintf(gonderilecek_veri, sizeof(gonderilecek_veri), "$AA,%.0f,%.3f,%.3f,%.0f,%.2f,%.1f,%.1f,%.2f,%.2f,%.1f,%.2f,%d"
 8002940:	4b4f      	ldr	r3, [pc, #316]	@ (8002a80 <main+0xb08>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fdff 	bl	8000548 <__aeabi_f2d>
 800294a:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 800294e:	4b56      	ldr	r3, [pc, #344]	@ (8002aa8 <main+0xb30>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd fdf8 	bl	8000548 <__aeabi_f2d>
 8002958:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
 800295c:	4b53      	ldr	r3, [pc, #332]	@ (8002aac <main+0xb34>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fd fdf1 	bl	8000548 <__aeabi_f2d>
 8002966:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800296a:	4b51      	ldr	r3, [pc, #324]	@ (8002ab0 <main+0xb38>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fdea 	bl	8000548 <__aeabi_f2d>
 8002974:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002978:	4b4e      	ldr	r3, [pc, #312]	@ (8002ab4 <main+0xb3c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fde3 	bl	8000548 <__aeabi_f2d>
 8002982:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002986:	4b4c      	ldr	r3, [pc, #304]	@ (8002ab8 <main+0xb40>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd fddc 	bl	8000548 <__aeabi_f2d>
 8002990:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002994:	4b49      	ldr	r3, [pc, #292]	@ (8002abc <main+0xb44>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fdd5 	bl	8000548 <__aeabi_f2d>
 800299e:	e9c7 0100 	strd	r0, r1, [r7]
 80029a2:	4b47      	ldr	r3, [pc, #284]	@ (8002ac0 <main+0xb48>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fdce 	bl	8000548 <__aeabi_f2d>
 80029ac:	4682      	mov	sl, r0
 80029ae:	468b      	mov	fp, r1
 80029b0:	4b44      	ldr	r3, [pc, #272]	@ (8002ac4 <main+0xb4c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fdc7 	bl	8000548 <__aeabi_f2d>
 80029ba:	4680      	mov	r8, r0
 80029bc:	4689      	mov	r9, r1
 80029be:	4b42      	ldr	r3, [pc, #264]	@ (8002ac8 <main+0xb50>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fd fdc0 	bl	8000548 <__aeabi_f2d>
 80029c8:	4604      	mov	r4, r0
 80029ca:	460d      	mov	r5, r1
 80029cc:	4b30      	ldr	r3, [pc, #192]	@ (8002a90 <main+0xb18>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fdb9 	bl	8000548 <__aeabi_f2d>
 80029d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a88 <main+0xb10>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	9316      	str	r3, [sp, #88]	@ 0x58
 80029dc:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80029e0:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
 80029e4:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 80029e8:	e9cd ab0e 	strd	sl, fp, [sp, #56]	@ 0x38
 80029ec:	ed97 7b00 	vldr	d7, [r7]
 80029f0:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80029f4:	ed97 7b02 	vldr	d7, [r7, #8]
 80029f8:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80029fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a00:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002a04:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a08:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002a0c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a10:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002a14:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8002a18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002a1c:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8002a20:	ed8d 7b00 	vstr	d7, [sp]
 8002a24:	4a29      	ldr	r2, [pc, #164]	@ (8002acc <main+0xb54>)
 8002a26:	2180      	movs	r1, #128	@ 0x80
 8002a28:	4829      	ldr	r0, [pc, #164]	@ (8002ad0 <main+0xb58>)
 8002a2a:	f006 fdcb 	bl	80095c4 <sniprintf>
		  , irtifa, enlem, boylam, gps_irtifa, gyroX, gyroY, gyroZ, accX, accY, accZ
		  , yunuslama, rocket_state);

		  HAL_UART_Transmit(&huart2, &adres_h, sizeof(adres_h), HAL_MAX_DELAY);
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a32:	2201      	movs	r2, #1
 8002a34:	4927      	ldr	r1, [pc, #156]	@ (8002ad4 <main+0xb5c>)
 8002a36:	4828      	ldr	r0, [pc, #160]	@ (8002ad8 <main+0xb60>)
 8002a38:	f005 f890 	bl	8007b5c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, &adres_l, sizeof(adres_l), HAL_MAX_DELAY);
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a40:	2201      	movs	r2, #1
 8002a42:	4926      	ldr	r1, [pc, #152]	@ (8002adc <main+0xb64>)
 8002a44:	4824      	ldr	r0, [pc, #144]	@ (8002ad8 <main+0xb60>)
 8002a46:	f005 f889 	bl	8007b5c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, &kanal, sizeof(kanal), HAL_MAX_DELAY);
 8002a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4923      	ldr	r1, [pc, #140]	@ (8002ae0 <main+0xb68>)
 8002a52:	4821      	ldr	r0, [pc, #132]	@ (8002ad8 <main+0xb60>)
 8002a54:	f005 f882 	bl	8007b5c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, (uint8_t*)gonderilecek_veri, strlen(gonderilecek_veri), HAL_MAX_DELAY);
 8002a58:	481d      	ldr	r0, [pc, #116]	@ (8002ad0 <main+0xb58>)
 8002a5a:	f7fd fc09 	bl	8000270 <strlen>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295
 8002a66:	491a      	ldr	r1, [pc, #104]	@ (8002ad0 <main+0xb58>)
 8002a68:	481b      	ldr	r0, [pc, #108]	@ (8002ad8 <main+0xb60>)
 8002a6a:	f005 f877 	bl	8007b5c <HAL_UART_Transmit>

		  onceki_irtifa = irtifa;
 8002a6e:	4b04      	ldr	r3, [pc, #16]	@ (8002a80 <main+0xb08>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a06      	ldr	r2, [pc, #24]	@ (8002a8c <main+0xb14>)
 8002a74:	6013      	str	r3, [r2, #0]
	if (HAL_GetTick() - lastTick >= 100)
 8002a76:	f7ff bafb 	b.w	8002070 <main+0xf8>
 8002a7a:	bf00      	nop
 8002a7c:	200004b4 	.word	0x200004b4
 8002a80:	20000474 	.word	0x20000474
 8002a84:	20000470 	.word	0x20000470
 8002a88:	200004b0 	.word	0x200004b0
 8002a8c:	20000478 	.word	0x20000478
 8002a90:	200004ac 	.word	0x200004ac
 8002a94:	42700000 	.word	0x42700000
 8002a98:	c2700000 	.word	0xc2700000
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	44160000 	.word	0x44160000
 8002aa4:	43c80000 	.word	0x43c80000
 8002aa8:	200004a0 	.word	0x200004a0
 8002aac:	200004a4 	.word	0x200004a4
 8002ab0:	200004a8 	.word	0x200004a8
 8002ab4:	20000494 	.word	0x20000494
 8002ab8:	20000498 	.word	0x20000498
 8002abc:	2000049c 	.word	0x2000049c
 8002ac0:	20000488 	.word	0x20000488
 8002ac4:	2000048c 	.word	0x2000048c
 8002ac8:	20000490 	.word	0x20000490
 8002acc:	0800dfd0 	.word	0x0800dfd0
 8002ad0:	200004c0 	.word	0x200004c0
 8002ad4:	20000792 	.word	0x20000792
 8002ad8:	200003d4 	.word	0x200003d4
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	20000001 	.word	0x20000001

08002ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b094      	sub	sp, #80	@ 0x50
 8002ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aea:	f107 0320 	add.w	r3, r7, #32
 8002aee:	2230      	movs	r2, #48	@ 0x30
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f006 fddf 	bl	80096b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002af8:	f107 030c 	add.w	r3, r7, #12
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	4b29      	ldr	r3, [pc, #164]	@ (8002bb4 <SystemClock_Config+0xd0>)
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b10:	4a28      	ldr	r2, [pc, #160]	@ (8002bb4 <SystemClock_Config+0xd0>)
 8002b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b18:	4b26      	ldr	r3, [pc, #152]	@ (8002bb4 <SystemClock_Config+0xd0>)
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b20:	60bb      	str	r3, [r7, #8]
 8002b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b24:	2300      	movs	r3, #0
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	4b23      	ldr	r3, [pc, #140]	@ (8002bb8 <SystemClock_Config+0xd4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a22      	ldr	r2, [pc, #136]	@ (8002bb8 <SystemClock_Config+0xd4>)
 8002b2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	4b20      	ldr	r3, [pc, #128]	@ (8002bb8 <SystemClock_Config+0xd4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b40:	2301      	movs	r3, #1
 8002b42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b54:	2308      	movs	r3, #8
 8002b56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002b58:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002b5c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b62:	2304      	movs	r3, #4
 8002b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b66:	f107 0320 	add.w	r3, r7, #32
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 ff90 	bl	8006a90 <HAL_RCC_OscConfig>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002b76:	f000 f9eb 	bl	8002f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b7a:	230f      	movs	r3, #15
 8002b7c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b86:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b92:	f107 030c 	add.w	r3, r7, #12
 8002b96:	2105      	movs	r1, #5
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f004 f9f1 	bl	8006f80 <HAL_RCC_ClockConfig>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ba4:	f000 f9d4 	bl	8002f50 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002ba8:	f004 fad0 	bl	800714c <HAL_RCC_EnableCSS>
}
 8002bac:	bf00      	nop
 8002bae:	3750      	adds	r7, #80	@ 0x50
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	40007000 	.word	0x40007000

08002bbc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bc0:	4b12      	ldr	r3, [pc, #72]	@ (8002c0c <MX_I2C1_Init+0x50>)
 8002bc2:	4a13      	ldr	r2, [pc, #76]	@ (8002c10 <MX_I2C1_Init+0x54>)
 8002bc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002bc6:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <MX_I2C1_Init+0x50>)
 8002bc8:	4a12      	ldr	r2, [pc, #72]	@ (8002c14 <MX_I2C1_Init+0x58>)
 8002bca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <MX_I2C1_Init+0x50>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c0c <MX_I2C1_Init+0x50>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c0c <MX_I2C1_Init+0x50>)
 8002bda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002bde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002be0:	4b0a      	ldr	r3, [pc, #40]	@ (8002c0c <MX_I2C1_Init+0x50>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002be6:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <MX_I2C1_Init+0x50>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bec:	4b07      	ldr	r3, [pc, #28]	@ (8002c0c <MX_I2C1_Init+0x50>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bf2:	4b06      	ldr	r3, [pc, #24]	@ (8002c0c <MX_I2C1_Init+0x50>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bf8:	4804      	ldr	r0, [pc, #16]	@ (8002c0c <MX_I2C1_Init+0x50>)
 8002bfa:	f002 f977 	bl	8004eec <HAL_I2C_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002c04:	f000 f9a4 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	2000028c 	.word	0x2000028c
 8002c10:	40005400 	.word	0x40005400
 8002c14:	000186a0 	.word	0x000186a0

08002c18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002c1c:	4b12      	ldr	r3, [pc, #72]	@ (8002c68 <MX_I2C2_Init+0x50>)
 8002c1e:	4a13      	ldr	r2, [pc, #76]	@ (8002c6c <MX_I2C2_Init+0x54>)
 8002c20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002c22:	4b11      	ldr	r3, [pc, #68]	@ (8002c68 <MX_I2C2_Init+0x50>)
 8002c24:	4a12      	ldr	r2, [pc, #72]	@ (8002c70 <MX_I2C2_Init+0x58>)
 8002c26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c28:	4b0f      	ldr	r3, [pc, #60]	@ (8002c68 <MX_I2C2_Init+0x50>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c68 <MX_I2C2_Init+0x50>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	@ (8002c68 <MX_I2C2_Init+0x50>)
 8002c36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <MX_I2C2_Init+0x50>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002c42:	4b09      	ldr	r3, [pc, #36]	@ (8002c68 <MX_I2C2_Init+0x50>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c48:	4b07      	ldr	r3, [pc, #28]	@ (8002c68 <MX_I2C2_Init+0x50>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c4e:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <MX_I2C2_Init+0x50>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c54:	4804      	ldr	r0, [pc, #16]	@ (8002c68 <MX_I2C2_Init+0x50>)
 8002c56:	f002 f949 	bl	8004eec <HAL_I2C_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002c60:	f000 f976 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	200002e0 	.word	0x200002e0
 8002c6c:	40005800 	.word	0x40005800
 8002c70:	000186a0 	.word	0x000186a0

08002c74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c78:	4b17      	ldr	r3, [pc, #92]	@ (8002cd8 <MX_SPI1_Init+0x64>)
 8002c7a:	4a18      	ldr	r2, [pc, #96]	@ (8002cdc <MX_SPI1_Init+0x68>)
 8002c7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c7e:	4b16      	ldr	r3, [pc, #88]	@ (8002cd8 <MX_SPI1_Init+0x64>)
 8002c80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c86:	4b14      	ldr	r3, [pc, #80]	@ (8002cd8 <MX_SPI1_Init+0x64>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c8c:	4b12      	ldr	r3, [pc, #72]	@ (8002cd8 <MX_SPI1_Init+0x64>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c92:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <MX_SPI1_Init+0x64>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c98:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd8 <MX_SPI1_Init+0x64>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd8 <MX_SPI1_Init+0x64>)
 8002ca0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ca4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd8 <MX_SPI1_Init+0x64>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <MX_SPI1_Init+0x64>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cb2:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <MX_SPI1_Init+0x64>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb8:	4b07      	ldr	r3, [pc, #28]	@ (8002cd8 <MX_SPI1_Init+0x64>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <MX_SPI1_Init+0x64>)
 8002cc0:	220a      	movs	r2, #10
 8002cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cc4:	4804      	ldr	r0, [pc, #16]	@ (8002cd8 <MX_SPI1_Init+0x64>)
 8002cc6:	f004 fbd4 	bl	8007472 <HAL_SPI_Init>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002cd0:	f000 f93e 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	20000334 	.word	0x20000334
 8002cdc:	40013000 	.word	0x40013000

08002ce0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <MX_UART4_Init+0x4c>)
 8002ce6:	4a12      	ldr	r2, [pc, #72]	@ (8002d30 <MX_UART4_Init+0x50>)
 8002ce8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <MX_UART4_Init+0x4c>)
 8002cec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cf0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d2c <MX_UART4_Init+0x4c>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d2c <MX_UART4_Init+0x4c>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <MX_UART4_Init+0x4c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d04:	4b09      	ldr	r3, [pc, #36]	@ (8002d2c <MX_UART4_Init+0x4c>)
 8002d06:	220c      	movs	r2, #12
 8002d08:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d0a:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <MX_UART4_Init+0x4c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d10:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <MX_UART4_Init+0x4c>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d16:	4805      	ldr	r0, [pc, #20]	@ (8002d2c <MX_UART4_Init+0x4c>)
 8002d18:	f004 fed0 	bl	8007abc <HAL_UART_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002d22:	f000 f915 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	2000038c 	.word	0x2000038c
 8002d30:	40004c00 	.word	0x40004c00

08002d34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d38:	4b11      	ldr	r3, [pc, #68]	@ (8002d80 <MX_USART2_UART_Init+0x4c>)
 8002d3a:	4a12      	ldr	r2, [pc, #72]	@ (8002d84 <MX_USART2_UART_Init+0x50>)
 8002d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002d3e:	4b10      	ldr	r3, [pc, #64]	@ (8002d80 <MX_USART2_UART_Init+0x4c>)
 8002d40:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	@ (8002d80 <MX_USART2_UART_Init+0x4c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <MX_USART2_UART_Init+0x4c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <MX_USART2_UART_Init+0x4c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d58:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <MX_USART2_UART_Init+0x4c>)
 8002d5a:	220c      	movs	r2, #12
 8002d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5e:	4b08      	ldr	r3, [pc, #32]	@ (8002d80 <MX_USART2_UART_Init+0x4c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <MX_USART2_UART_Init+0x4c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d6a:	4805      	ldr	r0, [pc, #20]	@ (8002d80 <MX_USART2_UART_Init+0x4c>)
 8002d6c:	f004 fea6 	bl	8007abc <HAL_UART_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d76:	f000 f8eb 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200003d4 	.word	0x200003d4
 8002d84:	40004400 	.word	0x40004400

08002d88 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d8c:	4b11      	ldr	r3, [pc, #68]	@ (8002dd4 <MX_USART6_UART_Init+0x4c>)
 8002d8e:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <MX_USART6_UART_Init+0x50>)
 8002d90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002d92:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <MX_USART6_UART_Init+0x4c>)
 8002d94:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002d98:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd4 <MX_USART6_UART_Init+0x4c>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002da0:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd4 <MX_USART6_UART_Init+0x4c>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002da6:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <MX_USART6_UART_Init+0x4c>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002dac:	4b09      	ldr	r3, [pc, #36]	@ (8002dd4 <MX_USART6_UART_Init+0x4c>)
 8002dae:	220c      	movs	r2, #12
 8002db0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002db2:	4b08      	ldr	r3, [pc, #32]	@ (8002dd4 <MX_USART6_UART_Init+0x4c>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002db8:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <MX_USART6_UART_Init+0x4c>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002dbe:	4805      	ldr	r0, [pc, #20]	@ (8002dd4 <MX_USART6_UART_Init+0x4c>)
 8002dc0:	f004 fe7c 	bl	8007abc <HAL_UART_Init>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002dca:	f000 f8c1 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	2000041c 	.word	0x2000041c
 8002dd8:	40011400 	.word	0x40011400

08002ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08c      	sub	sp, #48	@ 0x30
 8002de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de2:	f107 031c 	add.w	r3, r7, #28
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	60da      	str	r2, [r3, #12]
 8002df0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	4b49      	ldr	r3, [pc, #292]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	4a48      	ldr	r2, [pc, #288]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002dfc:	f043 0310 	orr.w	r3, r3, #16
 8002e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e02:	4b46      	ldr	r3, [pc, #280]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	f003 0310 	and.w	r3, r3, #16
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	4b42      	ldr	r3, [pc, #264]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	4a41      	ldr	r2, [pc, #260]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	4a3a      	ldr	r2, [pc, #232]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e3a:	4b38      	ldr	r3, [pc, #224]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b34      	ldr	r3, [pc, #208]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	4a33      	ldr	r2, [pc, #204]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e56:	4b31      	ldr	r3, [pc, #196]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b2d      	ldr	r3, [pc, #180]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e72:	4b2a      	ldr	r3, [pc, #168]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	4b26      	ldr	r3, [pc, #152]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	4a25      	ldr	r2, [pc, #148]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e88:	f043 0308 	orr.w	r3, r3, #8
 8002e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e8e:	4b23      	ldr	r3, [pc, #140]	@ (8002f1c <MX_GPIO_Init+0x140>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2120      	movs	r1, #32
 8002e9e:	4820      	ldr	r0, [pc, #128]	@ (8002f20 <MX_GPIO_Init+0x144>)
 8002ea0:	f002 f80a 	bl	8004eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_Aux_GPIO_Port, LoRa_Aux_Pin, GPIO_PIN_RESET);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002eaa:	481e      	ldr	r0, [pc, #120]	@ (8002f24 <MX_GPIO_Init+0x148>)
 8002eac:	f002 f804 	bl	8004eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LoRa_M0_Pin|LoRa_M1_Pin|PC817_D1_Pin|PC817_D2_Pin, GPIO_PIN_RESET);
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8002eb6:	481c      	ldr	r0, [pc, #112]	@ (8002f28 <MX_GPIO_Init+0x14c>)
 8002eb8:	f001 fffe 	bl	8004eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002ecc:	f107 031c 	add.w	r3, r7, #28
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4813      	ldr	r0, [pc, #76]	@ (8002f20 <MX_GPIO_Init+0x144>)
 8002ed4:	f001 fe54 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LoRa_Aux_Pin */
  GPIO_InitStruct.Pin = LoRa_Aux_Pin;
 8002ed8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LoRa_Aux_GPIO_Port, &GPIO_InitStruct);
 8002eea:	f107 031c 	add.w	r3, r7, #28
 8002eee:	4619      	mov	r1, r3
 8002ef0:	480c      	ldr	r0, [pc, #48]	@ (8002f24 <MX_GPIO_Init+0x148>)
 8002ef2:	f001 fe45 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_M0_Pin LoRa_M1_Pin PC817_D1_Pin PC817_D2_Pin */
  GPIO_InitStruct.Pin = LoRa_M0_Pin|LoRa_M1_Pin|PC817_D1_Pin|PC817_D2_Pin;
 8002ef6:	f44f 634c 	mov.w	r3, #3264	@ 0xcc0
 8002efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efc:	2301      	movs	r3, #1
 8002efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f04:	2300      	movs	r3, #0
 8002f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f08:	f107 031c 	add.w	r3, r7, #28
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4806      	ldr	r0, [pc, #24]	@ (8002f28 <MX_GPIO_Init+0x14c>)
 8002f10:	f001 fe36 	bl	8004b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002f14:	bf00      	nop
 8002f16:	3730      	adds	r7, #48	@ 0x30
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40020c00 	.word	0x40020c00

08002f2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a04      	ldr	r2, [pc, #16]	@ (8002f4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002f3e:	f001 fc67 	bl	8004810 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40010000 	.word	0x40010000

08002f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f54:	b672      	cpsid	i
}
 8002f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f58:	bf00      	nop
 8002f5a:	e7fd      	b.n	8002f58 <Error_Handler+0x8>

08002f5c <MPU9255_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU9255_Init(I2C_HandleTypeDef *I2Cx)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af04      	add	r7, sp, #16
 8002f62:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU9255_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8002f64:	2364      	movs	r3, #100	@ 0x64
 8002f66:	9302      	str	r3, [sp, #8]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	f107 030f 	add.w	r3, r7, #15
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2301      	movs	r3, #1
 8002f74:	2275      	movs	r2, #117	@ 0x75
 8002f76:	21d0      	movs	r1, #208	@ 0xd0
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f002 fd25 	bl	80059c8 <HAL_I2C_Mem_Read>

    checkStat = check;
 8002f7e:	7bfa      	ldrb	r2, [r7, #15]
 8002f80:	4b39      	ldr	r3, [pc, #228]	@ (8003068 <MPU9255_Init+0x10c>)
 8002f82:	701a      	strb	r2, [r3, #0]
    isWorking = 1;
 8002f84:	4b39      	ldr	r3, [pc, #228]	@ (800306c <MPU9255_Init+0x110>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

    Data = 0x03;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(I2Cx, MPU9255_ADDR, CONFIG, 1, &Data, 1, i2c_timeout);
 8002f8e:	2364      	movs	r3, #100	@ 0x64
 8002f90:	9302      	str	r3, [sp, #8]
 8002f92:	2301      	movs	r3, #1
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	f107 030e 	add.w	r3, r7, #14
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	221a      	movs	r2, #26
 8002fa0:	21d0      	movs	r1, #208	@ 0xd0
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f002 fc16 	bl	80057d4 <HAL_I2C_Mem_Write>

	// power management register 0X6B we should write all 0's to wake the sensor up
	Data = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9255_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8002fac:	2364      	movs	r3, #100	@ 0x64
 8002fae:	9302      	str	r3, [sp, #8]
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	f107 030e 	add.w	r3, r7, #14
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	2301      	movs	r3, #1
 8002fbc:	226b      	movs	r2, #107	@ 0x6b
 8002fbe:	21d0      	movs	r1, #208	@ 0xd0
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f002 fc07 	bl	80057d4 <HAL_I2C_Mem_Write>

	// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
	Data = 0x07;
 8002fc6:	2307      	movs	r3, #7
 8002fc8:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9255_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002fca:	2364      	movs	r3, #100	@ 0x64
 8002fcc:	9302      	str	r3, [sp, #8]
 8002fce:	2301      	movs	r3, #1
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	f107 030e 	add.w	r3, r7, #14
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2301      	movs	r3, #1
 8002fda:	2219      	movs	r2, #25
 8002fdc:	21d0      	movs	r1, #208	@ 0xd0
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f002 fbf8 	bl	80057d4 <HAL_I2C_Mem_Write>

	// Set accelerometer configuration in ACCEL_CONFIG Register
	// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
	Data = 0x00;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9255_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8002fe8:	2364      	movs	r3, #100	@ 0x64
 8002fea:	9302      	str	r3, [sp, #8]
 8002fec:	2301      	movs	r3, #1
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	f107 030e 	add.w	r3, r7, #14
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	221c      	movs	r2, #28
 8002ffa:	21d0      	movs	r1, #208	@ 0xd0
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f002 fbe9 	bl	80057d4 <HAL_I2C_Mem_Write>

	// Set Gyroscopic configuration in GYRO_CONFIG Register
	// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
	Data = 0x00;
 8003002:	2300      	movs	r3, #0
 8003004:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9255_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003006:	2364      	movs	r3, #100	@ 0x64
 8003008:	9302      	str	r3, [sp, #8]
 800300a:	2301      	movs	r3, #1
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	f107 030e 	add.w	r3, r7, #14
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2301      	movs	r3, #1
 8003016:	221b      	movs	r2, #27
 8003018:	21d0      	movs	r1, #208	@ 0xd0
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f002 fbda 	bl	80057d4 <HAL_I2C_Mem_Write>

	Data = 0x02;
 8003020:	2302      	movs	r3, #2
 8003022:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9255_ADDR, INT_PIN_CFG, 1, &Data, 1, i2c_timeout);
 8003024:	2364      	movs	r3, #100	@ 0x64
 8003026:	9302      	str	r3, [sp, #8]
 8003028:	2301      	movs	r3, #1
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	f107 030e 	add.w	r3, r7, #14
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2301      	movs	r3, #1
 8003034:	2237      	movs	r2, #55	@ 0x37
 8003036:	21d0      	movs	r1, #208	@ 0xd0
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f002 fbcb 	bl	80057d4 <HAL_I2C_Mem_Write>

	Data = 0x16;
 800303e:	2316      	movs	r3, #22
 8003040:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU9255_ADDR, CNTL, 1, &Data, 1, i2c_timeout);
 8003042:	2364      	movs	r3, #100	@ 0x64
 8003044:	9302      	str	r3, [sp, #8]
 8003046:	2301      	movs	r3, #1
 8003048:	9301      	str	r3, [sp, #4]
 800304a:	f107 030e 	add.w	r3, r7, #14
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	2301      	movs	r3, #1
 8003052:	220a      	movs	r2, #10
 8003054:	21d0      	movs	r1, #208	@ 0xd0
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f002 fbbc 	bl	80057d4 <HAL_I2C_Mem_Write>

	return 0;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000793 	.word	0x20000793
 800306c:	20000794 	.word	0x20000794

08003070 <MPU9255_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU9255_Read_All(I2C_HandleTypeDef *I2Cx, MPU9255_t *DataStruct)
{
 8003070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003074:	b094      	sub	sp, #80	@ 0x50
 8003076:	af04      	add	r7, sp, #16
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read(I2Cx, MPU9255_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800307c:	2364      	movs	r3, #100	@ 0x64
 800307e:	9302      	str	r3, [sp, #8]
 8003080:	230e      	movs	r3, #14
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	f107 0308 	add.w	r3, r7, #8
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	2301      	movs	r3, #1
 800308c:	223b      	movs	r2, #59	@ 0x3b
 800308e:	21d0      	movs	r1, #208	@ 0xd0
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f002 fc99 	bl	80059c8 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8003096:	7a3b      	ldrb	r3, [r7, #8]
 8003098:	b21b      	sxth	r3, r3
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	b21a      	sxth	r2, r3
 800309e:	7a7b      	ldrb	r3, [r7, #9]
 80030a0:	b21b      	sxth	r3, r3
 80030a2:	4313      	orrs	r3, r2
 80030a4:	b21a      	sxth	r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80030aa:	7abb      	ldrb	r3, [r7, #10]
 80030ac:	b21b      	sxth	r3, r3
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	b21a      	sxth	r2, r3
 80030b2:	7afb      	ldrb	r3, [r7, #11]
 80030b4:	b21b      	sxth	r3, r3
 80030b6:	4313      	orrs	r3, r2
 80030b8:	b21a      	sxth	r2, r3
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80030be:	7b3b      	ldrb	r3, [r7, #12]
 80030c0:	b21b      	sxth	r3, r3
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	b21a      	sxth	r2, r3
 80030c6:	7b7b      	ldrb	r3, [r7, #13]
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	4313      	orrs	r3, r2
 80030cc:	b21a      	sxth	r2, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 80030d2:	7bbb      	ldrb	r3, [r7, #14]
 80030d4:	b21b      	sxth	r3, r3
 80030d6:	021b      	lsls	r3, r3, #8
 80030d8:	b21a      	sxth	r2, r3
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	b21b      	sxth	r3, r3
 80030de:	4313      	orrs	r3, r2
 80030e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 80030e2:	7c3b      	ldrb	r3, [r7, #16]
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	b21a      	sxth	r2, r3
 80030ea:	7c7b      	ldrb	r3, [r7, #17]
 80030ec:	b21b      	sxth	r3, r3
 80030ee:	4313      	orrs	r3, r2
 80030f0:	b21a      	sxth	r2, r3
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 80030f6:	7cbb      	ldrb	r3, [r7, #18]
 80030f8:	b21b      	sxth	r3, r3
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	b21a      	sxth	r2, r3
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	b21b      	sxth	r3, r3
 8003102:	4313      	orrs	r3, r2
 8003104:	b21a      	sxth	r2, r3
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 800310a:	7d3b      	ldrb	r3, [r7, #20]
 800310c:	b21b      	sxth	r3, r3
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	b21a      	sxth	r2, r3
 8003112:	7d7b      	ldrb	r3, [r7, #21]
 8003114:	b21b      	sxth	r3, r3
 8003116:	4313      	orrs	r3, r2
 8003118:	b21a      	sxth	r2, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd f9fd 	bl	8000524 <__aeabi_i2d>
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	4b9a      	ldr	r3, [pc, #616]	@ (8003398 <MPU9255_Read_All+0x328>)
 8003130:	f7fd fb8c 	bl	800084c <__aeabi_ddiv>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	6839      	ldr	r1, [r7, #0]
 800313a:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd f9ed 	bl	8000524 <__aeabi_i2d>
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	4b92      	ldr	r3, [pc, #584]	@ (8003398 <MPU9255_Read_All+0x328>)
 8003150:	f7fd fb7c 	bl	800084c <__aeabi_ddiv>
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	6839      	ldr	r1, [r7, #0]
 800315a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd f9dd 	bl	8000524 <__aeabi_i2d>
 800316a:	a385      	add	r3, pc, #532	@ (adr r3, 8003380 <MPU9255_Read_All+0x310>)
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	f7fd fb6c 	bl	800084c <__aeabi_ddiv>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	6839      	ldr	r1, [r7, #0]
 800317a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 800317e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800318a:	eddf 6a84 	vldr	s13, [pc, #528]	@ 800339c <MPU9255_Read_All+0x32c>
 800318e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003192:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80033a0 <MPU9255_Read_All+0x330>
 8003196:	ee77 7a87 	vadd.f32	s15, s15, s14
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd f9bc 	bl	8000524 <__aeabi_i2d>
 80031ac:	a376      	add	r3, pc, #472	@ (adr r3, 8003388 <MPU9255_Read_All+0x318>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f7fd fb4b 	bl	800084c <__aeabi_ddiv>
 80031b6:	4602      	mov	r2, r0
 80031b8:	460b      	mov	r3, r1
 80031ba:	6839      	ldr	r1, [r7, #0]
 80031bc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd f9ac 	bl	8000524 <__aeabi_i2d>
 80031cc:	a36e      	add	r3, pc, #440	@ (adr r3, 8003388 <MPU9255_Read_All+0x318>)
 80031ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d2:	f7fd fb3b 	bl	800084c <__aeabi_ddiv>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	6839      	ldr	r1, [r7, #0]
 80031dc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd f99c 	bl	8000524 <__aeabi_i2d>
 80031ec:	a366      	add	r3, pc, #408	@ (adr r3, 8003388 <MPU9255_Read_All+0x318>)
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	f7fd fb2b 	bl	800084c <__aeabi_ddiv>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	6839      	ldr	r1, [r7, #0]
 80031fc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8003200:	f001 fb1a 	bl	8004838 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	4b67      	ldr	r3, [pc, #412]	@ (80033a4 <MPU9255_Read_All+0x334>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd f979 	bl	8000504 <__aeabi_ui2d>
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	4b64      	ldr	r3, [pc, #400]	@ (80033a8 <MPU9255_Read_All+0x338>)
 8003218:	f7fd fb18 	bl	800084c <__aeabi_ddiv>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8003224:	f001 fb08 	bl	8004838 <HAL_GetTick>
 8003228:	4603      	mov	r3, r0
 800322a:	4a5e      	ldr	r2, [pc, #376]	@ (80033a4 <MPU9255_Read_All+0x334>)
 800322c:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003234:	461a      	mov	r2, r3
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800323c:	fb03 f202 	mul.w	r2, r3, r2
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003246:	4619      	mov	r1, r3
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd f965 	bl	8000524 <__aeabi_i2d>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	ec43 2b10 	vmov	d0, r2, r3
 8003262:	f008 fb79 	bl	800b958 <sqrt>
 8003266:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003276:	f7fd fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d11f      	bne.n	80032c0 <MPU9255_Read_All+0x250>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd f94c 	bl	8000524 <__aeabi_i2d>
 800328c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003290:	f7fd fadc 	bl	800084c <__aeabi_ddiv>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	ec43 2b17 	vmov	d7, r2, r3
 800329c:	eeb0 0a47 	vmov.f32	s0, s14
 80032a0:	eef0 0a67 	vmov.f32	s1, s15
 80032a4:	f008 fb84 	bl	800b9b0 <atan>
 80032a8:	ec51 0b10 	vmov	r0, r1, d0
 80032ac:	a338      	add	r3, pc, #224	@ (adr r3, 8003390 <MPU9255_Read_All+0x320>)
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	f7fd f9a1 	bl	80005f8 <__aeabi_dmul>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 80032be:	e005      	b.n	80032cc <MPU9255_Read_All+0x25c>
    }
    else
    {
        roll = 0.0;
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032d2:	425b      	negs	r3, r3
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd f925 	bl	8000524 <__aeabi_i2d>
 80032da:	4682      	mov	sl, r0
 80032dc:	468b      	mov	fp, r1
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd f91d 	bl	8000524 <__aeabi_i2d>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	ec43 2b11 	vmov	d1, r2, r3
 80032f2:	ec4b ab10 	vmov	d0, sl, fp
 80032f6:	f008 fabd 	bl	800b874 <atan2>
 80032fa:	ec51 0b10 	vmov	r0, r1, d0
 80032fe:	a324      	add	r3, pc, #144	@ (adr r3, 8003390 <MPU9255_Read_All+0x320>)
 8003300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003304:	f7fd f978 	bl	80005f8 <__aeabi_dmul>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	4b25      	ldr	r3, [pc, #148]	@ (80033ac <MPU9255_Read_All+0x33c>)
 8003316:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800331a:	f7fd fbdf 	bl	8000adc <__aeabi_dcmplt>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <MPU9255_Read_All+0x2ca>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	4b20      	ldr	r3, [pc, #128]	@ (80033b0 <MPU9255_Read_All+0x340>)
 8003330:	f7fd fbf2 	bl	8000b18 <__aeabi_dcmpgt>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d114      	bne.n	8003364 <MPU9255_Read_All+0x2f4>
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	4b1c      	ldr	r3, [pc, #112]	@ (80033b0 <MPU9255_Read_All+0x340>)
 8003340:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003344:	f7fd fbe8 	bl	8000b18 <__aeabi_dcmpgt>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d034      	beq.n	80033b8 <MPU9255_Read_All+0x348>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	4b14      	ldr	r3, [pc, #80]	@ (80033ac <MPU9255_Read_All+0x33c>)
 800335a:	f7fd fbbf 	bl	8000adc <__aeabi_dcmplt>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d029      	beq.n	80033b8 <MPU9255_Read_All+0x348>
    {
        KalmanY.angle = pitch;
 8003364:	4913      	ldr	r1, [pc, #76]	@ (80033b4 <MPU9255_Read_All+0x344>)
 8003366:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800336a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 800336e:	6839      	ldr	r1, [r7, #0]
 8003370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003374:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
 8003378:	e033      	b.n	80033e2 <MPU9255_Read_All+0x372>
 800337a:	bf00      	nop
 800337c:	f3af 8000 	nop.w
 8003380:	00000000 	.word	0x00000000
 8003384:	40cc2900 	.word	0x40cc2900
 8003388:	00000000 	.word	0x00000000
 800338c:	40606000 	.word	0x40606000
 8003390:	1a63c1f8 	.word	0x1a63c1f8
 8003394:	404ca5dc 	.word	0x404ca5dc
 8003398:	40d00000 	.word	0x40d00000
 800339c:	43aa0000 	.word	0x43aa0000
 80033a0:	42121eb8 	.word	0x42121eb8
 80033a4:	20000798 	.word	0x20000798
 80033a8:	408f4000 	.word	0x408f4000
 80033ac:	c0568000 	.word	0xc0568000
 80033b0:	40568000 	.word	0x40568000
 80033b4:	20000050 	.word	0x20000050
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80033be:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80033c2:	eeb0 1a47 	vmov.f32	s2, s14
 80033c6:	eef0 1a67 	vmov.f32	s3, s15
 80033ca:	ed97 0b06 	vldr	d0, [r7, #24]
 80033ce:	4846      	ldr	r0, [pc, #280]	@ (80034e8 <MPU9255_Read_All+0x478>)
 80033d0:	f000 f890 	bl	80034f4 <Kalman_getAngle>
 80033d4:	eeb0 7a40 	vmov.f32	s14, s0
 80033d8:	eef0 7a60 	vmov.f32	s15, s1
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80033e8:	4690      	mov	r8, r2
 80033ea:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	4b3e      	ldr	r3, [pc, #248]	@ (80034ec <MPU9255_Read_All+0x47c>)
 80033f4:	4640      	mov	r0, r8
 80033f6:	4649      	mov	r1, r9
 80033f8:	f7fd fb8e 	bl	8000b18 <__aeabi_dcmpgt>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <MPU9255_Read_All+0x3a4>
        DataStruct->Gx = -DataStruct->Gx;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003408:	4614      	mov	r4, r2
 800340a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800341a:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800341e:	eeb0 1a47 	vmov.f32	s2, s14
 8003422:	eef0 1a67 	vmov.f32	s3, s15
 8003426:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800342a:	4831      	ldr	r0, [pc, #196]	@ (80034f0 <MPU9255_Read_All+0x480>)
 800342c:	f000 f862 	bl	80034f4 <Kalman_getAngle>
 8003430:	eeb0 7a40 	vmov.f32	s14, s0
 8003434:	eef0 7a60 	vmov.f32	s15, s1
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68

    // Read from magnetometer
	HAL_I2C_Mem_Read(I2Cx, MAG_ADDR, MAG_XOUT_L, 1, Rec_Data, 8, i2c_timeout);
 800343e:	2364      	movs	r3, #100	@ 0x64
 8003440:	9302      	str	r3, [sp, #8]
 8003442:	2308      	movs	r3, #8
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	f107 0308 	add.w	r3, r7, #8
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2301      	movs	r3, #1
 800344e:	2203      	movs	r2, #3
 8003450:	210c      	movs	r1, #12
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f002 fab8 	bl	80059c8 <HAL_I2C_Mem_Read>

	DataStruct->Mag_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8003458:	7a3b      	ldrb	r3, [r7, #8]
 800345a:	b21b      	sxth	r3, r3
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	b21a      	sxth	r2, r3
 8003460:	7a7b      	ldrb	r3, [r7, #9]
 8003462:	b21b      	sxth	r3, r3
 8003464:	4313      	orrs	r3, r2
 8003466:	b21a      	sxth	r2, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	DataStruct->Mag_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800346e:	7abb      	ldrb	r3, [r7, #10]
 8003470:	b21b      	sxth	r3, r3
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	b21a      	sxth	r2, r3
 8003476:	7afb      	ldrb	r3, [r7, #11]
 8003478:	b21b      	sxth	r3, r3
 800347a:	4313      	orrs	r3, r2
 800347c:	b21a      	sxth	r2, r3
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	DataStruct->Mag_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8003484:	7b3b      	ldrb	r3, [r7, #12]
 8003486:	b21b      	sxth	r3, r3
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	b21a      	sxth	r2, r3
 800348c:	7b7b      	ldrb	r3, [r7, #13]
 800348e:	b21b      	sxth	r3, r3
 8003490:	4313      	orrs	r3, r2
 8003492:	b21a      	sxth	r2, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44


	DataStruct->Mx = DataStruct->Mag_X_RAW;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd f83f 	bl	8000524 <__aeabi_i2d>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	6839      	ldr	r1, [r7, #0]
 80034ac:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	DataStruct->My = DataStruct->Mag_Y_RAW;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd f834 	bl	8000524 <__aeabi_i2d>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	6839      	ldr	r1, [r7, #0]
 80034c2:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	DataStruct->Mz = DataStruct->Mag_Z_RAW;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd f829 	bl	8000524 <__aeabi_i2d>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	6839      	ldr	r1, [r7, #0]
 80034d8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
}
 80034dc:	bf00      	nop
 80034de:	3740      	adds	r7, #64	@ 0x40
 80034e0:	46bd      	mov	sp, r7
 80034e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034e6:	bf00      	nop
 80034e8:	20000050 	.word	0x20000050
 80034ec:	40568000 	.word	0x40568000
 80034f0:	20000008 	.word	0x20000008

080034f4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80034f4:	b5b0      	push	{r4, r5, r7, lr}
 80034f6:	b096      	sub	sp, #88	@ 0x58
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	61f8      	str	r0, [r7, #28]
 80034fc:	ed87 0b04 	vstr	d0, [r7, #16]
 8003500:	ed87 1b02 	vstr	d1, [r7, #8]
 8003504:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800350e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003512:	f7fc feb9 	bl	8000288 <__aeabi_dsub>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003524:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800352c:	f7fd f864 	bl	80005f8 <__aeabi_dmul>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4620      	mov	r0, r4
 8003536:	4629      	mov	r1, r5
 8003538:	f7fc fea8 	bl	800028c <__adddf3>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	69f9      	ldr	r1, [r7, #28]
 8003542:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003556:	f7fd f84f 	bl	80005f8 <__aeabi_dmul>
 800355a:	4602      	mov	r2, r0
 800355c:	460b      	mov	r3, r1
 800355e:	4610      	mov	r0, r2
 8003560:	4619      	mov	r1, r3
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003568:	f7fc fe8e 	bl	8000288 <__aeabi_dsub>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4610      	mov	r0, r2
 8003572:	4619      	mov	r1, r3
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800357a:	f7fc fe85 	bl	8000288 <__aeabi_dsub>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f7fc fe7e 	bl	800028c <__adddf3>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800359c:	f7fd f82c 	bl	80005f8 <__aeabi_dmul>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4620      	mov	r0, r4
 80035a6:	4629      	mov	r1, r5
 80035a8:	f7fc fe70 	bl	800028c <__adddf3>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	69f9      	ldr	r1, [r7, #28]
 80035b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80035c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035c6:	f7fd f817 	bl	80005f8 <__aeabi_dmul>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4620      	mov	r0, r4
 80035d0:	4629      	mov	r1, r5
 80035d2:	f7fc fe59 	bl	8000288 <__aeabi_dsub>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	69f9      	ldr	r1, [r7, #28]
 80035dc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80035ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035f0:	f7fd f802 	bl	80005f8 <__aeabi_dmul>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4620      	mov	r0, r4
 80035fa:	4629      	mov	r1, r5
 80035fc:	f7fc fe44 	bl	8000288 <__aeabi_dsub>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	69f9      	ldr	r1, [r7, #28]
 8003606:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003616:	e9d7 2300 	ldrd	r2, r3, [r7]
 800361a:	f7fc ffed 	bl	80005f8 <__aeabi_dmul>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4620      	mov	r0, r4
 8003624:	4629      	mov	r1, r5
 8003626:	f7fc fe31 	bl	800028c <__adddf3>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	69f9      	ldr	r1, [r7, #28]
 8003630:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003640:	f7fc fe24 	bl	800028c <__adddf3>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8003652:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003656:	f7fd f8f9 	bl	800084c <__aeabi_ddiv>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8003668:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800366c:	f7fd f8ee 	bl	800084c <__aeabi_ddiv>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800367e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003682:	f7fc fe01 	bl	8000288 <__aeabi_dsub>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003694:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003698:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800369c:	f7fc ffac 	bl	80005f8 <__aeabi_dmul>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4620      	mov	r0, r4
 80036a6:	4629      	mov	r1, r5
 80036a8:	f7fc fdf0 	bl	800028c <__adddf3>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	69f9      	ldr	r1, [r7, #28]
 80036b2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80036bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80036c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036c4:	f7fc ff98 	bl	80005f8 <__aeabi_dmul>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4620      	mov	r0, r4
 80036ce:	4629      	mov	r1, r5
 80036d0:	f7fc fddc 	bl	800028c <__adddf3>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	69f9      	ldr	r1, [r7, #28]
 80036da:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80036e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80036ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80036f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80036fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003700:	f7fc ff7a 	bl	80005f8 <__aeabi_dmul>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4620      	mov	r0, r4
 800370a:	4629      	mov	r1, r5
 800370c:	f7fc fdbc 	bl	8000288 <__aeabi_dsub>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	69f9      	ldr	r1, [r7, #28]
 8003716:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8003720:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003724:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003728:	f7fc ff66 	bl	80005f8 <__aeabi_dmul>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4620      	mov	r0, r4
 8003732:	4629      	mov	r1, r5
 8003734:	f7fc fda8 	bl	8000288 <__aeabi_dsub>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	69f9      	ldr	r1, [r7, #28]
 800373e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8003748:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800374c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003750:	f7fc ff52 	bl	80005f8 <__aeabi_dmul>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4620      	mov	r0, r4
 800375a:	4629      	mov	r1, r5
 800375c:	f7fc fd94 	bl	8000288 <__aeabi_dsub>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	69f9      	ldr	r1, [r7, #28]
 8003766:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8003770:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003774:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003778:	f7fc ff3e 	bl	80005f8 <__aeabi_dmul>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4620      	mov	r0, r4
 8003782:	4629      	mov	r1, r5
 8003784:	f7fc fd80 	bl	8000288 <__aeabi_dsub>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	69f9      	ldr	r1, [r7, #28]
 800378e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003798:	ec43 2b17 	vmov	d7, r2, r3
};
 800379c:	eeb0 0a47 	vmov.f32	s0, s14
 80037a0:	eef0 0a67 	vmov.f32	s1, s15
 80037a4:	3758      	adds	r7, #88	@ 0x58
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080037ac <MS5611_Init>:


/******************************************************************************
         			#### MS5611 FUNCTIONS ####
******************************************************************************/
MS5611_StatusTypeDef MS5611_Init(MS5611_HandleTypeDef *dev){
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

	MS5611_Reset(dev);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f81d 	bl	80037f4 <MS5611_Reset>

	 if(HAL_I2C_IsDeviceReady(dev->i2c, dev->I2C_ADDRESS, 1, 10000) != HAL_OK){
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	8899      	ldrh	r1, [r3, #4]
 80037c2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80037c6:	2201      	movs	r2, #1
 80037c8:	f002 fb30 	bl	8005e2c <HAL_I2C_IsDeviceReady>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <MS5611_Init+0x32>

			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80037d2:	2201      	movs	r2, #1
 80037d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037d8:	4805      	ldr	r0, [pc, #20]	@ (80037f0 <MS5611_Init+0x44>)
 80037da:	f001 fb6d 	bl	8004eb8 <HAL_GPIO_WritePin>

	 }

	MS5611_Get_CalibCoeff(dev);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f822 	bl	8003828 <MS5611_Get_CalibCoeff>

	return MS5611_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40020800 	.word	0x40020800

080037f4 <MS5611_Reset>:


void MS5611_Reset(MS5611_HandleTypeDef *dev){
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af04      	add	r7, sp, #16
 80037fa:	6078      	str	r0, [r7, #4]

	HAL_I2C_Mem_Write(dev->i2c, dev->I2C_ADDRESS, dev->I2C_ADDRESS, 1, &ResetCom, 1, 1000);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8899      	ldrh	r1, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	889a      	ldrh	r2, [r3, #4]
 8003808:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800380c:	9302      	str	r3, [sp, #8]
 800380e:	2301      	movs	r3, #1
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	4b04      	ldr	r3, [pc, #16]	@ (8003824 <MS5611_Reset+0x30>)
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2301      	movs	r3, #1
 8003818:	f001 ffdc 	bl	80057d4 <HAL_I2C_Mem_Write>

}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	2000009a 	.word	0x2000009a

08003828 <MS5611_Get_CalibCoeff>:


void MS5611_Get_CalibCoeff(MS5611_HandleTypeDef *dev){
 8003828:	b580      	push	{r7, lr}
 800382a:	b08e      	sub	sp, #56	@ 0x38
 800382c:	af02      	add	r7, sp, #8
 800382e:	6078      	str	r0, [r7, #4]

	uint8_t CalibCoefAddrss[7] = {0xA2, //C1
 8003830:	4a8f      	ldr	r2, [pc, #572]	@ (8003a70 <MS5611_Get_CalibCoeff+0x248>)
 8003832:	f107 0320 	add.w	r3, r7, #32
 8003836:	e892 0003 	ldmia.w	r2, {r0, r1}
 800383a:	6018      	str	r0, [r3, #0]
 800383c:	3304      	adds	r3, #4
 800383e:	8019      	strh	r1, [r3, #0]
 8003840:	3302      	adds	r3, #2
 8003842:	0c0a      	lsrs	r2, r1, #16
 8003844:	701a      	strb	r2, [r3, #0]
								  0xA8, //C4
								  0xAA, //C5
								  0xAC, //C6
								  0xAE}; /*! The last address is for CRC*/

	uint8_t TempryCalibCoefVal[2] = {0};	/*! Temporary buffer that gets two complement of each calibration coefficient*/
 8003846:	2300      	movs	r3, #0
 8003848:	83bb      	strh	r3, [r7, #28]
	uint8_t CalibCoefVal[14] = {0};			/*! Stable buffer that collects all complements of calibration coefficients*/
 800384a:	f107 030c 	add.w	r3, r7, #12
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	819a      	strh	r2, [r3, #12]
	uint8_t cnt = 0;
 8003858:	2300      	movs	r3, #0
 800385a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	for(cnt = 0; cnt <= 6 ; cnt++){
 800385e:	2300      	movs	r3, #0
 8003860:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003864:	e03b      	b.n	80038de <MS5611_Get_CalibCoeff+0xb6>

		HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &CalibCoefAddrss[cnt], 1, 1000);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8899      	ldrh	r1, [r3, #4]
 800386e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003872:	f107 0220 	add.w	r2, r7, #32
 8003876:	441a      	add	r2, r3
 8003878:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	2301      	movs	r3, #1
 8003880:	f001 fc78 	bl	8005174 <HAL_I2C_Master_Transmit>

				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 8003884:	2300      	movs	r3, #0
 8003886:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003888:	e010      	b.n	80038ac <MS5611_Get_CalibCoeff+0x84>

					HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &TempryCalibCoefVal[cnt_2], 2, 1000);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8899      	ldrh	r1, [r3, #4]
 8003892:	f107 021c 	add.w	r2, r7, #28
 8003896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003898:	441a      	add	r2, r3
 800389a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2302      	movs	r3, #2
 80038a2:	f001 fd65 	bl	8005370 <HAL_I2C_Master_Receive>
				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 80038a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a8:	3301      	adds	r3, #1
 80038aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	ddeb      	ble.n	800388a <MS5611_Get_CalibCoeff+0x62>

				}

		CalibCoefVal[(cnt*2)]   = TempryCalibCoefVal[0];
 80038b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	7f3a      	ldrb	r2, [r7, #28]
 80038ba:	3330      	adds	r3, #48	@ 0x30
 80038bc:	443b      	add	r3, r7
 80038be:	f803 2c24 	strb.w	r2, [r3, #-36]
		CalibCoefVal[(cnt*2+1)] = TempryCalibCoefVal[1];
 80038c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	3301      	adds	r3, #1
 80038ca:	7f7a      	ldrb	r2, [r7, #29]
 80038cc:	3330      	adds	r3, #48	@ 0x30
 80038ce:	443b      	add	r3, r7
 80038d0:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(cnt = 0; cnt <= 6 ; cnt++){
 80038d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80038d8:	3301      	adds	r3, #1
 80038da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80038de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80038e2:	2b06      	cmp	r3, #6
 80038e4:	d9bf      	bls.n	8003866 <MS5611_Get_CalibCoeff+0x3e>

	}

	cnt = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	/*! Complements of each calibration coefficient consists MSB and LSB bits*/
	dev->Clb_Cf.C1  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2; // uint16_t <== |MSB_C1|LSB_C1|
 80038ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80038f0:	3330      	adds	r3, #48	@ 0x30
 80038f2:	443b      	add	r3, r7
 80038f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038f8:	b21b      	sxth	r3, r3
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	b21a      	sxth	r2, r3
 80038fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003902:	3301      	adds	r3, #1
 8003904:	3330      	adds	r3, #48	@ 0x30
 8003906:	443b      	add	r3, r7
 8003908:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800390c:	b21b      	sxth	r3, r3
 800390e:	4313      	orrs	r3, r2
 8003910:	b21b      	sxth	r3, r3
 8003912:	b29a      	uxth	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	80da      	strh	r2, [r3, #6]
 8003918:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800391c:	3302      	adds	r3, #2
 800391e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C2  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8003922:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003926:	3330      	adds	r3, #48	@ 0x30
 8003928:	443b      	add	r3, r7
 800392a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800392e:	b21b      	sxth	r3, r3
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	b21a      	sxth	r2, r3
 8003934:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003938:	3301      	adds	r3, #1
 800393a:	3330      	adds	r3, #48	@ 0x30
 800393c:	443b      	add	r3, r7
 800393e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003942:	b21b      	sxth	r3, r3
 8003944:	4313      	orrs	r3, r2
 8003946:	b21b      	sxth	r3, r3
 8003948:	b29a      	uxth	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	811a      	strh	r2, [r3, #8]
 800394e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003952:	3302      	adds	r3, #2
 8003954:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C3  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8003958:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800395c:	3330      	adds	r3, #48	@ 0x30
 800395e:	443b      	add	r3, r7
 8003960:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003964:	b21b      	sxth	r3, r3
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	b21a      	sxth	r2, r3
 800396a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800396e:	3301      	adds	r3, #1
 8003970:	3330      	adds	r3, #48	@ 0x30
 8003972:	443b      	add	r3, r7
 8003974:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003978:	b21b      	sxth	r3, r3
 800397a:	4313      	orrs	r3, r2
 800397c:	b21b      	sxth	r3, r3
 800397e:	b29a      	uxth	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	815a      	strh	r2, [r3, #10]
 8003984:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003988:	3302      	adds	r3, #2
 800398a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C4  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 800398e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003992:	3330      	adds	r3, #48	@ 0x30
 8003994:	443b      	add	r3, r7
 8003996:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800399a:	b21b      	sxth	r3, r3
 800399c:	021b      	lsls	r3, r3, #8
 800399e:	b21a      	sxth	r2, r3
 80039a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80039a4:	3301      	adds	r3, #1
 80039a6:	3330      	adds	r3, #48	@ 0x30
 80039a8:	443b      	add	r3, r7
 80039aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039ae:	b21b      	sxth	r3, r3
 80039b0:	4313      	orrs	r3, r2
 80039b2:	b21b      	sxth	r3, r3
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	819a      	strh	r2, [r3, #12]
 80039ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80039be:	3302      	adds	r3, #2
 80039c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C5  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80039c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80039c8:	3330      	adds	r3, #48	@ 0x30
 80039ca:	443b      	add	r3, r7
 80039cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039d0:	b21b      	sxth	r3, r3
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	b21a      	sxth	r2, r3
 80039d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80039da:	3301      	adds	r3, #1
 80039dc:	3330      	adds	r3, #48	@ 0x30
 80039de:	443b      	add	r3, r7
 80039e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80039e4:	b21b      	sxth	r3, r3
 80039e6:	4313      	orrs	r3, r2
 80039e8:	b21b      	sxth	r3, r3
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	81da      	strh	r2, [r3, #14]
 80039f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80039f4:	3302      	adds	r3, #2
 80039f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C6  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80039fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80039fe:	3330      	adds	r3, #48	@ 0x30
 8003a00:	443b      	add	r3, r7
 8003a02:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a06:	b21b      	sxth	r3, r3
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	b21a      	sxth	r2, r3
 8003a0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a10:	3301      	adds	r3, #1
 8003a12:	3330      	adds	r3, #48	@ 0x30
 8003a14:	443b      	add	r3, r7
 8003a16:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a1a:	b21b      	sxth	r3, r3
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	b21b      	sxth	r3, r3
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	821a      	strh	r2, [r3, #16]
 8003a26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.crc = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8003a30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a34:	3330      	adds	r3, #48	@ 0x30
 8003a36:	443b      	add	r3, r7
 8003a38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a3c:	b21b      	sxth	r3, r3
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	b21a      	sxth	r2, r3
 8003a42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a46:	3301      	adds	r3, #1
 8003a48:	3330      	adds	r3, #48	@ 0x30
 8003a4a:	443b      	add	r3, r7
 8003a4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a50:	b21b      	sxth	r3, r3
 8003a52:	4313      	orrs	r3, r2
 8003a54:	b21b      	sxth	r3, r3
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	825a      	strh	r2, [r3, #18]
 8003a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a60:	3302      	adds	r3, #2
 8003a62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

}
 8003a66:	bf00      	nop
 8003a68:	3730      	adds	r7, #48	@ 0x30
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	0800e010 	.word	0x0800e010

08003a74 <MS5611_ReadRaw_Press_Temp>:


void MS5611_ReadRaw_Press_Temp(MS5611_HandleTypeDef *dev){
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	6078      	str	r0, [r7, #4]

	uint8_t RawDataD1[3]  = {0}; /*! D1 = Raw pressure value that will be compensated at other functions*/
 8003a7c:	f107 030c 	add.w	r3, r7, #12
 8003a80:	2100      	movs	r1, #0
 8003a82:	460a      	mov	r2, r1
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	460a      	mov	r2, r1
 8003a88:	709a      	strb	r2, [r3, #2]
	uint8_t RawDataD2[3]  = {0}; /*! D2 = Raw temperature value that will be compensated at other functions*/
 8003a8a:	f107 0308 	add.w	r3, r7, #8
 8003a8e:	2100      	movs	r1, #0
 8003a90:	460a      	mov	r2, r1
 8003a92:	801a      	strh	r2, [r3, #0]
 8003a94:	460a      	mov	r2, r1
 8003a96:	709a      	strb	r2, [r3, #2]
	 *
	 * @Attention! you must wait minimum 15 milisecond after each i2c command because of clock line and calculation times.
	 */

	/*! Gets D1(Raw Pressure)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D1, 1, 1000); //(1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8899      	ldrh	r1, [r3, #4]
 8003aa0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	4a2f      	ldr	r2, [pc, #188]	@ (8003b68 <MS5611_ReadRaw_Press_Temp+0xf4>)
 8003aaa:	f001 fb63 	bl	8005174 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8003aae:	2014      	movs	r0, #20
 8003ab0:	f000 fece 	bl	8004850 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);	 //(2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6818      	ldr	r0, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8899      	ldrh	r1, [r3, #4]
 8003abc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	4a29      	ldr	r2, [pc, #164]	@ (8003b6c <MS5611_ReadRaw_Press_Temp+0xf8>)
 8003ac6:	f001 fb55 	bl	8005174 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8003aca:	2014      	movs	r0, #20
 8003acc:	f000 fec0 	bl	8004850 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD1[0], 3, 1000);	 //(3)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8899      	ldrh	r1, [r3, #4]
 8003ad8:	f107 020c 	add.w	r2, r7, #12
 8003adc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	f001 fc44 	bl	8005370 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D1 = (uint32_t)((RawDataD1[0]<<16) | (RawDataD1[1]<<8) | (RawDataD1[2]<<0)); // MSB|LSB|XLSB
 8003ae8:	7b3b      	ldrb	r3, [r7, #12]
 8003aea:	041a      	lsls	r2, r3, #16
 8003aec:	7b7b      	ldrb	r3, [r7, #13]
 8003aee:	021b      	lsls	r3, r3, #8
 8003af0:	4313      	orrs	r3, r2
 8003af2:	7bba      	ldrb	r2, [r7, #14]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	461a      	mov	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	615a      	str	r2, [r3, #20]

	/*! Gets D2(Raw Temperature)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D2, 1, 1000); //(1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6818      	ldr	r0, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8899      	ldrh	r1, [r3, #4]
 8003b04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	4a18      	ldr	r2, [pc, #96]	@ (8003b70 <MS5611_ReadRaw_Press_Temp+0xfc>)
 8003b0e:	f001 fb31 	bl	8005174 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8003b12:	2014      	movs	r0, #20
 8003b14:	f000 fe9c 	bl	8004850 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);  	 //(2)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8899      	ldrh	r1, [r3, #4]
 8003b20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	2301      	movs	r3, #1
 8003b28:	4a10      	ldr	r2, [pc, #64]	@ (8003b6c <MS5611_ReadRaw_Press_Temp+0xf8>)
 8003b2a:	f001 fb23 	bl	8005174 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8003b2e:	2014      	movs	r0, #20
 8003b30:	f000 fe8e 	bl	8004850 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD2[0], 3, 1000);  //(3)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8899      	ldrh	r1, [r3, #4]
 8003b3c:	f107 0208 	add.w	r2, r7, #8
 8003b40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	2303      	movs	r3, #3
 8003b48:	f001 fc12 	bl	8005370 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D2 = (uint32_t)((RawDataD2[0]<<16) | (RawDataD2[1]<<8) | (RawDataD2[2]<<0)); // MSB|LSB|XLSB
 8003b4c:	7a3b      	ldrb	r3, [r7, #8]
 8003b4e:	041a      	lsls	r2, r3, #16
 8003b50:	7a7b      	ldrb	r3, [r7, #9]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	4313      	orrs	r3, r2
 8003b56:	7aba      	ldrb	r2, [r7, #10]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	619a      	str	r2, [r3, #24]

}
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20000098 	.word	0x20000098
 8003b6c:	2000079c 	.word	0x2000079c
 8003b70:	20000099 	.word	0x20000099

08003b74 <MS5611_FirstCalculateDatas>:


void MS5611_FirstCalculateDatas(MS5611_HandleTypeDef *dev){
 8003b74:	b5b0      	push	{r4, r5, r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	dev->ClcPrms.dT   = dev->ClcPrms.D2 - dev->Clb_Cf.C5 * pow(2,8);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fc fcbf 	bl	8000504 <__aeabi_ui2d>
 8003b86:	4604      	mov	r4, r0
 8003b88:	460d      	mov	r5, r1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	89db      	ldrh	r3, [r3, #14]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fc fcc8 	bl	8000524 <__aeabi_i2d>
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	4b69      	ldr	r3, [pc, #420]	@ (8003d40 <MS5611_FirstCalculateDatas+0x1cc>)
 8003b9a:	f7fc fd2d 	bl	80005f8 <__aeabi_dmul>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	4629      	mov	r1, r5
 8003ba6:	f7fc fb6f 	bl	8000288 <__aeabi_dsub>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	f7fc fff9 	bl	8000ba8 <__aeabi_d2f>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	61da      	str	r2, [r3, #28]
	dev->ClcPrms.OFF  = dev->Clb_Cf.C2 * pow(2,17) + (dev->Clb_Cf.C4 * dev->ClcPrms.dT) / pow(2,6);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	891b      	ldrh	r3, [r3, #8]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fc fcaf 	bl	8000524 <__aeabi_i2d>
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8003bce:	f7fc fd13 	bl	80005f8 <__aeabi_dmul>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4614      	mov	r4, r2
 8003bd8:	461d      	mov	r5, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	899b      	ldrh	r3, [r3, #12]
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	edd3 7a07 	vldr	s15, [r3, #28]
 8003bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf0:	ee17 0a90 	vmov	r0, s15
 8003bf4:	f7fc fca8 	bl	8000548 <__aeabi_f2d>
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	4b51      	ldr	r3, [pc, #324]	@ (8003d44 <MS5611_FirstCalculateDatas+0x1d0>)
 8003bfe:	f7fc fe25 	bl	800084c <__aeabi_ddiv>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4620      	mov	r0, r4
 8003c08:	4629      	mov	r1, r5
 8003c0a:	f7fc fb3f 	bl	800028c <__adddf3>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4610      	mov	r0, r2
 8003c14:	4619      	mov	r1, r3
 8003c16:	f7fc ffc7 	bl	8000ba8 <__aeabi_d2f>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	@ 0x28
	dev->ClcPrms.SENS = dev->Clb_Cf.C1 * pow(2,16) + (dev->Clb_Cf.C3 * dev->ClcPrms.dT) / pow(2,7);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	88db      	ldrh	r3, [r3, #6]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fc fc7d 	bl	8000524 <__aeabi_i2d>
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	4b46      	ldr	r3, [pc, #280]	@ (8003d48 <MS5611_FirstCalculateDatas+0x1d4>)
 8003c30:	f7fc fce2 	bl	80005f8 <__aeabi_dmul>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4614      	mov	r4, r2
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	895b      	ldrh	r3, [r3, #10]
 8003c40:	ee07 3a90 	vmov	s15, r3
 8003c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8003c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c52:	ee17 0a90 	vmov	r0, s15
 8003c56:	f7fc fc77 	bl	8000548 <__aeabi_f2d>
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d4c <MS5611_FirstCalculateDatas+0x1d8>)
 8003c60:	f7fc fdf4 	bl	800084c <__aeabi_ddiv>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fb0e 	bl	800028c <__adddf3>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4610      	mov	r0, r2
 8003c76:	4619      	mov	r1, r3
 8003c78:	f7fc ff96 	bl	8000ba8 <__aeabi_d2f>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	62da      	str	r2, [r3, #44]	@ 0x2c

	dev->ClcPrms.TEMP = 2000 + dev->ClcPrms.dT * dev->Clb_Cf.C6 / pow(2,23);								//Actual temperature data
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	ed93 7a07 	vldr	s14, [r3, #28]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	8a1b      	ldrh	r3, [r3, #16]
 8003c8c:	ee07 3a90 	vmov	s15, r3
 8003c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c98:	ee17 0a90 	vmov	r0, s15
 8003c9c:	f7fc fc54 	bl	8000548 <__aeabi_f2d>
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8003d50 <MS5611_FirstCalculateDatas+0x1dc>)
 8003ca6:	f7fc fdd1 	bl	800084c <__aeabi_ddiv>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4610      	mov	r0, r2
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	4b27      	ldr	r3, [pc, #156]	@ (8003d54 <MS5611_FirstCalculateDatas+0x1e0>)
 8003cb8:	f7fc fae8 	bl	800028c <__adddf3>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	f7fc ff70 	bl	8000ba8 <__aeabi_d2f>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	621a      	str	r2, [r3, #32]
	dev->ClcPrms.P	  = ((dev->ClcPrms.D1 * dev->ClcPrms.SENS / pow(2,21) - dev->ClcPrms.OFF))/pow(2,15);	//Actual pressure data
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce4:	ee17 0a90 	vmov	r0, s15
 8003ce8:	f7fc fc2e 	bl	8000548 <__aeabi_f2d>
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	4b19      	ldr	r3, [pc, #100]	@ (8003d58 <MS5611_FirstCalculateDatas+0x1e4>)
 8003cf2:	f7fc fdab 	bl	800084c <__aeabi_ddiv>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4614      	mov	r4, r2
 8003cfc:	461d      	mov	r5, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fc20 	bl	8000548 <__aeabi_f2d>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	4629      	mov	r1, r5
 8003d10:	f7fc faba 	bl	8000288 <__aeabi_dsub>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	4b0e      	ldr	r3, [pc, #56]	@ (8003d5c <MS5611_FirstCalculateDatas+0x1e8>)
 8003d22:	f7fc fd93 	bl	800084c <__aeabi_ddiv>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f7fc ff3b 	bl	8000ba8 <__aeabi_d2f>
 8003d32:	4602      	mov	r2, r0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8003d38:	bf00      	nop
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8003d40:	40700000 	.word	0x40700000
 8003d44:	40500000 	.word	0x40500000
 8003d48:	40f00000 	.word	0x40f00000
 8003d4c:	40600000 	.word	0x40600000
 8003d50:	41600000 	.word	0x41600000
 8003d54:	409f4000 	.word	0x409f4000
 8003d58:	41400000 	.word	0x41400000
 8003d5c:	40e00000 	.word	0x40e00000

08003d60 <MS5611_SecondCalculateDatas>:


void MS5611_SecondCalculateDatas(MS5611_HandleTypeDef *dev){
 8003d60:	b5b0      	push	{r4, r5, r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]

	if(dev->ClcPrms.TEMP < 2000){
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	edd3 7a08 	vldr	s15, [r3, #32]
 8003d6e:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8003fa8 <MS5611_SecondCalculateDatas+0x248>
 8003d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7a:	f140 80e3 	bpl.w	8003f44 <MS5611_SecondCalculateDatas+0x1e4>

			/*! Low Temperature */
			dev->ClcPrms.TEMP2 = (dev->ClcPrms.dT * dev->ClcPrms.dT) / pow(2,31);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	ed93 7a07 	vldr	s14, [r3, #28]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	edd3 7a07 	vldr	s15, [r3, #28]
 8003d8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d8e:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8003fac <MS5611_SecondCalculateDatas+0x24c>
 8003d92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003da2:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8003fa8 <MS5611_SecondCalculateDatas+0x248>
 8003da6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	edd3 7a08 	vldr	s15, [r3, #32]
 8003db0:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8003fa8 <MS5611_SecondCalculateDatas+0x248>
 8003db4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003dc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dc4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003dc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,2);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	edd3 7a08 	vldr	s15, [r3, #32]
 8003dd8:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8003fa8 <MS5611_SecondCalculateDatas+0x248>
 8003ddc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	edd3 7a08 	vldr	s15, [r3, #32]
 8003de6:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003fa8 <MS5611_SecondCalculateDatas+0x248>
 8003dea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003df2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8003df6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dfa:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8003dfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

					if(dev->ClcPrms.TEMP < -1500){
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e0e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8003fb0 <MS5611_SecondCalculateDatas+0x250>
 8003e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1a:	d571      	bpl.n	8003f00 <MS5611_SecondCalculateDatas+0x1a0>
						/*! Very Low Temperature */
						dev->ClcPrms.OFF2  = dev->ClcPrms.OFF2 + 7 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e28:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8003fb4 <MS5611_SecondCalculateDatas+0x254>
 8003e2c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e36:	ed9f 6a5f 	vldr	s12, [pc, #380]	@ 8003fb4 <MS5611_SecondCalculateDatas+0x254>
 8003e3a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e42:	eef1 6a0c 	vmov.f32	s13, #28	@ 0x40e00000  7.0
 8003e46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
						dev->ClcPrms.SENS2 = dev->ClcPrms.SENS2 + 11 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500)) / pow(2,1);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fc fb75 	bl	8000548 <__aeabi_f2d>
 8003e5e:	4604      	mov	r4, r0
 8003e60:	460d      	mov	r5, r1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e68:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8003fb4 <MS5611_SecondCalculateDatas+0x254>
 8003e6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003fb4 <MS5611_SecondCalculateDatas+0x254>
 8003e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e82:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8003e86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e8a:	ee17 0a90 	vmov	r0, s15
 8003e8e:	f7fc fb5b 	bl	8000548 <__aeabi_f2d>
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003e9a:	f7fc fcd7 	bl	800084c <__aeabi_ddiv>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	f7fc f9f1 	bl	800028c <__adddf3>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f7fc fe79 	bl	8000ba8 <__aeabi_d2f>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	635a      	str	r2, [r3, #52]	@ 0x34

						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	ed93 7a08 	vldr	s14, [r3, #32]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;

		}
}
 8003efe:	e04e      	b.n	8003f9e <MS5611_SecondCalculateDatas+0x23e>
						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	ed93 7a08 	vldr	s14, [r3, #32]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 8003f42:	e02c      	b.n	8003f9e <MS5611_SecondCalculateDatas+0x23e>
			dev->ClcPrms.TEMP2 = 0;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f04f 0200 	mov.w	r2, #0
 8003f4a:	639a      	str	r2, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 0;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 0;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	635a      	str	r2, [r3, #52]	@ 0x34
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	edc3 7a08 	vstr	s15, [r3, #32]
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	44fa0000 	.word	0x44fa0000
 8003fac:	4f000000 	.word	0x4f000000
 8003fb0:	c4bb8000 	.word	0xc4bb8000
 8003fb4:	44bb8000 	.word	0x44bb8000

08003fb8 <MS5611_Calc_Altitude>:


float MS5611_Calc_Altitude(MS5611_HandleTypeDef *dev){
 8003fb8:	b5b0      	push	{r4, r5, r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

	/*! The geographical altitude can be calculated by determining the absolute pressure.*/
	return (dev->ClcPrms.P / GradientTemp) * (1 - pow((dev->ClcPrms.P / SeaLevelPress),((GasCoefficient * GradientTemp)/GravityAccel)));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc fabf 	bl	8000548 <__aeabi_f2d>
 8003fca:	a31f      	add	r3, pc, #124	@ (adr r3, 8004048 <MS5611_Calc_Altitude+0x90>)
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	f7fc fc3c 	bl	800084c <__aeabi_ddiv>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4614      	mov	r4, r2
 8003fda:	461d      	mov	r5, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003fe2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8004040 <MS5611_Calc_Altitude+0x88>
 8003fe6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003fea:	ee16 0a90 	vmov	r0, s13
 8003fee:	f7fc faab 	bl	8000548 <__aeabi_f2d>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 8004038 <MS5611_Calc_Altitude+0x80>
 8003ffa:	ec43 2b10 	vmov	d0, r2, r3
 8003ffe:	f007 fc3b 	bl	800b878 <pow>
 8004002:	ec53 2b10 	vmov	r2, r3, d0
 8004006:	f04f 0000 	mov.w	r0, #0
 800400a:	490e      	ldr	r1, [pc, #56]	@ (8004044 <MS5611_Calc_Altitude+0x8c>)
 800400c:	f7fc f93c 	bl	8000288 <__aeabi_dsub>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4620      	mov	r0, r4
 8004016:	4629      	mov	r1, r5
 8004018:	f7fc faee 	bl	80005f8 <__aeabi_dmul>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	f7fc fdc0 	bl	8000ba8 <__aeabi_d2f>
 8004028:	4603      	mov	r3, r0
 800402a:	ee07 3a90 	vmov	s15, r3

}
 800402e:	eeb0 0a67 	vmov.f32	s0, s15
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bdb0      	pop	{r4, r5, r7, pc}
 8004038:	a0829b73 	.word	0xa0829b73
 800403c:	3fc85a7a 	.word	0x3fc85a7a
 8004040:	47c5e680 	.word	0x47c5e680
 8004044:	3ff00000 	.word	0x3ff00000
 8004048:	76c8b439 	.word	0x76c8b439
 800404c:	3f7a9fbe 	.word	0x3f7a9fbe

08004050 <MS5611_Read_ActVal>:


MS5611_StatusTypeDef MS5611_Read_ActVal(MS5611_HandleTypeDef *dev){
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

	/*! Read raw pressure and temperature MSB | LSB | XLSB values from the sensor*/
	MS5611_ReadRaw_Press_Temp(dev);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f7ff fd0b 	bl	8003a74 <MS5611_ReadRaw_Press_Temp>

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	MS5611_FirstCalculateDatas(dev);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff fd88 	bl	8003b74 <MS5611_FirstCalculateDatas>

	/*! If it's needed, Calculate 2st order temperature and pressure  according to MS5611 2st order algorithm */
	MS5611_SecondCalculateDatas(dev);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff fe7b 	bl	8003d60 <MS5611_SecondCalculateDatas>

	/*! Vertical Altitude is calculated by using pressure and some coefficients */
	MS5611_Altitude = MS5611_Calc_Altitude(dev);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ffa4 	bl	8003fb8 <MS5611_Calc_Altitude>
 8004070:	eef0 7a40 	vmov.f32	s15, s0
 8004074:	4b18      	ldr	r3, [pc, #96]	@ (80040d8 <MS5611_Read_ActVal+0x88>)
 8004076:	edc3 7a00 	vstr	s15, [r3]

	/*! Pressure unit is mBar and Temperature unit is celcius degress*/
	MS5611_Press = dev->ClcPrms.P * 0.01 ;			//1001.25mBar
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc fa62 	bl	8000548 <__aeabi_f2d>
 8004084:	a312      	add	r3, pc, #72	@ (adr r3, 80040d0 <MS5611_Read_ActVal+0x80>)
 8004086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408a:	f7fc fab5 	bl	80005f8 <__aeabi_dmul>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	f7fc fd87 	bl	8000ba8 <__aeabi_d2f>
 800409a:	4603      	mov	r3, r0
 800409c:	4a0f      	ldr	r2, [pc, #60]	@ (80040dc <MS5611_Read_ActVal+0x8c>)
 800409e:	6013      	str	r3, [r2, #0]
	MS5611_Temp  = dev->ClcPrms.TEMP * 0.01 ;		//25.57 CelciusDegress
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7fc fa4f 	bl	8000548 <__aeabi_f2d>
 80040aa:	a309      	add	r3, pc, #36	@ (adr r3, 80040d0 <MS5611_Read_ActVal+0x80>)
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	f7fc faa2 	bl	80005f8 <__aeabi_dmul>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	f7fc fd74 	bl	8000ba8 <__aeabi_d2f>
 80040c0:	4603      	mov	r3, r0
 80040c2:	4a07      	ldr	r2, [pc, #28]	@ (80040e0 <MS5611_Read_ActVal+0x90>)
 80040c4:	6013      	str	r3, [r2, #0]

	return MS5611_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	47ae147b 	.word	0x47ae147b
 80040d4:	3f847ae1 	.word	0x3f847ae1
 80040d8:	20000468 	.word	0x20000468
 80040dc:	20000464 	.word	0x20000464
 80040e0:	2000046c 	.word	0x2000046c

080040e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	4b10      	ldr	r3, [pc, #64]	@ (8004130 <HAL_MspInit+0x4c>)
 80040f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f2:	4a0f      	ldr	r2, [pc, #60]	@ (8004130 <HAL_MspInit+0x4c>)
 80040f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80040fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004130 <HAL_MspInit+0x4c>)
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004106:	2300      	movs	r3, #0
 8004108:	603b      	str	r3, [r7, #0]
 800410a:	4b09      	ldr	r3, [pc, #36]	@ (8004130 <HAL_MspInit+0x4c>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	4a08      	ldr	r2, [pc, #32]	@ (8004130 <HAL_MspInit+0x4c>)
 8004110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004114:	6413      	str	r3, [r2, #64]	@ 0x40
 8004116:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <HAL_MspInit+0x4c>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800

08004134 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08c      	sub	sp, #48	@ 0x30
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800413c:	f107 031c 	add.w	r3, r7, #28
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	609a      	str	r2, [r3, #8]
 8004148:	60da      	str	r2, [r3, #12]
 800414a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a32      	ldr	r2, [pc, #200]	@ (800421c <HAL_I2C_MspInit+0xe8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d12c      	bne.n	80041b0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	4b31      	ldr	r3, [pc, #196]	@ (8004220 <HAL_I2C_MspInit+0xec>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415e:	4a30      	ldr	r2, [pc, #192]	@ (8004220 <HAL_I2C_MspInit+0xec>)
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	6313      	str	r3, [r2, #48]	@ 0x30
 8004166:	4b2e      	ldr	r3, [pc, #184]	@ (8004220 <HAL_I2C_MspInit+0xec>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	61bb      	str	r3, [r7, #24]
 8004170:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_MS_Pin|I2C1_SDA_MS_Pin;
 8004172:	23c0      	movs	r3, #192	@ 0xc0
 8004174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004176:	2312      	movs	r3, #18
 8004178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417a:	2300      	movs	r3, #0
 800417c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800417e:	2303      	movs	r3, #3
 8004180:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004182:	2304      	movs	r3, #4
 8004184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004186:	f107 031c 	add.w	r3, r7, #28
 800418a:	4619      	mov	r1, r3
 800418c:	4825      	ldr	r0, [pc, #148]	@ (8004224 <HAL_I2C_MspInit+0xf0>)
 800418e:	f000 fcf7 	bl	8004b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	4b22      	ldr	r3, [pc, #136]	@ (8004220 <HAL_I2C_MspInit+0xec>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419a:	4a21      	ldr	r2, [pc, #132]	@ (8004220 <HAL_I2C_MspInit+0xec>)
 800419c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80041a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004220 <HAL_I2C_MspInit+0xec>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80041ae:	e031      	b.n	8004214 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004228 <HAL_I2C_MspInit+0xf4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d12c      	bne.n	8004214 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	4b18      	ldr	r3, [pc, #96]	@ (8004220 <HAL_I2C_MspInit+0xec>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c2:	4a17      	ldr	r2, [pc, #92]	@ (8004220 <HAL_I2C_MspInit+0xec>)
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80041ca:	4b15      	ldr	r3, [pc, #84]	@ (8004220 <HAL_I2C_MspInit+0xec>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_MPU_Pin|I2C2_SDA_MPU_Pin;
 80041d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80041da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041dc:	2312      	movs	r3, #18
 80041de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e4:	2303      	movs	r3, #3
 80041e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80041e8:	2304      	movs	r3, #4
 80041ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ec:	f107 031c 	add.w	r3, r7, #28
 80041f0:	4619      	mov	r1, r3
 80041f2:	480c      	ldr	r0, [pc, #48]	@ (8004224 <HAL_I2C_MspInit+0xf0>)
 80041f4:	f000 fcc4 	bl	8004b80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	4b08      	ldr	r3, [pc, #32]	@ (8004220 <HAL_I2C_MspInit+0xec>)
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	4a07      	ldr	r2, [pc, #28]	@ (8004220 <HAL_I2C_MspInit+0xec>)
 8004202:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004206:	6413      	str	r3, [r2, #64]	@ 0x40
 8004208:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <HAL_I2C_MspInit+0xec>)
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
}
 8004214:	bf00      	nop
 8004216:	3730      	adds	r7, #48	@ 0x30
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40005400 	.word	0x40005400
 8004220:	40023800 	.word	0x40023800
 8004224:	40020400 	.word	0x40020400
 8004228:	40005800 	.word	0x40005800

0800422c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	@ 0x28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004234:	f107 0314 	add.w	r3, r7, #20
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a19      	ldr	r2, [pc, #100]	@ (80042b0 <HAL_SPI_MspInit+0x84>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d12b      	bne.n	80042a6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	4b18      	ldr	r3, [pc, #96]	@ (80042b4 <HAL_SPI_MspInit+0x88>)
 8004254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004256:	4a17      	ldr	r2, [pc, #92]	@ (80042b4 <HAL_SPI_MspInit+0x88>)
 8004258:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800425c:	6453      	str	r3, [r2, #68]	@ 0x44
 800425e:	4b15      	ldr	r3, [pc, #84]	@ (80042b4 <HAL_SPI_MspInit+0x88>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	4b11      	ldr	r3, [pc, #68]	@ (80042b4 <HAL_SPI_MspInit+0x88>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004272:	4a10      	ldr	r2, [pc, #64]	@ (80042b4 <HAL_SPI_MspInit+0x88>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	6313      	str	r3, [r2, #48]	@ 0x30
 800427a:	4b0e      	ldr	r3, [pc, #56]	@ (80042b4 <HAL_SPI_MspInit+0x88>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004286:	23e0      	movs	r3, #224	@ 0xe0
 8004288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800428a:	2302      	movs	r3, #2
 800428c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004292:	2303      	movs	r3, #3
 8004294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004296:	2305      	movs	r3, #5
 8004298:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800429a:	f107 0314 	add.w	r3, r7, #20
 800429e:	4619      	mov	r1, r3
 80042a0:	4805      	ldr	r0, [pc, #20]	@ (80042b8 <HAL_SPI_MspInit+0x8c>)
 80042a2:	f000 fc6d 	bl	8004b80 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80042a6:	bf00      	nop
 80042a8:	3728      	adds	r7, #40	@ 0x28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40013000 	.word	0x40013000
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40020000 	.word	0x40020000

080042bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08e      	sub	sp, #56	@ 0x38
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	609a      	str	r2, [r3, #8]
 80042d0:	60da      	str	r2, [r3, #12]
 80042d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a53      	ldr	r2, [pc, #332]	@ (8004428 <HAL_UART_MspInit+0x16c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d134      	bne.n	8004348 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80042de:	2300      	movs	r3, #0
 80042e0:	623b      	str	r3, [r7, #32]
 80042e2:	4b52      	ldr	r3, [pc, #328]	@ (800442c <HAL_UART_MspInit+0x170>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	4a51      	ldr	r2, [pc, #324]	@ (800442c <HAL_UART_MspInit+0x170>)
 80042e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ee:	4b4f      	ldr	r3, [pc, #316]	@ (800442c <HAL_UART_MspInit+0x170>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042f6:	623b      	str	r3, [r7, #32]
 80042f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	4b4b      	ldr	r3, [pc, #300]	@ (800442c <HAL_UART_MspInit+0x170>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	4a4a      	ldr	r2, [pc, #296]	@ (800442c <HAL_UART_MspInit+0x170>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	6313      	str	r3, [r2, #48]	@ 0x30
 800430a:	4b48      	ldr	r3, [pc, #288]	@ (800442c <HAL_UART_MspInit+0x170>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004316:	2303      	movs	r3, #3
 8004318:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431a:	2302      	movs	r3, #2
 800431c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431e:	2300      	movs	r3, #0
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004322:	2303      	movs	r3, #3
 8004324:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004326:	2308      	movs	r3, #8
 8004328:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800432e:	4619      	mov	r1, r3
 8004330:	483f      	ldr	r0, [pc, #252]	@ (8004430 <HAL_UART_MspInit+0x174>)
 8004332:	f000 fc25 	bl	8004b80 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004336:	2200      	movs	r2, #0
 8004338:	2100      	movs	r1, #0
 800433a:	2034      	movs	r0, #52	@ 0x34
 800433c:	f000 fb64 	bl	8004a08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004340:	2034      	movs	r0, #52	@ 0x34
 8004342:	f000 fb7d 	bl	8004a40 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8004346:	e06a      	b.n	800441e <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a39      	ldr	r2, [pc, #228]	@ (8004434 <HAL_UART_MspInit+0x178>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d12c      	bne.n	80043ac <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004352:	2300      	movs	r3, #0
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	4b35      	ldr	r3, [pc, #212]	@ (800442c <HAL_UART_MspInit+0x170>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435a:	4a34      	ldr	r2, [pc, #208]	@ (800442c <HAL_UART_MspInit+0x170>)
 800435c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004360:	6413      	str	r3, [r2, #64]	@ 0x40
 8004362:	4b32      	ldr	r3, [pc, #200]	@ (800442c <HAL_UART_MspInit+0x170>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436a:	61bb      	str	r3, [r7, #24]
 800436c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	4b2e      	ldr	r3, [pc, #184]	@ (800442c <HAL_UART_MspInit+0x170>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004376:	4a2d      	ldr	r2, [pc, #180]	@ (800442c <HAL_UART_MspInit+0x170>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	6313      	str	r3, [r2, #48]	@ 0x30
 800437e:	4b2b      	ldr	r3, [pc, #172]	@ (800442c <HAL_UART_MspInit+0x170>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800438a:	230c      	movs	r3, #12
 800438c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438e:	2302      	movs	r3, #2
 8004390:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004392:	2300      	movs	r3, #0
 8004394:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004396:	2303      	movs	r3, #3
 8004398:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800439a:	2307      	movs	r3, #7
 800439c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800439e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043a2:	4619      	mov	r1, r3
 80043a4:	4822      	ldr	r0, [pc, #136]	@ (8004430 <HAL_UART_MspInit+0x174>)
 80043a6:	f000 fbeb 	bl	8004b80 <HAL_GPIO_Init>
}
 80043aa:	e038      	b.n	800441e <HAL_UART_MspInit+0x162>
  else if(huart->Instance==USART6)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a21      	ldr	r2, [pc, #132]	@ (8004438 <HAL_UART_MspInit+0x17c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d133      	bne.n	800441e <HAL_UART_MspInit+0x162>
    __HAL_RCC_USART6_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	4b1c      	ldr	r3, [pc, #112]	@ (800442c <HAL_UART_MspInit+0x170>)
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	4a1b      	ldr	r2, [pc, #108]	@ (800442c <HAL_UART_MspInit+0x170>)
 80043c0:	f043 0320 	orr.w	r3, r3, #32
 80043c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80043c6:	4b19      	ldr	r3, [pc, #100]	@ (800442c <HAL_UART_MspInit+0x170>)
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	f003 0320 	and.w	r3, r3, #32
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	4b15      	ldr	r3, [pc, #84]	@ (800442c <HAL_UART_MspInit+0x170>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	4a14      	ldr	r2, [pc, #80]	@ (800442c <HAL_UART_MspInit+0x170>)
 80043dc:	f043 0304 	orr.w	r3, r3, #4
 80043e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043e2:	4b12      	ldr	r3, [pc, #72]	@ (800442c <HAL_UART_MspInit+0x170>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043ee:	23c0      	movs	r3, #192	@ 0xc0
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f2:	2302      	movs	r3, #2
 80043f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043fa:	2303      	movs	r3, #3
 80043fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80043fe:	2308      	movs	r3, #8
 8004400:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004406:	4619      	mov	r1, r3
 8004408:	480c      	ldr	r0, [pc, #48]	@ (800443c <HAL_UART_MspInit+0x180>)
 800440a:	f000 fbb9 	bl	8004b80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800440e:	2200      	movs	r2, #0
 8004410:	2100      	movs	r1, #0
 8004412:	2047      	movs	r0, #71	@ 0x47
 8004414:	f000 faf8 	bl	8004a08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004418:	2047      	movs	r0, #71	@ 0x47
 800441a:	f000 fb11 	bl	8004a40 <HAL_NVIC_EnableIRQ>
}
 800441e:	bf00      	nop
 8004420:	3738      	adds	r7, #56	@ 0x38
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40004c00 	.word	0x40004c00
 800442c:	40023800 	.word	0x40023800
 8004430:	40020000 	.word	0x40020000
 8004434:	40004400 	.word	0x40004400
 8004438:	40011400 	.word	0x40011400
 800443c:	40020800 	.word	0x40020800

08004440 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08c      	sub	sp, #48	@ 0x30
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004450:	2300      	movs	r3, #0
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	4b2f      	ldr	r3, [pc, #188]	@ (8004514 <HAL_InitTick+0xd4>)
 8004456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004458:	4a2e      	ldr	r2, [pc, #184]	@ (8004514 <HAL_InitTick+0xd4>)
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004460:	4b2c      	ldr	r3, [pc, #176]	@ (8004514 <HAL_InitTick+0xd4>)
 8004462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800446c:	f107 020c 	add.w	r2, r7, #12
 8004470:	f107 0310 	add.w	r3, r7, #16
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f002 ffae 	bl	80073d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800447c:	f002 ff98 	bl	80073b0 <HAL_RCC_GetPCLK2Freq>
 8004480:	4603      	mov	r3, r0
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004488:	4a23      	ldr	r2, [pc, #140]	@ (8004518 <HAL_InitTick+0xd8>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	0c9b      	lsrs	r3, r3, #18
 8004490:	3b01      	subs	r3, #1
 8004492:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004494:	4b21      	ldr	r3, [pc, #132]	@ (800451c <HAL_InitTick+0xdc>)
 8004496:	4a22      	ldr	r2, [pc, #136]	@ (8004520 <HAL_InitTick+0xe0>)
 8004498:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800449a:	4b20      	ldr	r3, [pc, #128]	@ (800451c <HAL_InitTick+0xdc>)
 800449c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80044a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80044a2:	4a1e      	ldr	r2, [pc, #120]	@ (800451c <HAL_InitTick+0xdc>)
 80044a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80044a8:	4b1c      	ldr	r3, [pc, #112]	@ (800451c <HAL_InitTick+0xdc>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ae:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <HAL_InitTick+0xdc>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044b4:	4b19      	ldr	r3, [pc, #100]	@ (800451c <HAL_InitTick+0xdc>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80044ba:	4818      	ldr	r0, [pc, #96]	@ (800451c <HAL_InitTick+0xdc>)
 80044bc:	f003 f862 	bl	8007584 <HAL_TIM_Base_Init>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80044c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d11b      	bne.n	8004506 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80044ce:	4813      	ldr	r0, [pc, #76]	@ (800451c <HAL_InitTick+0xdc>)
 80044d0:	f003 f8b2 	bl	8007638 <HAL_TIM_Base_Start_IT>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80044da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d111      	bne.n	8004506 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80044e2:	2019      	movs	r0, #25
 80044e4:	f000 faac 	bl	8004a40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	d808      	bhi.n	8004500 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80044ee:	2200      	movs	r2, #0
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	2019      	movs	r0, #25
 80044f4:	f000 fa88 	bl	8004a08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80044f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004524 <HAL_InitTick+0xe4>)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	e002      	b.n	8004506 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004506:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800450a:	4618      	mov	r0, r3
 800450c:	3730      	adds	r7, #48	@ 0x30
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40023800 	.word	0x40023800
 8004518:	431bde83 	.word	0x431bde83
 800451c:	200007a0 	.word	0x200007a0
 8004520:	40010000 	.word	0x40010000
 8004524:	200000a0 	.word	0x200000a0

08004528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800452c:	f002 ff86 	bl	800743c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004530:	bf00      	nop
 8004532:	e7fd      	b.n	8004530 <NMI_Handler+0x8>

08004534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004538:	bf00      	nop
 800453a:	e7fd      	b.n	8004538 <HardFault_Handler+0x4>

0800453c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004540:	bf00      	nop
 8004542:	e7fd      	b.n	8004540 <MemManage_Handler+0x4>

08004544 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004548:	bf00      	nop
 800454a:	e7fd      	b.n	8004548 <BusFault_Handler+0x4>

0800454c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004550:	bf00      	nop
 8004552:	e7fd      	b.n	8004550 <UsageFault_Handler+0x4>

08004554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004558:	bf00      	nop
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004562:	b480      	push	{r7}
 8004564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800457e:	b480      	push	{r7}
 8004580:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004590:	4802      	ldr	r0, [pc, #8]	@ (800459c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004592:	f003 f8c1 	bl	8007718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	200007a0 	.word	0x200007a0

080045a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80045a4:	4802      	ldr	r0, [pc, #8]	@ (80045b0 <UART4_IRQHandler+0x10>)
 80045a6:	f003 fb89 	bl	8007cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	2000038c 	.word	0x2000038c

080045b4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80045b8:	4802      	ldr	r0, [pc, #8]	@ (80045c4 <USART6_IRQHandler+0x10>)
 80045ba:	f003 fb7f 	bl	8007cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	2000041c 	.word	0x2000041c

080045c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return 1;
 80045cc:	2301      	movs	r3, #1
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <_kill>:

int _kill(int pid, int sig)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80045e2:	f005 f8cd 	bl	8009780 <__errno>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2216      	movs	r2, #22
 80045ea:	601a      	str	r2, [r3, #0]
  return -1;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <_exit>:

void _exit (int status)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004600:	f04f 31ff 	mov.w	r1, #4294967295
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ffe7 	bl	80045d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800460a:	bf00      	nop
 800460c:	e7fd      	b.n	800460a <_exit+0x12>

0800460e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e00a      	b.n	8004636 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004620:	f3af 8000 	nop.w
 8004624:	4601      	mov	r1, r0
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	60ba      	str	r2, [r7, #8]
 800462c:	b2ca      	uxtb	r2, r1
 800462e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	3301      	adds	r3, #1
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	dbf0      	blt.n	8004620 <_read+0x12>
  }

  return len;
 800463e:	687b      	ldr	r3, [r7, #4]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	e009      	b.n	800466e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	60ba      	str	r2, [r7, #8]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	3301      	adds	r3, #1
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	429a      	cmp	r2, r3
 8004674:	dbf1      	blt.n	800465a <_write+0x12>
  }
  return len;
 8004676:	687b      	ldr	r3, [r7, #4]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <_close>:

int _close(int file)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046a8:	605a      	str	r2, [r3, #4]
  return 0;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <_isatty>:

int _isatty(int file)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046c0:	2301      	movs	r3, #1
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b085      	sub	sp, #20
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046f0:	4a14      	ldr	r2, [pc, #80]	@ (8004744 <_sbrk+0x5c>)
 80046f2:	4b15      	ldr	r3, [pc, #84]	@ (8004748 <_sbrk+0x60>)
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046fc:	4b13      	ldr	r3, [pc, #76]	@ (800474c <_sbrk+0x64>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d102      	bne.n	800470a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004704:	4b11      	ldr	r3, [pc, #68]	@ (800474c <_sbrk+0x64>)
 8004706:	4a12      	ldr	r2, [pc, #72]	@ (8004750 <_sbrk+0x68>)
 8004708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800470a:	4b10      	ldr	r3, [pc, #64]	@ (800474c <_sbrk+0x64>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4413      	add	r3, r2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	429a      	cmp	r2, r3
 8004716:	d207      	bcs.n	8004728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004718:	f005 f832 	bl	8009780 <__errno>
 800471c:	4603      	mov	r3, r0
 800471e:	220c      	movs	r2, #12
 8004720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004722:	f04f 33ff 	mov.w	r3, #4294967295
 8004726:	e009      	b.n	800473c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004728:	4b08      	ldr	r3, [pc, #32]	@ (800474c <_sbrk+0x64>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800472e:	4b07      	ldr	r3, [pc, #28]	@ (800474c <_sbrk+0x64>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4413      	add	r3, r2
 8004736:	4a05      	ldr	r2, [pc, #20]	@ (800474c <_sbrk+0x64>)
 8004738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800473a:	68fb      	ldr	r3, [r7, #12]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20020000 	.word	0x20020000
 8004748:	00000400 	.word	0x00000400
 800474c:	200007e8 	.word	0x200007e8
 8004750:	20000940 	.word	0x20000940

08004754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004758:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <SystemInit+0x20>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475e:	4a05      	ldr	r2, [pc, #20]	@ (8004774 <SystemInit+0x20>)
 8004760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004768:	bf00      	nop
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	e000ed00 	.word	0xe000ed00

08004778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004778:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80047b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800477c:	f7ff ffea 	bl	8004754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004780:	480c      	ldr	r0, [pc, #48]	@ (80047b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004782:	490d      	ldr	r1, [pc, #52]	@ (80047b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004784:	4a0d      	ldr	r2, [pc, #52]	@ (80047bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004788:	e002      	b.n	8004790 <LoopCopyDataInit>

0800478a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800478a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800478c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800478e:	3304      	adds	r3, #4

08004790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004794:	d3f9      	bcc.n	800478a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004796:	4a0a      	ldr	r2, [pc, #40]	@ (80047c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004798:	4c0a      	ldr	r4, [pc, #40]	@ (80047c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800479a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800479c:	e001      	b.n	80047a2 <LoopFillZerobss>

0800479e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800479e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047a0:	3204      	adds	r2, #4

080047a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047a4:	d3fb      	bcc.n	800479e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047a6:	f004 fff1 	bl	800978c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047aa:	f7fd fbe5 	bl	8001f78 <main>
  bx  lr    
 80047ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80047b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80047b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047b8:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 80047bc:	0800e678 	.word	0x0800e678
  ldr r2, =_sbss
 80047c0:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 80047c4:	2000093c 	.word	0x2000093c

080047c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047c8:	e7fe      	b.n	80047c8 <ADC_IRQHandler>
	...

080047cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047d0:	4b0e      	ldr	r3, [pc, #56]	@ (800480c <HAL_Init+0x40>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a0d      	ldr	r2, [pc, #52]	@ (800480c <HAL_Init+0x40>)
 80047d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047dc:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <HAL_Init+0x40>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a0a      	ldr	r2, [pc, #40]	@ (800480c <HAL_Init+0x40>)
 80047e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047e8:	4b08      	ldr	r3, [pc, #32]	@ (800480c <HAL_Init+0x40>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a07      	ldr	r2, [pc, #28]	@ (800480c <HAL_Init+0x40>)
 80047ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047f4:	2003      	movs	r0, #3
 80047f6:	f000 f8fc 	bl	80049f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047fa:	200f      	movs	r0, #15
 80047fc:	f7ff fe20 	bl	8004440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004800:	f7ff fc70 	bl	80040e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40023c00 	.word	0x40023c00

08004810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004814:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <HAL_IncTick+0x20>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	4b06      	ldr	r3, [pc, #24]	@ (8004834 <HAL_IncTick+0x24>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4413      	add	r3, r2
 8004820:	4a04      	ldr	r2, [pc, #16]	@ (8004834 <HAL_IncTick+0x24>)
 8004822:	6013      	str	r3, [r2, #0]
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	200000a4 	.word	0x200000a4
 8004834:	200007ec 	.word	0x200007ec

08004838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return uwTick;
 800483c:	4b03      	ldr	r3, [pc, #12]	@ (800484c <HAL_GetTick+0x14>)
 800483e:	681b      	ldr	r3, [r3, #0]
}
 8004840:	4618      	mov	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	200007ec 	.word	0x200007ec

08004850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004858:	f7ff ffee 	bl	8004838 <HAL_GetTick>
 800485c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d005      	beq.n	8004876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800486a:	4b0a      	ldr	r3, [pc, #40]	@ (8004894 <HAL_Delay+0x44>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4413      	add	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004876:	bf00      	nop
 8004878:	f7ff ffde 	bl	8004838 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	429a      	cmp	r2, r3
 8004886:	d8f7      	bhi.n	8004878 <HAL_Delay+0x28>
  {
  }
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	200000a4 	.word	0x200000a4

08004898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048a8:	4b0c      	ldr	r3, [pc, #48]	@ (80048dc <__NVIC_SetPriorityGrouping+0x44>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048b4:	4013      	ands	r3, r2
 80048b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ca:	4a04      	ldr	r2, [pc, #16]	@ (80048dc <__NVIC_SetPriorityGrouping+0x44>)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	60d3      	str	r3, [r2, #12]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	e000ed00 	.word	0xe000ed00

080048e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048e4:	4b04      	ldr	r3, [pc, #16]	@ (80048f8 <__NVIC_GetPriorityGrouping+0x18>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	0a1b      	lsrs	r3, r3, #8
 80048ea:	f003 0307 	and.w	r3, r3, #7
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800490a:	2b00      	cmp	r3, #0
 800490c:	db0b      	blt.n	8004926 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	f003 021f 	and.w	r2, r3, #31
 8004914:	4907      	ldr	r1, [pc, #28]	@ (8004934 <__NVIC_EnableIRQ+0x38>)
 8004916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	2001      	movs	r0, #1
 800491e:	fa00 f202 	lsl.w	r2, r0, r2
 8004922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	e000e100 	.word	0xe000e100

08004938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	6039      	str	r1, [r7, #0]
 8004942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004948:	2b00      	cmp	r3, #0
 800494a:	db0a      	blt.n	8004962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	b2da      	uxtb	r2, r3
 8004950:	490c      	ldr	r1, [pc, #48]	@ (8004984 <__NVIC_SetPriority+0x4c>)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	0112      	lsls	r2, r2, #4
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	440b      	add	r3, r1
 800495c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004960:	e00a      	b.n	8004978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	b2da      	uxtb	r2, r3
 8004966:	4908      	ldr	r1, [pc, #32]	@ (8004988 <__NVIC_SetPriority+0x50>)
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	3b04      	subs	r3, #4
 8004970:	0112      	lsls	r2, r2, #4
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	440b      	add	r3, r1
 8004976:	761a      	strb	r2, [r3, #24]
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	e000e100 	.word	0xe000e100
 8004988:	e000ed00 	.word	0xe000ed00

0800498c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800498c:	b480      	push	{r7}
 800498e:	b089      	sub	sp, #36	@ 0x24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f1c3 0307 	rsb	r3, r3, #7
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	bf28      	it	cs
 80049aa:	2304      	movcs	r3, #4
 80049ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	3304      	adds	r3, #4
 80049b2:	2b06      	cmp	r3, #6
 80049b4:	d902      	bls.n	80049bc <NVIC_EncodePriority+0x30>
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	3b03      	subs	r3, #3
 80049ba:	e000      	b.n	80049be <NVIC_EncodePriority+0x32>
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c0:	f04f 32ff 	mov.w	r2, #4294967295
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43da      	mvns	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	401a      	ands	r2, r3
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049d4:	f04f 31ff 	mov.w	r1, #4294967295
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	fa01 f303 	lsl.w	r3, r1, r3
 80049de:	43d9      	mvns	r1, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e4:	4313      	orrs	r3, r2
         );
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3724      	adds	r7, #36	@ 0x24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff ff4c 	bl	8004898 <__NVIC_SetPriorityGrouping>
}
 8004a00:	bf00      	nop
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a1a:	f7ff ff61 	bl	80048e0 <__NVIC_GetPriorityGrouping>
 8004a1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	6978      	ldr	r0, [r7, #20]
 8004a26:	f7ff ffb1 	bl	800498c <NVIC_EncodePriority>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff ff80 	bl	8004938 <__NVIC_SetPriority>
}
 8004a38:	bf00      	nop
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff ff54 	bl	80048fc <__NVIC_EnableIRQ>
}
 8004a54:	bf00      	nop
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a6a:	f7ff fee5 	bl	8004838 <HAL_GetTick>
 8004a6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d008      	beq.n	8004a8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2280      	movs	r2, #128	@ 0x80
 8004a80:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e052      	b.n	8004b34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0216 	bic.w	r2, r2, #22
 8004a9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004aac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <HAL_DMA_Abort+0x62>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0208 	bic.w	r2, r2, #8
 8004acc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0201 	bic.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ade:	e013      	b.n	8004b08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ae0:	f7ff feaa 	bl	8004838 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b05      	cmp	r3, #5
 8004aec:	d90c      	bls.n	8004b08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2203      	movs	r2, #3
 8004af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e015      	b.n	8004b34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e4      	bne.n	8004ae0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1a:	223f      	movs	r2, #63	@ 0x3f
 8004b1c:	409a      	lsls	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d004      	beq.n	8004b5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2280      	movs	r2, #128	@ 0x80
 8004b54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e00c      	b.n	8004b74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2205      	movs	r2, #5
 8004b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0201 	bic.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b089      	sub	sp, #36	@ 0x24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	e16b      	b.n	8004e74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4013      	ands	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	f040 815a 	bne.w	8004e6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d005      	beq.n	8004bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d130      	bne.n	8004c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	2203      	movs	r2, #3
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4013      	ands	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	69ba      	ldr	r2, [r7, #24]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c08:	2201      	movs	r2, #1
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	091b      	lsrs	r3, r3, #4
 8004c1e:	f003 0201 	and.w	r2, r3, #1
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 0303 	and.w	r3, r3, #3
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d017      	beq.n	8004c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4013      	ands	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d123      	bne.n	8004cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	08da      	lsrs	r2, r3, #3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3208      	adds	r2, #8
 8004c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	220f      	movs	r2, #15
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	08da      	lsrs	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3208      	adds	r2, #8
 8004cbe:	69b9      	ldr	r1, [r7, #24]
 8004cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	2203      	movs	r2, #3
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 0203 	and.w	r2, r3, #3
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80b4 	beq.w	8004e6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	4b60      	ldr	r3, [pc, #384]	@ (8004e8c <HAL_GPIO_Init+0x30c>)
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0e:	4a5f      	ldr	r2, [pc, #380]	@ (8004e8c <HAL_GPIO_Init+0x30c>)
 8004d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d16:	4b5d      	ldr	r3, [pc, #372]	@ (8004e8c <HAL_GPIO_Init+0x30c>)
 8004d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d22:	4a5b      	ldr	r2, [pc, #364]	@ (8004e90 <HAL_GPIO_Init+0x310>)
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	089b      	lsrs	r3, r3, #2
 8004d28:	3302      	adds	r3, #2
 8004d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	220f      	movs	r2, #15
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4013      	ands	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a52      	ldr	r2, [pc, #328]	@ (8004e94 <HAL_GPIO_Init+0x314>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d02b      	beq.n	8004da6 <HAL_GPIO_Init+0x226>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a51      	ldr	r2, [pc, #324]	@ (8004e98 <HAL_GPIO_Init+0x318>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d025      	beq.n	8004da2 <HAL_GPIO_Init+0x222>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a50      	ldr	r2, [pc, #320]	@ (8004e9c <HAL_GPIO_Init+0x31c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01f      	beq.n	8004d9e <HAL_GPIO_Init+0x21e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a4f      	ldr	r2, [pc, #316]	@ (8004ea0 <HAL_GPIO_Init+0x320>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d019      	beq.n	8004d9a <HAL_GPIO_Init+0x21a>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a4e      	ldr	r2, [pc, #312]	@ (8004ea4 <HAL_GPIO_Init+0x324>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <HAL_GPIO_Init+0x216>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a4d      	ldr	r2, [pc, #308]	@ (8004ea8 <HAL_GPIO_Init+0x328>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00d      	beq.n	8004d92 <HAL_GPIO_Init+0x212>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a4c      	ldr	r2, [pc, #304]	@ (8004eac <HAL_GPIO_Init+0x32c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d007      	beq.n	8004d8e <HAL_GPIO_Init+0x20e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a4b      	ldr	r2, [pc, #300]	@ (8004eb0 <HAL_GPIO_Init+0x330>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d101      	bne.n	8004d8a <HAL_GPIO_Init+0x20a>
 8004d86:	2307      	movs	r3, #7
 8004d88:	e00e      	b.n	8004da8 <HAL_GPIO_Init+0x228>
 8004d8a:	2308      	movs	r3, #8
 8004d8c:	e00c      	b.n	8004da8 <HAL_GPIO_Init+0x228>
 8004d8e:	2306      	movs	r3, #6
 8004d90:	e00a      	b.n	8004da8 <HAL_GPIO_Init+0x228>
 8004d92:	2305      	movs	r3, #5
 8004d94:	e008      	b.n	8004da8 <HAL_GPIO_Init+0x228>
 8004d96:	2304      	movs	r3, #4
 8004d98:	e006      	b.n	8004da8 <HAL_GPIO_Init+0x228>
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e004      	b.n	8004da8 <HAL_GPIO_Init+0x228>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e002      	b.n	8004da8 <HAL_GPIO_Init+0x228>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <HAL_GPIO_Init+0x228>
 8004da6:	2300      	movs	r3, #0
 8004da8:	69fa      	ldr	r2, [r7, #28]
 8004daa:	f002 0203 	and.w	r2, r2, #3
 8004dae:	0092      	lsls	r2, r2, #2
 8004db0:	4093      	lsls	r3, r2
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004db8:	4935      	ldr	r1, [pc, #212]	@ (8004e90 <HAL_GPIO_Init+0x310>)
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	089b      	lsrs	r3, r3, #2
 8004dbe:	3302      	adds	r3, #2
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb4 <HAL_GPIO_Init+0x334>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004dea:	4a32      	ldr	r2, [pc, #200]	@ (8004eb4 <HAL_GPIO_Init+0x334>)
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004df0:	4b30      	ldr	r3, [pc, #192]	@ (8004eb4 <HAL_GPIO_Init+0x334>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e14:	4a27      	ldr	r2, [pc, #156]	@ (8004eb4 <HAL_GPIO_Init+0x334>)
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e1a:	4b26      	ldr	r3, [pc, #152]	@ (8004eb4 <HAL_GPIO_Init+0x334>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	43db      	mvns	r3, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4013      	ands	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb4 <HAL_GPIO_Init+0x334>)
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e44:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb4 <HAL_GPIO_Init+0x334>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4013      	ands	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e68:	4a12      	ldr	r2, [pc, #72]	@ (8004eb4 <HAL_GPIO_Init+0x334>)
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	3301      	adds	r3, #1
 8004e72:	61fb      	str	r3, [r7, #28]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b0f      	cmp	r3, #15
 8004e78:	f67f ae90 	bls.w	8004b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	3724      	adds	r7, #36	@ 0x24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	40013800 	.word	0x40013800
 8004e94:	40020000 	.word	0x40020000
 8004e98:	40020400 	.word	0x40020400
 8004e9c:	40020800 	.word	0x40020800
 8004ea0:	40020c00 	.word	0x40020c00
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40021400 	.word	0x40021400
 8004eac:	40021800 	.word	0x40021800
 8004eb0:	40021c00 	.word	0x40021c00
 8004eb4:	40013c00 	.word	0x40013c00

08004eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ec8:	787b      	ldrb	r3, [r7, #1]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ece:	887a      	ldrh	r2, [r7, #2]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ed4:	e003      	b.n	8004ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ed6:	887b      	ldrh	r3, [r7, #2]
 8004ed8:	041a      	lsls	r2, r3, #16
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	619a      	str	r2, [r3, #24]
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e12b      	b.n	8005156 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff f90e 	bl	8004134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2224      	movs	r2, #36	@ 0x24
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0201 	bic.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f50:	f002 fa1a 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 8004f54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	4a81      	ldr	r2, [pc, #516]	@ (8005160 <HAL_I2C_Init+0x274>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d807      	bhi.n	8004f70 <HAL_I2C_Init+0x84>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a80      	ldr	r2, [pc, #512]	@ (8005164 <HAL_I2C_Init+0x278>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	bf94      	ite	ls
 8004f68:	2301      	movls	r3, #1
 8004f6a:	2300      	movhi	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	e006      	b.n	8004f7e <HAL_I2C_Init+0x92>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4a7d      	ldr	r2, [pc, #500]	@ (8005168 <HAL_I2C_Init+0x27c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	bf94      	ite	ls
 8004f78:	2301      	movls	r3, #1
 8004f7a:	2300      	movhi	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e0e7      	b.n	8005156 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4a78      	ldr	r2, [pc, #480]	@ (800516c <HAL_I2C_Init+0x280>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	0c9b      	lsrs	r3, r3, #18
 8004f90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	4a6a      	ldr	r2, [pc, #424]	@ (8005160 <HAL_I2C_Init+0x274>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d802      	bhi.n	8004fc0 <HAL_I2C_Init+0xd4>
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	e009      	b.n	8004fd4 <HAL_I2C_Init+0xe8>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004fc6:	fb02 f303 	mul.w	r3, r2, r3
 8004fca:	4a69      	ldr	r2, [pc, #420]	@ (8005170 <HAL_I2C_Init+0x284>)
 8004fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd0:	099b      	lsrs	r3, r3, #6
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004fe6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	495c      	ldr	r1, [pc, #368]	@ (8005160 <HAL_I2C_Init+0x274>)
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	d819      	bhi.n	8005028 <HAL_I2C_Init+0x13c>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	1e59      	subs	r1, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005002:	1c59      	adds	r1, r3, #1
 8005004:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005008:	400b      	ands	r3, r1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_I2C_Init+0x138>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1e59      	subs	r1, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	fbb1 f3f3 	udiv	r3, r1, r3
 800501c:	3301      	adds	r3, #1
 800501e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005022:	e051      	b.n	80050c8 <HAL_I2C_Init+0x1dc>
 8005024:	2304      	movs	r3, #4
 8005026:	e04f      	b.n	80050c8 <HAL_I2C_Init+0x1dc>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d111      	bne.n	8005054 <HAL_I2C_Init+0x168>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	1e58      	subs	r0, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6859      	ldr	r1, [r3, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	440b      	add	r3, r1
 800503e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005042:	3301      	adds	r3, #1
 8005044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005048:	2b00      	cmp	r3, #0
 800504a:	bf0c      	ite	eq
 800504c:	2301      	moveq	r3, #1
 800504e:	2300      	movne	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	e012      	b.n	800507a <HAL_I2C_Init+0x18e>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	1e58      	subs	r0, r3, #1
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6859      	ldr	r1, [r3, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	0099      	lsls	r1, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	fbb0 f3f3 	udiv	r3, r0, r3
 800506a:	3301      	adds	r3, #1
 800506c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005070:	2b00      	cmp	r3, #0
 8005072:	bf0c      	ite	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	2300      	movne	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_I2C_Init+0x196>
 800507e:	2301      	movs	r3, #1
 8005080:	e022      	b.n	80050c8 <HAL_I2C_Init+0x1dc>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10e      	bne.n	80050a8 <HAL_I2C_Init+0x1bc>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	1e58      	subs	r0, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6859      	ldr	r1, [r3, #4]
 8005092:	460b      	mov	r3, r1
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	440b      	add	r3, r1
 8005098:	fbb0 f3f3 	udiv	r3, r0, r3
 800509c:	3301      	adds	r3, #1
 800509e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050a6:	e00f      	b.n	80050c8 <HAL_I2C_Init+0x1dc>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	1e58      	subs	r0, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6859      	ldr	r1, [r3, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	0099      	lsls	r1, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80050be:	3301      	adds	r3, #1
 80050c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	6809      	ldr	r1, [r1, #0]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	69da      	ldr	r2, [r3, #28]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80050f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6911      	ldr	r1, [r2, #16]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68d2      	ldr	r2, [r2, #12]
 8005102:	4311      	orrs	r1, r2
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	430b      	orrs	r3, r1
 800510a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695a      	ldr	r2, [r3, #20]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	000186a0 	.word	0x000186a0
 8005164:	001e847f 	.word	0x001e847f
 8005168:	003d08ff 	.word	0x003d08ff
 800516c:	431bde83 	.word	0x431bde83
 8005170:	10624dd3 	.word	0x10624dd3

08005174 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af02      	add	r7, sp, #8
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	461a      	mov	r2, r3
 8005180:	460b      	mov	r3, r1
 8005182:	817b      	strh	r3, [r7, #10]
 8005184:	4613      	mov	r3, r2
 8005186:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005188:	f7ff fb56 	bl	8004838 <HAL_GetTick>
 800518c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b20      	cmp	r3, #32
 8005198:	f040 80e0 	bne.w	800535c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	2319      	movs	r3, #25
 80051a2:	2201      	movs	r2, #1
 80051a4:	4970      	ldr	r1, [pc, #448]	@ (8005368 <HAL_I2C_Master_Transmit+0x1f4>)
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f001 fa3c 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80051b2:	2302      	movs	r3, #2
 80051b4:	e0d3      	b.n	800535e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_I2C_Master_Transmit+0x50>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e0cc      	b.n	800535e <HAL_I2C_Master_Transmit+0x1ea>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d007      	beq.n	80051ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0201 	orr.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2221      	movs	r2, #33	@ 0x21
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2210      	movs	r2, #16
 8005206:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	893a      	ldrh	r2, [r7, #8]
 800521a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4a50      	ldr	r2, [pc, #320]	@ (800536c <HAL_I2C_Master_Transmit+0x1f8>)
 800522a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800522c:	8979      	ldrh	r1, [r7, #10]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	6a3a      	ldr	r2, [r7, #32]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 ff28 	bl	8006088 <I2C_MasterRequestWrite>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e08d      	b.n	800535e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005258:	e066      	b.n	8005328 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	6a39      	ldr	r1, [r7, #32]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f001 fafa 	bl	8006858 <I2C_WaitOnTXEFlagUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00d      	beq.n	8005286 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526e:	2b04      	cmp	r3, #4
 8005270:	d107      	bne.n	8005282 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005280:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e06b      	b.n	800535e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528a:	781a      	ldrb	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d11b      	bne.n	80052fc <HAL_I2C_Master_Transmit+0x188>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d017      	beq.n	80052fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d0:	781a      	ldrb	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	6a39      	ldr	r1, [r7, #32]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f001 faf1 	bl	80068e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00d      	beq.n	8005328 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005310:	2b04      	cmp	r3, #4
 8005312:	d107      	bne.n	8005324 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005322:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e01a      	b.n	800535e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800532c:	2b00      	cmp	r3, #0
 800532e:	d194      	bne.n	800525a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800533e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005358:	2300      	movs	r3, #0
 800535a:	e000      	b.n	800535e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800535c:	2302      	movs	r3, #2
  }
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	00100002 	.word	0x00100002
 800536c:	ffff0000 	.word	0xffff0000

08005370 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08c      	sub	sp, #48	@ 0x30
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	607a      	str	r2, [r7, #4]
 800537a:	461a      	mov	r2, r3
 800537c:	460b      	mov	r3, r1
 800537e:	817b      	strh	r3, [r7, #10]
 8005380:	4613      	mov	r3, r2
 8005382:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005384:	f7ff fa58 	bl	8004838 <HAL_GetTick>
 8005388:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b20      	cmp	r3, #32
 8005394:	f040 8217 	bne.w	80057c6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	2319      	movs	r3, #25
 800539e:	2201      	movs	r2, #1
 80053a0:	497c      	ldr	r1, [pc, #496]	@ (8005594 <HAL_I2C_Master_Receive+0x224>)
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f001 f93e 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80053ae:	2302      	movs	r3, #2
 80053b0:	e20a      	b.n	80057c8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_I2C_Master_Receive+0x50>
 80053bc:	2302      	movs	r3, #2
 80053be:	e203      	b.n	80057c8 <HAL_I2C_Master_Receive+0x458>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d007      	beq.n	80053e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0201 	orr.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2222      	movs	r2, #34	@ 0x22
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2210      	movs	r2, #16
 8005402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	893a      	ldrh	r2, [r7, #8]
 8005416:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4a5c      	ldr	r2, [pc, #368]	@ (8005598 <HAL_I2C_Master_Receive+0x228>)
 8005426:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005428:	8979      	ldrh	r1, [r7, #10]
 800542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 feac 	bl	800618c <I2C_MasterRequestRead>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e1c4      	b.n	80057c8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005442:	2b00      	cmp	r3, #0
 8005444:	d113      	bne.n	800546e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005446:	2300      	movs	r3, #0
 8005448:	623b      	str	r3, [r7, #32]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	623b      	str	r3, [r7, #32]
 800545a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	e198      	b.n	80057a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005472:	2b01      	cmp	r3, #1
 8005474:	d11b      	bne.n	80054ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005484:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	61fb      	str	r3, [r7, #28]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	e178      	b.n	80057a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d11b      	bne.n	80054ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d6:	2300      	movs	r3, #0
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	e158      	b.n	80057a0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005514:	e144      	b.n	80057a0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800551a:	2b03      	cmp	r3, #3
 800551c:	f200 80f1 	bhi.w	8005702 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005524:	2b01      	cmp	r3, #1
 8005526:	d123      	bne.n	8005570 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800552a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f001 fa23 	bl	8006978 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e145      	b.n	80057c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800556e:	e117      	b.n	80057a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005574:	2b02      	cmp	r3, #2
 8005576:	d14e      	bne.n	8005616 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557e:	2200      	movs	r2, #0
 8005580:	4906      	ldr	r1, [pc, #24]	@ (800559c <HAL_I2C_Master_Receive+0x22c>)
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f001 f84e 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e11a      	b.n	80057c8 <HAL_I2C_Master_Receive+0x458>
 8005592:	bf00      	nop
 8005594:	00100002 	.word	0x00100002
 8005598:	ffff0000 	.word	0xffff0000
 800559c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d8:	b29b      	uxth	r3, r3
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b01      	subs	r3, #1
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005614:	e0c4      	b.n	80057a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561c:	2200      	movs	r2, #0
 800561e:	496c      	ldr	r1, [pc, #432]	@ (80057d0 <HAL_I2C_Master_Receive+0x460>)
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 ffff 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0cb      	b.n	80057c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800563e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800565c:	3b01      	subs	r3, #1
 800565e:	b29a      	uxth	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005678:	2200      	movs	r2, #0
 800567a:	4955      	ldr	r1, [pc, #340]	@ (80057d0 <HAL_I2C_Master_Receive+0x460>)
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 ffd1 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e09d      	b.n	80057c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800569a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691a      	ldr	r2, [r3, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691a      	ldr	r2, [r3, #16]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005700:	e04e      	b.n	80057a0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005704:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f001 f936 	bl	8006978 <I2C_WaitOnRXNEFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e058      	b.n	80057c8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b04      	cmp	r3, #4
 8005754:	d124      	bne.n	80057a0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800575a:	2b03      	cmp	r3, #3
 800575c:	d107      	bne.n	800576e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800576c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691a      	ldr	r2, [r3, #16]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f47f aeb6 	bne.w	8005516 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	e000      	b.n	80057c8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80057c6:	2302      	movs	r3, #2
  }
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3728      	adds	r7, #40	@ 0x28
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	00010004 	.word	0x00010004

080057d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	4608      	mov	r0, r1
 80057de:	4611      	mov	r1, r2
 80057e0:	461a      	mov	r2, r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	817b      	strh	r3, [r7, #10]
 80057e6:	460b      	mov	r3, r1
 80057e8:	813b      	strh	r3, [r7, #8]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057ee:	f7ff f823 	bl	8004838 <HAL_GetTick>
 80057f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	f040 80d9 	bne.w	80059b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	2319      	movs	r3, #25
 8005808:	2201      	movs	r2, #1
 800580a:	496d      	ldr	r1, [pc, #436]	@ (80059c0 <HAL_I2C_Mem_Write+0x1ec>)
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 ff09 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005818:	2302      	movs	r3, #2
 800581a:	e0cc      	b.n	80059b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <HAL_I2C_Mem_Write+0x56>
 8005826:	2302      	movs	r3, #2
 8005828:	e0c5      	b.n	80059b6 <HAL_I2C_Mem_Write+0x1e2>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b01      	cmp	r3, #1
 800583e:	d007      	beq.n	8005850 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800585e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2221      	movs	r2, #33	@ 0x21
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2240      	movs	r2, #64	@ 0x40
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a3a      	ldr	r2, [r7, #32]
 800587a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005880:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4a4d      	ldr	r2, [pc, #308]	@ (80059c4 <HAL_I2C_Mem_Write+0x1f0>)
 8005890:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005892:	88f8      	ldrh	r0, [r7, #6]
 8005894:	893a      	ldrh	r2, [r7, #8]
 8005896:	8979      	ldrh	r1, [r7, #10]
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	9301      	str	r3, [sp, #4]
 800589c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	4603      	mov	r3, r0
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 fd40 	bl	8006328 <I2C_RequestMemoryWrite>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d052      	beq.n	8005954 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e081      	b.n	80059b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 ffce 	bl	8006858 <I2C_WaitOnTXEFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00d      	beq.n	80058de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	d107      	bne.n	80058da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e06b      	b.n	80059b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e2:	781a      	ldrb	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b04      	cmp	r3, #4
 800591a:	d11b      	bne.n	8005954 <HAL_I2C_Mem_Write+0x180>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005920:	2b00      	cmp	r3, #0
 8005922:	d017      	beq.n	8005954 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005928:	781a      	ldrb	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1aa      	bne.n	80058b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 ffc1 	bl	80068e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00d      	beq.n	8005988 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005970:	2b04      	cmp	r3, #4
 8005972:	d107      	bne.n	8005984 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005982:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e016      	b.n	80059b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	e000      	b.n	80059b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80059b4:	2302      	movs	r3, #2
  }
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	00100002 	.word	0x00100002
 80059c4:	ffff0000 	.word	0xffff0000

080059c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08c      	sub	sp, #48	@ 0x30
 80059cc:	af02      	add	r7, sp, #8
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	4608      	mov	r0, r1
 80059d2:	4611      	mov	r1, r2
 80059d4:	461a      	mov	r2, r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	817b      	strh	r3, [r7, #10]
 80059da:	460b      	mov	r3, r1
 80059dc:	813b      	strh	r3, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059e2:	f7fe ff29 	bl	8004838 <HAL_GetTick>
 80059e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	f040 8214 	bne.w	8005e1e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	2319      	movs	r3, #25
 80059fc:	2201      	movs	r2, #1
 80059fe:	497b      	ldr	r1, [pc, #492]	@ (8005bec <HAL_I2C_Mem_Read+0x224>)
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	f000 fe0f 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e207      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_I2C_Mem_Read+0x56>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e200      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d007      	beq.n	8005a44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2222      	movs	r2, #34	@ 0x22
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2240      	movs	r2, #64	@ 0x40
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005a74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4a5b      	ldr	r2, [pc, #364]	@ (8005bf0 <HAL_I2C_Mem_Read+0x228>)
 8005a84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a86:	88f8      	ldrh	r0, [r7, #6]
 8005a88:	893a      	ldrh	r2, [r7, #8]
 8005a8a:	8979      	ldrh	r1, [r7, #10]
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	4603      	mov	r3, r0
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fcdc 	bl	8006454 <I2C_RequestMemoryRead>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e1bc      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d113      	bne.n	8005ad6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aae:	2300      	movs	r3, #0
 8005ab0:	623b      	str	r3, [r7, #32]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	623b      	str	r3, [r7, #32]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	623b      	str	r3, [r7, #32]
 8005ac2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e190      	b.n	8005df8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d11b      	bne.n	8005b16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aee:	2300      	movs	r3, #0
 8005af0:	61fb      	str	r3, [r7, #28]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	61fb      	str	r3, [r7, #28]
 8005b02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	e170      	b.n	8005df8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d11b      	bne.n	8005b56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	61bb      	str	r3, [r7, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	e150      	b.n	8005df8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b6c:	e144      	b.n	8005df8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	f200 80f1 	bhi.w	8005d5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d123      	bne.n	8005bc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fef7 	bl	8006978 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e145      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9e:	b2d2      	uxtb	r2, r2
 8005ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bc6:	e117      	b.n	8005df8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d14e      	bne.n	8005c6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	4906      	ldr	r1, [pc, #24]	@ (8005bf4 <HAL_I2C_Mem_Read+0x22c>)
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 fd22 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e11a      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
 8005bea:	bf00      	nop
 8005bec:	00100002 	.word	0x00100002
 8005bf0:	ffff0000 	.word	0xffff0000
 8005bf4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	691a      	ldr	r2, [r3, #16]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c6c:	e0c4      	b.n	8005df8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c74:	2200      	movs	r2, #0
 8005c76:	496c      	ldr	r1, [pc, #432]	@ (8005e28 <HAL_I2C_Mem_Read+0x460>)
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 fcd3 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0cb      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691a      	ldr	r2, [r3, #16]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	4955      	ldr	r1, [pc, #340]	@ (8005e28 <HAL_I2C_Mem_Read+0x460>)
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 fca5 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e09d      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691a      	ldr	r2, [r3, #16]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfe:	b2d2      	uxtb	r2, r2
 8005d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d30:	b2d2      	uxtb	r2, r2
 8005d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d42:	3b01      	subs	r3, #1
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d58:	e04e      	b.n	8005df8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 fe0a 	bl	8006978 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e058      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691a      	ldr	r2, [r3, #16]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d124      	bne.n	8005df8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d107      	bne.n	8005dc6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dc4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd0:	b2d2      	uxtb	r2, r2
 8005dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f47f aeb6 	bne.w	8005b6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e000      	b.n	8005e20 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005e1e:	2302      	movs	r3, #2
  }
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3728      	adds	r7, #40	@ 0x28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	00010004 	.word	0x00010004

08005e2c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b08a      	sub	sp, #40	@ 0x28
 8005e30:	af02      	add	r7, sp, #8
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	607a      	str	r2, [r7, #4]
 8005e36:	603b      	str	r3, [r7, #0]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005e3c:	f7fe fcfc 	bl	8004838 <HAL_GetTick>
 8005e40:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	f040 8111 	bne.w	8006076 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	2319      	movs	r3, #25
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	4988      	ldr	r1, [pc, #544]	@ (8006080 <HAL_I2C_IsDeviceReady+0x254>)
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fbe0 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e104      	b.n	8006078 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_I2C_IsDeviceReady+0x50>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e0fd      	b.n	8006078 <HAL_I2C_IsDeviceReady+0x24c>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d007      	beq.n	8005ea2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0201 	orr.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2224      	movs	r2, #36	@ 0x24
 8005eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4a70      	ldr	r2, [pc, #448]	@ (8006084 <HAL_I2C_IsDeviceReady+0x258>)
 8005ec4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ed4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 fb9e 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00d      	beq.n	8005f0a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005efc:	d103      	bne.n	8005f06 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f04:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e0b6      	b.n	8006078 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f0a:	897b      	ldrh	r3, [r7, #10]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f18:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005f1a:	f7fe fc8d 	bl	8004838 <HAL_GetTick>
 8005f1e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	bf0c      	ite	eq
 8005f2e:	2301      	moveq	r3, #1
 8005f30:	2300      	movne	r3, #0
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f44:	bf0c      	ite	eq
 8005f46:	2301      	moveq	r3, #1
 8005f48:	2300      	movne	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005f4e:	e025      	b.n	8005f9c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f50:	f7fe fc72 	bl	8004838 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d302      	bcc.n	8005f66 <HAL_I2C_IsDeviceReady+0x13a>
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d103      	bne.n	8005f6e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	22a0      	movs	r2, #160	@ 0xa0
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	bf0c      	ite	eq
 8005f7c:	2301      	moveq	r3, #1
 8005f7e:	2300      	movne	r3, #0
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f92:	bf0c      	ite	eq
 8005f94:	2301      	moveq	r3, #1
 8005f96:	2300      	movne	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2ba0      	cmp	r3, #160	@ 0xa0
 8005fa6:	d005      	beq.n	8005fb4 <HAL_I2C_IsDeviceReady+0x188>
 8005fa8:	7dfb      	ldrb	r3, [r7, #23]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d102      	bne.n	8005fb4 <HAL_I2C_IsDeviceReady+0x188>
 8005fae:	7dbb      	ldrb	r3, [r7, #22]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0cd      	beq.n	8005f50 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d129      	bne.n	800601e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fd8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fda:	2300      	movs	r3, #0
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	2319      	movs	r3, #25
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	4921      	ldr	r1, [pc, #132]	@ (8006080 <HAL_I2C_IsDeviceReady+0x254>)
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 fb12 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e036      	b.n	8006078 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	e02c      	b.n	8006078 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800602c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006036:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	2319      	movs	r3, #25
 800603e:	2201      	movs	r2, #1
 8006040:	490f      	ldr	r1, [pc, #60]	@ (8006080 <HAL_I2C_IsDeviceReady+0x254>)
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 faee 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e012      	b.n	8006078 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	3301      	adds	r3, #1
 8006056:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	429a      	cmp	r2, r3
 800605e:	f4ff af32 	bcc.w	8005ec6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006076:	2302      	movs	r3, #2
  }
}
 8006078:	4618      	mov	r0, r3
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	00100002 	.word	0x00100002
 8006084:	ffff0000 	.word	0xffff0000

08006088 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af02      	add	r7, sp, #8
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	607a      	str	r2, [r7, #4]
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	460b      	mov	r3, r1
 8006096:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d006      	beq.n	80060b2 <I2C_MasterRequestWrite+0x2a>
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d003      	beq.n	80060b2 <I2C_MasterRequestWrite+0x2a>
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060b0:	d108      	bne.n	80060c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	e00b      	b.n	80060dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c8:	2b12      	cmp	r3, #18
 80060ca:	d107      	bne.n	80060dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 fa9b 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00d      	beq.n	8006110 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006102:	d103      	bne.n	800610c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800610a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e035      	b.n	800617c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006118:	d108      	bne.n	800612c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800611a:	897b      	ldrh	r3, [r7, #10]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	461a      	mov	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006128:	611a      	str	r2, [r3, #16]
 800612a:	e01b      	b.n	8006164 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800612c:	897b      	ldrh	r3, [r7, #10]
 800612e:	11db      	asrs	r3, r3, #7
 8006130:	b2db      	uxtb	r3, r3
 8006132:	f003 0306 	and.w	r3, r3, #6
 8006136:	b2db      	uxtb	r3, r3
 8006138:	f063 030f 	orn	r3, r3, #15
 800613c:	b2da      	uxtb	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	490e      	ldr	r1, [pc, #56]	@ (8006184 <I2C_MasterRequestWrite+0xfc>)
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 fae4 	bl	8006718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e010      	b.n	800617c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800615a:	897b      	ldrh	r3, [r7, #10]
 800615c:	b2da      	uxtb	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	4907      	ldr	r1, [pc, #28]	@ (8006188 <I2C_MasterRequestWrite+0x100>)
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 fad4 	bl	8006718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	00010008 	.word	0x00010008
 8006188:	00010002 	.word	0x00010002

0800618c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af02      	add	r7, sp, #8
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	607a      	str	r2, [r7, #4]
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	460b      	mov	r3, r1
 800619a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d006      	beq.n	80061c6 <I2C_MasterRequestRead+0x3a>
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d003      	beq.n	80061c6 <I2C_MasterRequestRead+0x3a>
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061c4:	d108      	bne.n	80061d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	e00b      	b.n	80061f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061dc:	2b11      	cmp	r3, #17
 80061de:	d107      	bne.n	80061f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fa11 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00d      	beq.n	8006224 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006216:	d103      	bne.n	8006220 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800621e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e079      	b.n	8006318 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800622c:	d108      	bne.n	8006240 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800622e:	897b      	ldrh	r3, [r7, #10]
 8006230:	b2db      	uxtb	r3, r3
 8006232:	f043 0301 	orr.w	r3, r3, #1
 8006236:	b2da      	uxtb	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	611a      	str	r2, [r3, #16]
 800623e:	e05f      	b.n	8006300 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006240:	897b      	ldrh	r3, [r7, #10]
 8006242:	11db      	asrs	r3, r3, #7
 8006244:	b2db      	uxtb	r3, r3
 8006246:	f003 0306 	and.w	r3, r3, #6
 800624a:	b2db      	uxtb	r3, r3
 800624c:	f063 030f 	orn	r3, r3, #15
 8006250:	b2da      	uxtb	r2, r3
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	4930      	ldr	r1, [pc, #192]	@ (8006320 <I2C_MasterRequestRead+0x194>)
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 fa5a 	bl	8006718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e054      	b.n	8006318 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800626e:	897b      	ldrh	r3, [r7, #10]
 8006270:	b2da      	uxtb	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4929      	ldr	r1, [pc, #164]	@ (8006324 <I2C_MasterRequestRead+0x198>)
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 fa4a 	bl	8006718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e044      	b.n	8006318 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f9af 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00d      	beq.n	80062e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062da:	d103      	bne.n	80062e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062e2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e017      	b.n	8006318 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80062e8:	897b      	ldrh	r3, [r7, #10]
 80062ea:	11db      	asrs	r3, r3, #7
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	f003 0306 	and.w	r3, r3, #6
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	f063 030e 	orn	r3, r3, #14
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	4907      	ldr	r1, [pc, #28]	@ (8006324 <I2C_MasterRequestRead+0x198>)
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fa06 	bl	8006718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	00010008 	.word	0x00010008
 8006324:	00010002 	.word	0x00010002

08006328 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af02      	add	r7, sp, #8
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	4608      	mov	r0, r1
 8006332:	4611      	mov	r1, r2
 8006334:	461a      	mov	r2, r3
 8006336:	4603      	mov	r3, r0
 8006338:	817b      	strh	r3, [r7, #10]
 800633a:	460b      	mov	r3, r1
 800633c:	813b      	strh	r3, [r7, #8]
 800633e:	4613      	mov	r3, r2
 8006340:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006350:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	2200      	movs	r2, #0
 800635a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f960 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00d      	beq.n	8006386 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006378:	d103      	bne.n	8006382 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006380:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e05f      	b.n	8006446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006386:	897b      	ldrh	r3, [r7, #10]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	461a      	mov	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006394:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	6a3a      	ldr	r2, [r7, #32]
 800639a:	492d      	ldr	r1, [pc, #180]	@ (8006450 <I2C_RequestMemoryWrite+0x128>)
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 f9bb 	bl	8006718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e04c      	b.n	8006446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c4:	6a39      	ldr	r1, [r7, #32]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 fa46 	bl	8006858 <I2C_WaitOnTXEFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00d      	beq.n	80063ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d107      	bne.n	80063ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e02b      	b.n	8006446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063ee:	88fb      	ldrh	r3, [r7, #6]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d105      	bne.n	8006400 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063f4:	893b      	ldrh	r3, [r7, #8]
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	611a      	str	r2, [r3, #16]
 80063fe:	e021      	b.n	8006444 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006400:	893b      	ldrh	r3, [r7, #8]
 8006402:	0a1b      	lsrs	r3, r3, #8
 8006404:	b29b      	uxth	r3, r3
 8006406:	b2da      	uxtb	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800640e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006410:	6a39      	ldr	r1, [r7, #32]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f000 fa20 	bl	8006858 <I2C_WaitOnTXEFlagUntilTimeout>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00d      	beq.n	800643a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006422:	2b04      	cmp	r3, #4
 8006424:	d107      	bne.n	8006436 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006434:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e005      	b.n	8006446 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800643a:	893b      	ldrh	r3, [r7, #8]
 800643c:	b2da      	uxtb	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	00010002 	.word	0x00010002

08006454 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af02      	add	r7, sp, #8
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	4608      	mov	r0, r1
 800645e:	4611      	mov	r1, r2
 8006460:	461a      	mov	r2, r3
 8006462:	4603      	mov	r3, r0
 8006464:	817b      	strh	r3, [r7, #10]
 8006466:	460b      	mov	r3, r1
 8006468:	813b      	strh	r3, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800647c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800648c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	2200      	movs	r2, #0
 8006496:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f8c2 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00d      	beq.n	80064c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064b4:	d103      	bne.n	80064be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e0aa      	b.n	8006618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064c2:	897b      	ldrh	r3, [r7, #10]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	461a      	mov	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80064d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	6a3a      	ldr	r2, [r7, #32]
 80064d6:	4952      	ldr	r1, [pc, #328]	@ (8006620 <I2C_RequestMemoryRead+0x1cc>)
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 f91d 	bl	8006718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e097      	b.n	8006618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064e8:	2300      	movs	r3, #0
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006500:	6a39      	ldr	r1, [r7, #32]
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 f9a8 	bl	8006858 <I2C_WaitOnTXEFlagUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00d      	beq.n	800652a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006512:	2b04      	cmp	r3, #4
 8006514:	d107      	bne.n	8006526 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006524:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e076      	b.n	8006618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800652a:	88fb      	ldrh	r3, [r7, #6]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d105      	bne.n	800653c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006530:	893b      	ldrh	r3, [r7, #8]
 8006532:	b2da      	uxtb	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	611a      	str	r2, [r3, #16]
 800653a:	e021      	b.n	8006580 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800653c:	893b      	ldrh	r3, [r7, #8]
 800653e:	0a1b      	lsrs	r3, r3, #8
 8006540:	b29b      	uxth	r3, r3
 8006542:	b2da      	uxtb	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800654a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800654c:	6a39      	ldr	r1, [r7, #32]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 f982 	bl	8006858 <I2C_WaitOnTXEFlagUntilTimeout>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00d      	beq.n	8006576 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655e:	2b04      	cmp	r3, #4
 8006560:	d107      	bne.n	8006572 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006570:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e050      	b.n	8006618 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006576:	893b      	ldrh	r3, [r7, #8]
 8006578:	b2da      	uxtb	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006582:	6a39      	ldr	r1, [r7, #32]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f967 	bl	8006858 <I2C_WaitOnTXEFlagUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00d      	beq.n	80065ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006594:	2b04      	cmp	r3, #4
 8006596:	d107      	bne.n	80065a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e035      	b.n	8006618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 f82b 	bl	8006624 <I2C_WaitOnFlagUntilTimeout>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00d      	beq.n	80065f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065e2:	d103      	bne.n	80065ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e013      	b.n	8006618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065f0:	897b      	ldrh	r3, [r7, #10]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	f043 0301 	orr.w	r3, r3, #1
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006602:	6a3a      	ldr	r2, [r7, #32]
 8006604:	4906      	ldr	r1, [pc, #24]	@ (8006620 <I2C_RequestMemoryRead+0x1cc>)
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 f886 	bl	8006718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e000      	b.n	8006618 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	00010002 	.word	0x00010002

08006624 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	603b      	str	r3, [r7, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006634:	e048      	b.n	80066c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663c:	d044      	beq.n	80066c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800663e:	f7fe f8fb 	bl	8004838 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d302      	bcc.n	8006654 <I2C_WaitOnFlagUntilTimeout+0x30>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d139      	bne.n	80066c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	0c1b      	lsrs	r3, r3, #16
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b01      	cmp	r3, #1
 800665c:	d10d      	bne.n	800667a <I2C_WaitOnFlagUntilTimeout+0x56>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	43da      	mvns	r2, r3
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	4013      	ands	r3, r2
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	bf0c      	ite	eq
 8006670:	2301      	moveq	r3, #1
 8006672:	2300      	movne	r3, #0
 8006674:	b2db      	uxtb	r3, r3
 8006676:	461a      	mov	r2, r3
 8006678:	e00c      	b.n	8006694 <I2C_WaitOnFlagUntilTimeout+0x70>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	43da      	mvns	r2, r3
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	4013      	ands	r3, r2
 8006686:	b29b      	uxth	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	bf0c      	ite	eq
 800668c:	2301      	moveq	r3, #1
 800668e:	2300      	movne	r3, #0
 8006690:	b2db      	uxtb	r3, r3
 8006692:	461a      	mov	r2, r3
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	429a      	cmp	r2, r3
 8006698:	d116      	bne.n	80066c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b4:	f043 0220 	orr.w	r2, r3, #32
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e023      	b.n	8006710 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	0c1b      	lsrs	r3, r3, #16
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d10d      	bne.n	80066ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	43da      	mvns	r2, r3
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	4013      	ands	r3, r2
 80066de:	b29b      	uxth	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	bf0c      	ite	eq
 80066e4:	2301      	moveq	r3, #1
 80066e6:	2300      	movne	r3, #0
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	461a      	mov	r2, r3
 80066ec:	e00c      	b.n	8006708 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	43da      	mvns	r2, r3
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4013      	ands	r3, r2
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	bf0c      	ite	eq
 8006700:	2301      	moveq	r3, #1
 8006702:	2300      	movne	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	461a      	mov	r2, r3
 8006708:	79fb      	ldrb	r3, [r7, #7]
 800670a:	429a      	cmp	r2, r3
 800670c:	d093      	beq.n	8006636 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006726:	e071      	b.n	800680c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006736:	d123      	bne.n	8006780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006746:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006750:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2220      	movs	r2, #32
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676c:	f043 0204 	orr.w	r2, r3, #4
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e067      	b.n	8006850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006786:	d041      	beq.n	800680c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006788:	f7fe f856 	bl	8004838 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d302      	bcc.n	800679e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d136      	bne.n	800680c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	0c1b      	lsrs	r3, r3, #16
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d10c      	bne.n	80067c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	43da      	mvns	r2, r3
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	4013      	ands	r3, r2
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	bf14      	ite	ne
 80067ba:	2301      	movne	r3, #1
 80067bc:	2300      	moveq	r3, #0
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	e00b      	b.n	80067da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	43da      	mvns	r2, r3
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	4013      	ands	r3, r2
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	bf14      	ite	ne
 80067d4:	2301      	movne	r3, #1
 80067d6:	2300      	moveq	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d016      	beq.n	800680c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f8:	f043 0220 	orr.w	r2, r3, #32
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e021      	b.n	8006850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	0c1b      	lsrs	r3, r3, #16
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b01      	cmp	r3, #1
 8006814:	d10c      	bne.n	8006830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	43da      	mvns	r2, r3
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4013      	ands	r3, r2
 8006822:	b29b      	uxth	r3, r3
 8006824:	2b00      	cmp	r3, #0
 8006826:	bf14      	ite	ne
 8006828:	2301      	movne	r3, #1
 800682a:	2300      	moveq	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	e00b      	b.n	8006848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	43da      	mvns	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4013      	ands	r3, r2
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	bf14      	ite	ne
 8006842:	2301      	movne	r3, #1
 8006844:	2300      	moveq	r3, #0
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	f47f af6d 	bne.w	8006728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006864:	e034      	b.n	80068d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 f8e3 	bl	8006a32 <I2C_IsAcknowledgeFailed>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e034      	b.n	80068e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687c:	d028      	beq.n	80068d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800687e:	f7fd ffdb 	bl	8004838 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	429a      	cmp	r2, r3
 800688c:	d302      	bcc.n	8006894 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d11d      	bne.n	80068d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800689e:	2b80      	cmp	r3, #128	@ 0x80
 80068a0:	d016      	beq.n	80068d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2220      	movs	r2, #32
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068bc:	f043 0220 	orr.w	r2, r3, #32
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e007      	b.n	80068e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068da:	2b80      	cmp	r3, #128	@ 0x80
 80068dc:	d1c3      	bne.n	8006866 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068f4:	e034      	b.n	8006960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 f89b 	bl	8006a32 <I2C_IsAcknowledgeFailed>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e034      	b.n	8006970 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690c:	d028      	beq.n	8006960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690e:	f7fd ff93 	bl	8004838 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	429a      	cmp	r2, r3
 800691c:	d302      	bcc.n	8006924 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d11d      	bne.n	8006960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	f003 0304 	and.w	r3, r3, #4
 800692e:	2b04      	cmp	r3, #4
 8006930:	d016      	beq.n	8006960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694c:	f043 0220 	orr.w	r2, r3, #32
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e007      	b.n	8006970 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b04      	cmp	r3, #4
 800696c:	d1c3      	bne.n	80068f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006984:	e049      	b.n	8006a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b10      	cmp	r3, #16
 8006992:	d119      	bne.n	80069c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0210 	mvn.w	r2, #16
 800699c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e030      	b.n	8006a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c8:	f7fd ff36 	bl	8004838 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d302      	bcc.n	80069de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d11d      	bne.n	8006a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e8:	2b40      	cmp	r3, #64	@ 0x40
 80069ea:	d016      	beq.n	8006a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2220      	movs	r2, #32
 80069f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a06:	f043 0220 	orr.w	r2, r3, #32
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e007      	b.n	8006a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a24:	2b40      	cmp	r3, #64	@ 0x40
 8006a26:	d1ae      	bne.n	8006986 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a48:	d11b      	bne.n	8006a82 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a52:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6e:	f043 0204 	orr.w	r2, r3, #4
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e267      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d075      	beq.n	8006b9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006aae:	4b88      	ldr	r3, [pc, #544]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f003 030c 	and.w	r3, r3, #12
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d00c      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aba:	4b85      	ldr	r3, [pc, #532]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	d112      	bne.n	8006aec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ac6:	4b82      	ldr	r3, [pc, #520]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ad2:	d10b      	bne.n	8006aec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ad4:	4b7e      	ldr	r3, [pc, #504]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d05b      	beq.n	8006b98 <HAL_RCC_OscConfig+0x108>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d157      	bne.n	8006b98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e242      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006af4:	d106      	bne.n	8006b04 <HAL_RCC_OscConfig+0x74>
 8006af6:	4b76      	ldr	r3, [pc, #472]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a75      	ldr	r2, [pc, #468]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	e01d      	b.n	8006b40 <HAL_RCC_OscConfig+0xb0>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b0c:	d10c      	bne.n	8006b28 <HAL_RCC_OscConfig+0x98>
 8006b0e:	4b70      	ldr	r3, [pc, #448]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a6f      	ldr	r2, [pc, #444]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	4b6d      	ldr	r3, [pc, #436]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a6c      	ldr	r2, [pc, #432]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	e00b      	b.n	8006b40 <HAL_RCC_OscConfig+0xb0>
 8006b28:	4b69      	ldr	r3, [pc, #420]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a68      	ldr	r2, [pc, #416]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	4b66      	ldr	r3, [pc, #408]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a65      	ldr	r2, [pc, #404]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d013      	beq.n	8006b70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b48:	f7fd fe76 	bl	8004838 <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b50:	f7fd fe72 	bl	8004838 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b64      	cmp	r3, #100	@ 0x64
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e207      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b62:	4b5b      	ldr	r3, [pc, #364]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f0      	beq.n	8006b50 <HAL_RCC_OscConfig+0xc0>
 8006b6e:	e014      	b.n	8006b9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b70:	f7fd fe62 	bl	8004838 <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b78:	f7fd fe5e 	bl	8004838 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b64      	cmp	r3, #100	@ 0x64
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e1f3      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b8a:	4b51      	ldr	r3, [pc, #324]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1f0      	bne.n	8006b78 <HAL_RCC_OscConfig+0xe8>
 8006b96:	e000      	b.n	8006b9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d063      	beq.n	8006c6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 030c 	and.w	r3, r3, #12
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00b      	beq.n	8006bca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bb2:	4b47      	ldr	r3, [pc, #284]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d11c      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bbe:	4b44      	ldr	r3, [pc, #272]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d116      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bca:	4b41      	ldr	r3, [pc, #260]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <HAL_RCC_OscConfig+0x152>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d001      	beq.n	8006be2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e1c7      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006be2:	4b3b      	ldr	r3, [pc, #236]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	4937      	ldr	r1, [pc, #220]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bf6:	e03a      	b.n	8006c6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d020      	beq.n	8006c42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c00:	4b34      	ldr	r3, [pc, #208]	@ (8006cd4 <HAL_RCC_OscConfig+0x244>)
 8006c02:	2201      	movs	r2, #1
 8006c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c06:	f7fd fe17 	bl	8004838 <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c0e:	f7fd fe13 	bl	8004838 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e1a8      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c20:	4b2b      	ldr	r3, [pc, #172]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0f0      	beq.n	8006c0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c2c:	4b28      	ldr	r3, [pc, #160]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	00db      	lsls	r3, r3, #3
 8006c3a:	4925      	ldr	r1, [pc, #148]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	600b      	str	r3, [r1, #0]
 8006c40:	e015      	b.n	8006c6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c42:	4b24      	ldr	r3, [pc, #144]	@ (8006cd4 <HAL_RCC_OscConfig+0x244>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c48:	f7fd fdf6 	bl	8004838 <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c50:	f7fd fdf2 	bl	8004838 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e187      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c62:	4b1b      	ldr	r3, [pc, #108]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f0      	bne.n	8006c50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0308 	and.w	r3, r3, #8
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d036      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d016      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c82:	4b15      	ldr	r3, [pc, #84]	@ (8006cd8 <HAL_RCC_OscConfig+0x248>)
 8006c84:	2201      	movs	r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c88:	f7fd fdd6 	bl	8004838 <HAL_GetTick>
 8006c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c90:	f7fd fdd2 	bl	8004838 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e167      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd0 <HAL_RCC_OscConfig+0x240>)
 8006ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d0f0      	beq.n	8006c90 <HAL_RCC_OscConfig+0x200>
 8006cae:	e01b      	b.n	8006ce8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cb0:	4b09      	ldr	r3, [pc, #36]	@ (8006cd8 <HAL_RCC_OscConfig+0x248>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cb6:	f7fd fdbf 	bl	8004838 <HAL_GetTick>
 8006cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cbc:	e00e      	b.n	8006cdc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cbe:	f7fd fdbb 	bl	8004838 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d907      	bls.n	8006cdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e150      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
 8006cd0:	40023800 	.word	0x40023800
 8006cd4:	42470000 	.word	0x42470000
 8006cd8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cdc:	4b88      	ldr	r3, [pc, #544]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1ea      	bne.n	8006cbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 8097 	beq.w	8006e24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cfa:	4b81      	ldr	r3, [pc, #516]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10f      	bne.n	8006d26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d06:	2300      	movs	r3, #0
 8006d08:	60bb      	str	r3, [r7, #8]
 8006d0a:	4b7d      	ldr	r3, [pc, #500]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0e:	4a7c      	ldr	r2, [pc, #496]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d16:	4b7a      	ldr	r3, [pc, #488]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d1e:	60bb      	str	r3, [r7, #8]
 8006d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d22:	2301      	movs	r3, #1
 8006d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d26:	4b77      	ldr	r3, [pc, #476]	@ (8006f04 <HAL_RCC_OscConfig+0x474>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d118      	bne.n	8006d64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d32:	4b74      	ldr	r3, [pc, #464]	@ (8006f04 <HAL_RCC_OscConfig+0x474>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a73      	ldr	r2, [pc, #460]	@ (8006f04 <HAL_RCC_OscConfig+0x474>)
 8006d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d3e:	f7fd fd7b 	bl	8004838 <HAL_GetTick>
 8006d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d44:	e008      	b.n	8006d58 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d46:	f7fd fd77 	bl	8004838 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d901      	bls.n	8006d58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e10c      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d58:	4b6a      	ldr	r3, [pc, #424]	@ (8006f04 <HAL_RCC_OscConfig+0x474>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0f0      	beq.n	8006d46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d106      	bne.n	8006d7a <HAL_RCC_OscConfig+0x2ea>
 8006d6c:	4b64      	ldr	r3, [pc, #400]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d70:	4a63      	ldr	r2, [pc, #396]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d72:	f043 0301 	orr.w	r3, r3, #1
 8006d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d78:	e01c      	b.n	8006db4 <HAL_RCC_OscConfig+0x324>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	2b05      	cmp	r3, #5
 8006d80:	d10c      	bne.n	8006d9c <HAL_RCC_OscConfig+0x30c>
 8006d82:	4b5f      	ldr	r3, [pc, #380]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d86:	4a5e      	ldr	r2, [pc, #376]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d88:	f043 0304 	orr.w	r3, r3, #4
 8006d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d8e:	4b5c      	ldr	r3, [pc, #368]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d92:	4a5b      	ldr	r2, [pc, #364]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d94:	f043 0301 	orr.w	r3, r3, #1
 8006d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d9a:	e00b      	b.n	8006db4 <HAL_RCC_OscConfig+0x324>
 8006d9c:	4b58      	ldr	r3, [pc, #352]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da0:	4a57      	ldr	r2, [pc, #348]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006da2:	f023 0301 	bic.w	r3, r3, #1
 8006da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006da8:	4b55      	ldr	r3, [pc, #340]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dac:	4a54      	ldr	r2, [pc, #336]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006dae:	f023 0304 	bic.w	r3, r3, #4
 8006db2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d015      	beq.n	8006de8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dbc:	f7fd fd3c 	bl	8004838 <HAL_GetTick>
 8006dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dc2:	e00a      	b.n	8006dda <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dc4:	f7fd fd38 	bl	8004838 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e0cb      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dda:	4b49      	ldr	r3, [pc, #292]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d0ee      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x334>
 8006de6:	e014      	b.n	8006e12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006de8:	f7fd fd26 	bl	8004838 <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dee:	e00a      	b.n	8006e06 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006df0:	f7fd fd22 	bl	8004838 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e0b5      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e06:	4b3e      	ldr	r3, [pc, #248]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1ee      	bne.n	8006df0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e12:	7dfb      	ldrb	r3, [r7, #23]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d105      	bne.n	8006e24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e18:	4b39      	ldr	r3, [pc, #228]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1c:	4a38      	ldr	r2, [pc, #224]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006e1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 80a1 	beq.w	8006f70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e2e:	4b34      	ldr	r3, [pc, #208]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f003 030c 	and.w	r3, r3, #12
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d05c      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d141      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e42:	4b31      	ldr	r3, [pc, #196]	@ (8006f08 <HAL_RCC_OscConfig+0x478>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e48:	f7fd fcf6 	bl	8004838 <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e50:	f7fd fcf2 	bl	8004838 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e087      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e62:	4b27      	ldr	r3, [pc, #156]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1f0      	bne.n	8006e50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69da      	ldr	r2, [r3, #28]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	019b      	lsls	r3, r3, #6
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e84:	085b      	lsrs	r3, r3, #1
 8006e86:	3b01      	subs	r3, #1
 8006e88:	041b      	lsls	r3, r3, #16
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e90:	061b      	lsls	r3, r3, #24
 8006e92:	491b      	ldr	r1, [pc, #108]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e98:	4b1b      	ldr	r3, [pc, #108]	@ (8006f08 <HAL_RCC_OscConfig+0x478>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e9e:	f7fd fccb 	bl	8004838 <HAL_GetTick>
 8006ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea6:	f7fd fcc7 	bl	8004838 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e05c      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eb8:	4b11      	ldr	r3, [pc, #68]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0f0      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x416>
 8006ec4:	e054      	b.n	8006f70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ec6:	4b10      	ldr	r3, [pc, #64]	@ (8006f08 <HAL_RCC_OscConfig+0x478>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ecc:	f7fd fcb4 	bl	8004838 <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed4:	f7fd fcb0 	bl	8004838 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e045      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee6:	4b06      	ldr	r3, [pc, #24]	@ (8006f00 <HAL_RCC_OscConfig+0x470>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f0      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x444>
 8006ef2:	e03d      	b.n	8006f70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d107      	bne.n	8006f0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e038      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
 8006f00:	40023800 	.word	0x40023800
 8006f04:	40007000 	.word	0x40007000
 8006f08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006f7c <HAL_RCC_OscConfig+0x4ec>)
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d028      	beq.n	8006f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d121      	bne.n	8006f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d11a      	bne.n	8006f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d111      	bne.n	8006f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	3b01      	subs	r3, #1
 8006f56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d107      	bne.n	8006f6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d001      	beq.n	8006f70 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e000      	b.n	8006f72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	40023800 	.word	0x40023800

08006f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e0cc      	b.n	800712e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f94:	4b68      	ldr	r3, [pc, #416]	@ (8007138 <HAL_RCC_ClockConfig+0x1b8>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d90c      	bls.n	8006fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fa2:	4b65      	ldr	r3, [pc, #404]	@ (8007138 <HAL_RCC_ClockConfig+0x1b8>)
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006faa:	4b63      	ldr	r3, [pc, #396]	@ (8007138 <HAL_RCC_ClockConfig+0x1b8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d001      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e0b8      	b.n	800712e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d020      	beq.n	800700a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0304 	and.w	r3, r3, #4
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d005      	beq.n	8006fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fd4:	4b59      	ldr	r3, [pc, #356]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	4a58      	ldr	r2, [pc, #352]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8006fda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006fde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0308 	and.w	r3, r3, #8
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fec:	4b53      	ldr	r3, [pc, #332]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	4a52      	ldr	r2, [pc, #328]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8006ff2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006ff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ff8:	4b50      	ldr	r3, [pc, #320]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	494d      	ldr	r1, [pc, #308]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8007006:	4313      	orrs	r3, r2
 8007008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d044      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d107      	bne.n	800702e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800701e:	4b47      	ldr	r3, [pc, #284]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d119      	bne.n	800705e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e07f      	b.n	800712e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d003      	beq.n	800703e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800703a:	2b03      	cmp	r3, #3
 800703c:	d107      	bne.n	800704e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800703e:	4b3f      	ldr	r3, [pc, #252]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d109      	bne.n	800705e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e06f      	b.n	800712e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800704e:	4b3b      	ldr	r3, [pc, #236]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e067      	b.n	800712e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800705e:	4b37      	ldr	r3, [pc, #220]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f023 0203 	bic.w	r2, r3, #3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	4934      	ldr	r1, [pc, #208]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 800706c:	4313      	orrs	r3, r2
 800706e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007070:	f7fd fbe2 	bl	8004838 <HAL_GetTick>
 8007074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007076:	e00a      	b.n	800708e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007078:	f7fd fbde 	bl	8004838 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007086:	4293      	cmp	r3, r2
 8007088:	d901      	bls.n	800708e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e04f      	b.n	800712e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800708e:	4b2b      	ldr	r3, [pc, #172]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 020c 	and.w	r2, r3, #12
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	429a      	cmp	r2, r3
 800709e:	d1eb      	bne.n	8007078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070a0:	4b25      	ldr	r3, [pc, #148]	@ (8007138 <HAL_RCC_ClockConfig+0x1b8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	683a      	ldr	r2, [r7, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d20c      	bcs.n	80070c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ae:	4b22      	ldr	r3, [pc, #136]	@ (8007138 <HAL_RCC_ClockConfig+0x1b8>)
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070b6:	4b20      	ldr	r3, [pc, #128]	@ (8007138 <HAL_RCC_ClockConfig+0x1b8>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d001      	beq.n	80070c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e032      	b.n	800712e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d008      	beq.n	80070e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070d4:	4b19      	ldr	r3, [pc, #100]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	4916      	ldr	r1, [pc, #88]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d009      	beq.n	8007106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070f2:	4b12      	ldr	r3, [pc, #72]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	490e      	ldr	r1, [pc, #56]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 8007102:	4313      	orrs	r3, r2
 8007104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007106:	f000 f82d 	bl	8007164 <HAL_RCC_GetSysClockFreq>
 800710a:	4602      	mov	r2, r0
 800710c:	4b0b      	ldr	r3, [pc, #44]	@ (800713c <HAL_RCC_ClockConfig+0x1bc>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	091b      	lsrs	r3, r3, #4
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	490a      	ldr	r1, [pc, #40]	@ (8007140 <HAL_RCC_ClockConfig+0x1c0>)
 8007118:	5ccb      	ldrb	r3, [r1, r3]
 800711a:	fa22 f303 	lsr.w	r3, r2, r3
 800711e:	4a09      	ldr	r2, [pc, #36]	@ (8007144 <HAL_RCC_ClockConfig+0x1c4>)
 8007120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007122:	4b09      	ldr	r3, [pc, #36]	@ (8007148 <HAL_RCC_ClockConfig+0x1c8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4618      	mov	r0, r3
 8007128:	f7fd f98a 	bl	8004440 <HAL_InitTick>

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40023c00 	.word	0x40023c00
 800713c:	40023800 	.word	0x40023800
 8007140:	0800e018 	.word	0x0800e018
 8007144:	2000009c 	.word	0x2000009c
 8007148:	200000a0 	.word	0x200000a0

0800714c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007150:	4b03      	ldr	r3, [pc, #12]	@ (8007160 <HAL_RCC_EnableCSS+0x14>)
 8007152:	2201      	movs	r2, #1
 8007154:	601a      	str	r2, [r3, #0]
}
 8007156:	bf00      	nop
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	4247004c 	.word	0x4247004c

08007164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007168:	b094      	sub	sp, #80	@ 0x50
 800716a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800716c:	2300      	movs	r3, #0
 800716e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800717c:	4b79      	ldr	r3, [pc, #484]	@ (8007364 <HAL_RCC_GetSysClockFreq+0x200>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f003 030c 	and.w	r3, r3, #12
 8007184:	2b08      	cmp	r3, #8
 8007186:	d00d      	beq.n	80071a4 <HAL_RCC_GetSysClockFreq+0x40>
 8007188:	2b08      	cmp	r3, #8
 800718a:	f200 80e1 	bhi.w	8007350 <HAL_RCC_GetSysClockFreq+0x1ec>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d002      	beq.n	8007198 <HAL_RCC_GetSysClockFreq+0x34>
 8007192:	2b04      	cmp	r3, #4
 8007194:	d003      	beq.n	800719e <HAL_RCC_GetSysClockFreq+0x3a>
 8007196:	e0db      	b.n	8007350 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007198:	4b73      	ldr	r3, [pc, #460]	@ (8007368 <HAL_RCC_GetSysClockFreq+0x204>)
 800719a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800719c:	e0db      	b.n	8007356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800719e:	4b73      	ldr	r3, [pc, #460]	@ (800736c <HAL_RCC_GetSysClockFreq+0x208>)
 80071a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80071a2:	e0d8      	b.n	8007356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071a4:	4b6f      	ldr	r3, [pc, #444]	@ (8007364 <HAL_RCC_GetSysClockFreq+0x200>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071ae:	4b6d      	ldr	r3, [pc, #436]	@ (8007364 <HAL_RCC_GetSysClockFreq+0x200>)
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d063      	beq.n	8007282 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071ba:	4b6a      	ldr	r3, [pc, #424]	@ (8007364 <HAL_RCC_GetSysClockFreq+0x200>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	099b      	lsrs	r3, r3, #6
 80071c0:	2200      	movs	r2, #0
 80071c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80071c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80071ce:	2300      	movs	r3, #0
 80071d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80071d6:	4622      	mov	r2, r4
 80071d8:	462b      	mov	r3, r5
 80071da:	f04f 0000 	mov.w	r0, #0
 80071de:	f04f 0100 	mov.w	r1, #0
 80071e2:	0159      	lsls	r1, r3, #5
 80071e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071e8:	0150      	lsls	r0, r2, #5
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4621      	mov	r1, r4
 80071f0:	1a51      	subs	r1, r2, r1
 80071f2:	6139      	str	r1, [r7, #16]
 80071f4:	4629      	mov	r1, r5
 80071f6:	eb63 0301 	sbc.w	r3, r3, r1
 80071fa:	617b      	str	r3, [r7, #20]
 80071fc:	f04f 0200 	mov.w	r2, #0
 8007200:	f04f 0300 	mov.w	r3, #0
 8007204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007208:	4659      	mov	r1, fp
 800720a:	018b      	lsls	r3, r1, #6
 800720c:	4651      	mov	r1, sl
 800720e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007212:	4651      	mov	r1, sl
 8007214:	018a      	lsls	r2, r1, #6
 8007216:	4651      	mov	r1, sl
 8007218:	ebb2 0801 	subs.w	r8, r2, r1
 800721c:	4659      	mov	r1, fp
 800721e:	eb63 0901 	sbc.w	r9, r3, r1
 8007222:	f04f 0200 	mov.w	r2, #0
 8007226:	f04f 0300 	mov.w	r3, #0
 800722a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800722e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007236:	4690      	mov	r8, r2
 8007238:	4699      	mov	r9, r3
 800723a:	4623      	mov	r3, r4
 800723c:	eb18 0303 	adds.w	r3, r8, r3
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	462b      	mov	r3, r5
 8007244:	eb49 0303 	adc.w	r3, r9, r3
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	f04f 0200 	mov.w	r2, #0
 800724e:	f04f 0300 	mov.w	r3, #0
 8007252:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007256:	4629      	mov	r1, r5
 8007258:	024b      	lsls	r3, r1, #9
 800725a:	4621      	mov	r1, r4
 800725c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007260:	4621      	mov	r1, r4
 8007262:	024a      	lsls	r2, r1, #9
 8007264:	4610      	mov	r0, r2
 8007266:	4619      	mov	r1, r3
 8007268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800726a:	2200      	movs	r2, #0
 800726c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800726e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007270:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007274:	f7f9 fce8 	bl	8000c48 <__aeabi_uldivmod>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	4613      	mov	r3, r2
 800727e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007280:	e058      	b.n	8007334 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007282:	4b38      	ldr	r3, [pc, #224]	@ (8007364 <HAL_RCC_GetSysClockFreq+0x200>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	099b      	lsrs	r3, r3, #6
 8007288:	2200      	movs	r2, #0
 800728a:	4618      	mov	r0, r3
 800728c:	4611      	mov	r1, r2
 800728e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007292:	623b      	str	r3, [r7, #32]
 8007294:	2300      	movs	r3, #0
 8007296:	627b      	str	r3, [r7, #36]	@ 0x24
 8007298:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800729c:	4642      	mov	r2, r8
 800729e:	464b      	mov	r3, r9
 80072a0:	f04f 0000 	mov.w	r0, #0
 80072a4:	f04f 0100 	mov.w	r1, #0
 80072a8:	0159      	lsls	r1, r3, #5
 80072aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072ae:	0150      	lsls	r0, r2, #5
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4641      	mov	r1, r8
 80072b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80072ba:	4649      	mov	r1, r9
 80072bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80072cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80072d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80072d4:	ebb2 040a 	subs.w	r4, r2, sl
 80072d8:	eb63 050b 	sbc.w	r5, r3, fp
 80072dc:	f04f 0200 	mov.w	r2, #0
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	00eb      	lsls	r3, r5, #3
 80072e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072ea:	00e2      	lsls	r2, r4, #3
 80072ec:	4614      	mov	r4, r2
 80072ee:	461d      	mov	r5, r3
 80072f0:	4643      	mov	r3, r8
 80072f2:	18e3      	adds	r3, r4, r3
 80072f4:	603b      	str	r3, [r7, #0]
 80072f6:	464b      	mov	r3, r9
 80072f8:	eb45 0303 	adc.w	r3, r5, r3
 80072fc:	607b      	str	r3, [r7, #4]
 80072fe:	f04f 0200 	mov.w	r2, #0
 8007302:	f04f 0300 	mov.w	r3, #0
 8007306:	e9d7 4500 	ldrd	r4, r5, [r7]
 800730a:	4629      	mov	r1, r5
 800730c:	028b      	lsls	r3, r1, #10
 800730e:	4621      	mov	r1, r4
 8007310:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007314:	4621      	mov	r1, r4
 8007316:	028a      	lsls	r2, r1, #10
 8007318:	4610      	mov	r0, r2
 800731a:	4619      	mov	r1, r3
 800731c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800731e:	2200      	movs	r2, #0
 8007320:	61bb      	str	r3, [r7, #24]
 8007322:	61fa      	str	r2, [r7, #28]
 8007324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007328:	f7f9 fc8e 	bl	8000c48 <__aeabi_uldivmod>
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4613      	mov	r3, r2
 8007332:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007334:	4b0b      	ldr	r3, [pc, #44]	@ (8007364 <HAL_RCC_GetSysClockFreq+0x200>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	0c1b      	lsrs	r3, r3, #16
 800733a:	f003 0303 	and.w	r3, r3, #3
 800733e:	3301      	adds	r3, #1
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007344:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007348:	fbb2 f3f3 	udiv	r3, r2, r3
 800734c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800734e:	e002      	b.n	8007356 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007350:	4b05      	ldr	r3, [pc, #20]	@ (8007368 <HAL_RCC_GetSysClockFreq+0x204>)
 8007352:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007358:	4618      	mov	r0, r3
 800735a:	3750      	adds	r7, #80	@ 0x50
 800735c:	46bd      	mov	sp, r7
 800735e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007362:	bf00      	nop
 8007364:	40023800 	.word	0x40023800
 8007368:	00f42400 	.word	0x00f42400
 800736c:	007a1200 	.word	0x007a1200

08007370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007374:	4b03      	ldr	r3, [pc, #12]	@ (8007384 <HAL_RCC_GetHCLKFreq+0x14>)
 8007376:	681b      	ldr	r3, [r3, #0]
}
 8007378:	4618      	mov	r0, r3
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	2000009c 	.word	0x2000009c

08007388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800738c:	f7ff fff0 	bl	8007370 <HAL_RCC_GetHCLKFreq>
 8007390:	4602      	mov	r2, r0
 8007392:	4b05      	ldr	r3, [pc, #20]	@ (80073a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	0a9b      	lsrs	r3, r3, #10
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	4903      	ldr	r1, [pc, #12]	@ (80073ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800739e:	5ccb      	ldrb	r3, [r1, r3]
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40023800 	.word	0x40023800
 80073ac:	0800e028 	.word	0x0800e028

080073b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80073b4:	f7ff ffdc 	bl	8007370 <HAL_RCC_GetHCLKFreq>
 80073b8:	4602      	mov	r2, r0
 80073ba:	4b05      	ldr	r3, [pc, #20]	@ (80073d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	0b5b      	lsrs	r3, r3, #13
 80073c0:	f003 0307 	and.w	r3, r3, #7
 80073c4:	4903      	ldr	r1, [pc, #12]	@ (80073d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073c6:	5ccb      	ldrb	r3, [r1, r3]
 80073c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	40023800 	.word	0x40023800
 80073d4:	0800e028 	.word	0x0800e028

080073d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	220f      	movs	r2, #15
 80073e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80073e8:	4b12      	ldr	r3, [pc, #72]	@ (8007434 <HAL_RCC_GetClockConfig+0x5c>)
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f003 0203 	and.w	r2, r3, #3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80073f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007434 <HAL_RCC_GetClockConfig+0x5c>)
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007400:	4b0c      	ldr	r3, [pc, #48]	@ (8007434 <HAL_RCC_GetClockConfig+0x5c>)
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800740c:	4b09      	ldr	r3, [pc, #36]	@ (8007434 <HAL_RCC_GetClockConfig+0x5c>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	08db      	lsrs	r3, r3, #3
 8007412:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800741a:	4b07      	ldr	r3, [pc, #28]	@ (8007438 <HAL_RCC_GetClockConfig+0x60>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0207 	and.w	r2, r3, #7
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	601a      	str	r2, [r3, #0]
}
 8007426:	bf00      	nop
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40023800 	.word	0x40023800
 8007438:	40023c00 	.word	0x40023c00

0800743c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007440:	4b06      	ldr	r3, [pc, #24]	@ (800745c <HAL_RCC_NMI_IRQHandler+0x20>)
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007448:	2b80      	cmp	r3, #128	@ 0x80
 800744a:	d104      	bne.n	8007456 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800744c:	f000 f80a 	bl	8007464 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007450:	4b03      	ldr	r3, [pc, #12]	@ (8007460 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007452:	2280      	movs	r2, #128	@ 0x80
 8007454:	701a      	strb	r2, [r3, #0]
  }
}
 8007456:	bf00      	nop
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	40023800 	.word	0x40023800
 8007460:	4002380e 	.word	0x4002380e

08007464 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007468:	bf00      	nop
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b082      	sub	sp, #8
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d101      	bne.n	8007484 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007480:	2301      	movs	r3, #1
 8007482:	e07b      	b.n	800757c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007488:	2b00      	cmp	r3, #0
 800748a:	d108      	bne.n	800749e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007494:	d009      	beq.n	80074aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	61da      	str	r2, [r3, #28]
 800749c:	e005      	b.n	80074aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d106      	bne.n	80074ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7fc feb1 	bl	800422c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2202      	movs	r2, #2
 80074ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80074e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800751a:	431a      	orrs	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007524:	431a      	orrs	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800752e:	ea42 0103 	orr.w	r1, r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007536:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	0c1b      	lsrs	r3, r3, #16
 8007548:	f003 0104 	and.w	r1, r3, #4
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007550:	f003 0210 	and.w	r2, r3, #16
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	69da      	ldr	r2, [r3, #28]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800756a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e041      	b.n	800761a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d106      	bne.n	80075b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f839 	bl	8007622 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3304      	adds	r3, #4
 80075c0:	4619      	mov	r1, r3
 80075c2:	4610      	mov	r0, r2
 80075c4:	f000 f9c0 	bl	8007948 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007622:	b480      	push	{r7}
 8007624:	b083      	sub	sp, #12
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800762a:	bf00      	nop
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
	...

08007638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b01      	cmp	r3, #1
 800764a:	d001      	beq.n	8007650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e04e      	b.n	80076ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0201 	orr.w	r2, r2, #1
 8007666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a23      	ldr	r2, [pc, #140]	@ (80076fc <HAL_TIM_Base_Start_IT+0xc4>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d022      	beq.n	80076b8 <HAL_TIM_Base_Start_IT+0x80>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800767a:	d01d      	beq.n	80076b8 <HAL_TIM_Base_Start_IT+0x80>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a1f      	ldr	r2, [pc, #124]	@ (8007700 <HAL_TIM_Base_Start_IT+0xc8>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d018      	beq.n	80076b8 <HAL_TIM_Base_Start_IT+0x80>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a1e      	ldr	r2, [pc, #120]	@ (8007704 <HAL_TIM_Base_Start_IT+0xcc>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d013      	beq.n	80076b8 <HAL_TIM_Base_Start_IT+0x80>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a1c      	ldr	r2, [pc, #112]	@ (8007708 <HAL_TIM_Base_Start_IT+0xd0>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d00e      	beq.n	80076b8 <HAL_TIM_Base_Start_IT+0x80>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a1b      	ldr	r2, [pc, #108]	@ (800770c <HAL_TIM_Base_Start_IT+0xd4>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d009      	beq.n	80076b8 <HAL_TIM_Base_Start_IT+0x80>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a19      	ldr	r2, [pc, #100]	@ (8007710 <HAL_TIM_Base_Start_IT+0xd8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <HAL_TIM_Base_Start_IT+0x80>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a18      	ldr	r2, [pc, #96]	@ (8007714 <HAL_TIM_Base_Start_IT+0xdc>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d111      	bne.n	80076dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f003 0307 	and.w	r3, r3, #7
 80076c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b06      	cmp	r3, #6
 80076c8:	d010      	beq.n	80076ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0201 	orr.w	r2, r2, #1
 80076d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076da:	e007      	b.n	80076ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0201 	orr.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	40010000 	.word	0x40010000
 8007700:	40000400 	.word	0x40000400
 8007704:	40000800 	.word	0x40000800
 8007708:	40000c00 	.word	0x40000c00
 800770c:	40010400 	.word	0x40010400
 8007710:	40014000 	.word	0x40014000
 8007714:	40001800 	.word	0x40001800

08007718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d020      	beq.n	800777c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01b      	beq.n	800777c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f06f 0202 	mvn.w	r2, #2
 800774c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f8d2 	bl	800790c <HAL_TIM_IC_CaptureCallback>
 8007768:	e005      	b.n	8007776 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f8c4 	bl	80078f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f8d5 	bl	8007920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f003 0304 	and.w	r3, r3, #4
 8007782:	2b00      	cmp	r3, #0
 8007784:	d020      	beq.n	80077c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01b      	beq.n	80077c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f06f 0204 	mvn.w	r2, #4
 8007798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2202      	movs	r2, #2
 800779e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f8ac 	bl	800790c <HAL_TIM_IC_CaptureCallback>
 80077b4:	e005      	b.n	80077c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f89e 	bl	80078f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f8af 	bl	8007920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f003 0308 	and.w	r3, r3, #8
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d020      	beq.n	8007814 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f003 0308 	and.w	r3, r3, #8
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01b      	beq.n	8007814 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f06f 0208 	mvn.w	r2, #8
 80077e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2204      	movs	r2, #4
 80077ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f886 	bl	800790c <HAL_TIM_IC_CaptureCallback>
 8007800:	e005      	b.n	800780e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f878 	bl	80078f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f889 	bl	8007920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f003 0310 	and.w	r3, r3, #16
 800781a:	2b00      	cmp	r3, #0
 800781c:	d020      	beq.n	8007860 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01b      	beq.n	8007860 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0210 	mvn.w	r2, #16
 8007830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2208      	movs	r2, #8
 8007836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f860 	bl	800790c <HAL_TIM_IC_CaptureCallback>
 800784c:	e005      	b.n	800785a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f852 	bl	80078f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f863 	bl	8007920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00c      	beq.n	8007884 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d007      	beq.n	8007884 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f06f 0201 	mvn.w	r2, #1
 800787c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fb fb54 	bl	8002f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00c      	beq.n	80078a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007894:	2b00      	cmp	r3, #0
 8007896:	d007      	beq.n	80078a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80078a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f900 	bl	8007aa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00c      	beq.n	80078cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d007      	beq.n	80078cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80078c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f834 	bl	8007934 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f003 0320 	and.w	r3, r3, #32
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00c      	beq.n	80078f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d007      	beq.n	80078f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f06f 0220 	mvn.w	r2, #32
 80078e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f8d2 	bl	8007a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078f0:	bf00      	nop
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a43      	ldr	r2, [pc, #268]	@ (8007a68 <TIM_Base_SetConfig+0x120>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d013      	beq.n	8007988 <TIM_Base_SetConfig+0x40>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007966:	d00f      	beq.n	8007988 <TIM_Base_SetConfig+0x40>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a40      	ldr	r2, [pc, #256]	@ (8007a6c <TIM_Base_SetConfig+0x124>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00b      	beq.n	8007988 <TIM_Base_SetConfig+0x40>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a3f      	ldr	r2, [pc, #252]	@ (8007a70 <TIM_Base_SetConfig+0x128>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d007      	beq.n	8007988 <TIM_Base_SetConfig+0x40>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a3e      	ldr	r2, [pc, #248]	@ (8007a74 <TIM_Base_SetConfig+0x12c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d003      	beq.n	8007988 <TIM_Base_SetConfig+0x40>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a3d      	ldr	r2, [pc, #244]	@ (8007a78 <TIM_Base_SetConfig+0x130>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d108      	bne.n	800799a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800798e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	4313      	orrs	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a32      	ldr	r2, [pc, #200]	@ (8007a68 <TIM_Base_SetConfig+0x120>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d02b      	beq.n	80079fa <TIM_Base_SetConfig+0xb2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079a8:	d027      	beq.n	80079fa <TIM_Base_SetConfig+0xb2>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a2f      	ldr	r2, [pc, #188]	@ (8007a6c <TIM_Base_SetConfig+0x124>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d023      	beq.n	80079fa <TIM_Base_SetConfig+0xb2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a2e      	ldr	r2, [pc, #184]	@ (8007a70 <TIM_Base_SetConfig+0x128>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d01f      	beq.n	80079fa <TIM_Base_SetConfig+0xb2>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a2d      	ldr	r2, [pc, #180]	@ (8007a74 <TIM_Base_SetConfig+0x12c>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d01b      	beq.n	80079fa <TIM_Base_SetConfig+0xb2>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a2c      	ldr	r2, [pc, #176]	@ (8007a78 <TIM_Base_SetConfig+0x130>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d017      	beq.n	80079fa <TIM_Base_SetConfig+0xb2>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a2b      	ldr	r2, [pc, #172]	@ (8007a7c <TIM_Base_SetConfig+0x134>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d013      	beq.n	80079fa <TIM_Base_SetConfig+0xb2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007a80 <TIM_Base_SetConfig+0x138>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d00f      	beq.n	80079fa <TIM_Base_SetConfig+0xb2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a29      	ldr	r2, [pc, #164]	@ (8007a84 <TIM_Base_SetConfig+0x13c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00b      	beq.n	80079fa <TIM_Base_SetConfig+0xb2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a28      	ldr	r2, [pc, #160]	@ (8007a88 <TIM_Base_SetConfig+0x140>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d007      	beq.n	80079fa <TIM_Base_SetConfig+0xb2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a27      	ldr	r2, [pc, #156]	@ (8007a8c <TIM_Base_SetConfig+0x144>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d003      	beq.n	80079fa <TIM_Base_SetConfig+0xb2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a26      	ldr	r2, [pc, #152]	@ (8007a90 <TIM_Base_SetConfig+0x148>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d108      	bne.n	8007a0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8007a68 <TIM_Base_SetConfig+0x120>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d003      	beq.n	8007a3a <TIM_Base_SetConfig+0xf2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a10      	ldr	r2, [pc, #64]	@ (8007a78 <TIM_Base_SetConfig+0x130>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d103      	bne.n	8007a42 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	691a      	ldr	r2, [r3, #16]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f043 0204 	orr.w	r2, r3, #4
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	601a      	str	r2, [r3, #0]
}
 8007a5a:	bf00      	nop
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	40010000 	.word	0x40010000
 8007a6c:	40000400 	.word	0x40000400
 8007a70:	40000800 	.word	0x40000800
 8007a74:	40000c00 	.word	0x40000c00
 8007a78:	40010400 	.word	0x40010400
 8007a7c:	40014000 	.word	0x40014000
 8007a80:	40014400 	.word	0x40014400
 8007a84:	40014800 	.word	0x40014800
 8007a88:	40001800 	.word	0x40001800
 8007a8c:	40001c00 	.word	0x40001c00
 8007a90:	40002000 	.word	0x40002000

08007a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e042      	b.n	8007b54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d106      	bne.n	8007ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fc fbea 	bl	80042bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2224      	movs	r2, #36	@ 0x24
 8007aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fdd3 	bl	80086ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	695a      	ldr	r2, [r3, #20]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2220      	movs	r2, #32
 8007b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2220      	movs	r2, #32
 8007b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08a      	sub	sp, #40	@ 0x28
 8007b60:	af02      	add	r7, sp, #8
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	603b      	str	r3, [r7, #0]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b20      	cmp	r3, #32
 8007b7a:	d175      	bne.n	8007c68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <HAL_UART_Transmit+0x2c>
 8007b82:	88fb      	ldrh	r3, [r7, #6]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e06e      	b.n	8007c6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2221      	movs	r2, #33	@ 0x21
 8007b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b9a:	f7fc fe4d 	bl	8004838 <HAL_GetTick>
 8007b9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	88fa      	ldrh	r2, [r7, #6]
 8007ba4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	88fa      	ldrh	r2, [r7, #6]
 8007baa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bb4:	d108      	bne.n	8007bc8 <HAL_UART_Transmit+0x6c>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d104      	bne.n	8007bc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	61bb      	str	r3, [r7, #24]
 8007bc6:	e003      	b.n	8007bd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007bd0:	e02e      	b.n	8007c30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2180      	movs	r1, #128	@ 0x80
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 fb37 	bl	8008250 <UART_WaitOnFlagUntilTimeout>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d005      	beq.n	8007bf4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e03a      	b.n	8007c6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10b      	bne.n	8007c12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	881b      	ldrh	r3, [r3, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	3302      	adds	r3, #2
 8007c0e:	61bb      	str	r3, [r7, #24]
 8007c10:	e007      	b.n	8007c22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	781a      	ldrb	r2, [r3, #0]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1cb      	bne.n	8007bd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2200      	movs	r2, #0
 8007c42:	2140      	movs	r1, #64	@ 0x40
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 fb03 	bl	8008250 <UART_WaitOnFlagUntilTimeout>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2220      	movs	r2, #32
 8007c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e006      	b.n	8007c6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007c64:	2300      	movs	r3, #0
 8007c66:	e000      	b.n	8007c6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007c68:	2302      	movs	r3, #2
  }
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3720      	adds	r7, #32
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	60f8      	str	r0, [r7, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b20      	cmp	r3, #32
 8007c8a:	d112      	bne.n	8007cb2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <HAL_UART_Receive_IT+0x26>
 8007c92:	88fb      	ldrh	r3, [r7, #6]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e00b      	b.n	8007cb4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	68b9      	ldr	r1, [r7, #8]
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 fb2a 	bl	8008302 <UART_Start_Receive_IT>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	e000      	b.n	8007cb4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007cb2:	2302      	movs	r3, #2
  }
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b0ba      	sub	sp, #232	@ 0xe8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cf2:	f003 030f 	and.w	r3, r3, #15
 8007cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10f      	bne.n	8007d22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d06:	f003 0320 	and.w	r3, r3, #32
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d009      	beq.n	8007d22 <HAL_UART_IRQHandler+0x66>
 8007d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d12:	f003 0320 	and.w	r3, r3, #32
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d003      	beq.n	8007d22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fc07 	bl	800852e <UART_Receive_IT>
      return;
 8007d20:	e273      	b.n	800820a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 80de 	beq.w	8007ee8 <HAL_UART_IRQHandler+0x22c>
 8007d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d106      	bne.n	8007d46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d3c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 80d1 	beq.w	8007ee8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00b      	beq.n	8007d6a <HAL_UART_IRQHandler+0xae>
 8007d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d005      	beq.n	8007d6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d62:	f043 0201 	orr.w	r2, r3, #1
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d6e:	f003 0304 	and.w	r3, r3, #4
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00b      	beq.n	8007d8e <HAL_UART_IRQHandler+0xd2>
 8007d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d005      	beq.n	8007d8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d86:	f043 0202 	orr.w	r2, r3, #2
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00b      	beq.n	8007db2 <HAL_UART_IRQHandler+0xf6>
 8007d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d005      	beq.n	8007db2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007daa:	f043 0204 	orr.w	r2, r3, #4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d011      	beq.n	8007de2 <HAL_UART_IRQHandler+0x126>
 8007dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d105      	bne.n	8007dd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d005      	beq.n	8007de2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dda:	f043 0208 	orr.w	r2, r3, #8
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 820a 	beq.w	8008200 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df0:	f003 0320 	and.w	r3, r3, #32
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d008      	beq.n	8007e0a <HAL_UART_IRQHandler+0x14e>
 8007df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dfc:	f003 0320 	and.w	r3, r3, #32
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fb92 	bl	800852e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e14:	2b40      	cmp	r3, #64	@ 0x40
 8007e16:	bf0c      	ite	eq
 8007e18:	2301      	moveq	r3, #1
 8007e1a:	2300      	movne	r3, #0
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e26:	f003 0308 	and.w	r3, r3, #8
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d103      	bne.n	8007e36 <HAL_UART_IRQHandler+0x17a>
 8007e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d04f      	beq.n	8007ed6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa9d 	bl	8008376 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e46:	2b40      	cmp	r3, #64	@ 0x40
 8007e48:	d141      	bne.n	8007ece <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3314      	adds	r3, #20
 8007e50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e58:	e853 3f00 	ldrex	r3, [r3]
 8007e5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3314      	adds	r3, #20
 8007e72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1d9      	bne.n	8007e4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d013      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea2:	4a8a      	ldr	r2, [pc, #552]	@ (80080cc <HAL_UART_IRQHandler+0x410>)
 8007ea4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fc fe46 	bl	8004b3c <HAL_DMA_Abort_IT>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d016      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ec4:	e00e      	b.n	8007ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f9ac 	bl	8008224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ecc:	e00a      	b.n	8007ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f9a8 	bl	8008224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ed4:	e006      	b.n	8007ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f9a4 	bl	8008224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007ee2:	e18d      	b.n	8008200 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ee4:	bf00      	nop
    return;
 8007ee6:	e18b      	b.n	8008200 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	f040 8167 	bne.w	80081c0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef6:	f003 0310 	and.w	r3, r3, #16
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 8160 	beq.w	80081c0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 8159 	beq.w	80081c0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60bb      	str	r3, [r7, #8]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	60bb      	str	r3, [r7, #8]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	60bb      	str	r3, [r7, #8]
 8007f22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f2e:	2b40      	cmp	r3, #64	@ 0x40
 8007f30:	f040 80ce 	bne.w	80080d0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 80a9 	beq.w	800809c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f52:	429a      	cmp	r2, r3
 8007f54:	f080 80a2 	bcs.w	800809c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007f5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f6a:	f000 8088 	beq.w	800807e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	330c      	adds	r3, #12
 8007f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	330c      	adds	r3, #12
 8007f96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007f9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007fa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007faa:	e841 2300 	strex	r3, r2, [r1]
 8007fae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1d9      	bne.n	8007f6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3314      	adds	r3, #20
 8007fc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fc4:	e853 3f00 	ldrex	r3, [r3]
 8007fc8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007fca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007fcc:	f023 0301 	bic.w	r3, r3, #1
 8007fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3314      	adds	r3, #20
 8007fda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007fde:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007fe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007fe6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007ff0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e1      	bne.n	8007fba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3314      	adds	r3, #20
 8007ffc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800800c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3314      	adds	r3, #20
 8008016:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800801a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800801c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008020:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008022:	e841 2300 	strex	r3, r2, [r1]
 8008026:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008028:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1e3      	bne.n	8007ff6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	330c      	adds	r3, #12
 8008042:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008046:	e853 3f00 	ldrex	r3, [r3]
 800804a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800804c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800804e:	f023 0310 	bic.w	r3, r3, #16
 8008052:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	330c      	adds	r3, #12
 800805c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008060:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008062:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008066:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800806e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e3      	bne.n	800803c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008078:	4618      	mov	r0, r3
 800807a:	f7fc fcef 	bl	8004a5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800808c:	b29b      	uxth	r3, r3
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	b29b      	uxth	r3, r3
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f8cf 	bl	8008238 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800809a:	e0b3      	b.n	8008204 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80080a4:	429a      	cmp	r2, r3
 80080a6:	f040 80ad 	bne.w	8008204 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080b4:	f040 80a6 	bne.w	8008204 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2202      	movs	r2, #2
 80080bc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f8b7 	bl	8008238 <HAL_UARTEx_RxEventCallback>
      return;
 80080ca:	e09b      	b.n	8008204 <HAL_UART_IRQHandler+0x548>
 80080cc:	0800843d 	.word	0x0800843d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80080d8:	b29b      	uxth	r3, r3
 80080da:	1ad3      	subs	r3, r2, r3
 80080dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 808e 	beq.w	8008208 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80080ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 8089 	beq.w	8008208 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	330c      	adds	r3, #12
 80080fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008100:	e853 3f00 	ldrex	r3, [r3]
 8008104:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800810c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	330c      	adds	r3, #12
 8008116:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800811a:	647a      	str	r2, [r7, #68]	@ 0x44
 800811c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008120:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008122:	e841 2300 	strex	r3, r2, [r1]
 8008126:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1e3      	bne.n	80080f6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3314      	adds	r3, #20
 8008134:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	623b      	str	r3, [r7, #32]
   return(result);
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	f023 0301 	bic.w	r3, r3, #1
 8008144:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3314      	adds	r3, #20
 800814e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008152:	633a      	str	r2, [r7, #48]	@ 0x30
 8008154:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e3      	bne.n	800812e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	330c      	adds	r3, #12
 800817a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	e853 3f00 	ldrex	r3, [r3]
 8008182:	60fb      	str	r3, [r7, #12]
   return(result);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f023 0310 	bic.w	r3, r3, #16
 800818a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	330c      	adds	r3, #12
 8008194:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008198:	61fa      	str	r2, [r7, #28]
 800819a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	69b9      	ldr	r1, [r7, #24]
 800819e:	69fa      	ldr	r2, [r7, #28]
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	617b      	str	r3, [r7, #20]
   return(result);
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e3      	bne.n	8008174 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2202      	movs	r2, #2
 80081b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f83d 	bl	8008238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081be:	e023      	b.n	8008208 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80081c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d009      	beq.n	80081e0 <HAL_UART_IRQHandler+0x524>
 80081cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d003      	beq.n	80081e0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f940 	bl	800845e <UART_Transmit_IT>
    return;
 80081de:	e014      	b.n	800820a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80081e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00e      	beq.n	800820a <HAL_UART_IRQHandler+0x54e>
 80081ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d008      	beq.n	800820a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 f980 	bl	80084fe <UART_EndTransmit_IT>
    return;
 80081fe:	e004      	b.n	800820a <HAL_UART_IRQHandler+0x54e>
    return;
 8008200:	bf00      	nop
 8008202:	e002      	b.n	800820a <HAL_UART_IRQHandler+0x54e>
      return;
 8008204:	bf00      	nop
 8008206:	e000      	b.n	800820a <HAL_UART_IRQHandler+0x54e>
      return;
 8008208:	bf00      	nop
  }
}
 800820a:	37e8      	adds	r7, #232	@ 0xe8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	603b      	str	r3, [r7, #0]
 800825c:	4613      	mov	r3, r2
 800825e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008260:	e03b      	b.n	80082da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008268:	d037      	beq.n	80082da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800826a:	f7fc fae5 	bl	8004838 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	6a3a      	ldr	r2, [r7, #32]
 8008276:	429a      	cmp	r2, r3
 8008278:	d302      	bcc.n	8008280 <UART_WaitOnFlagUntilTimeout+0x30>
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e03a      	b.n	80082fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	2b00      	cmp	r3, #0
 8008290:	d023      	beq.n	80082da <UART_WaitOnFlagUntilTimeout+0x8a>
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2b80      	cmp	r3, #128	@ 0x80
 8008296:	d020      	beq.n	80082da <UART_WaitOnFlagUntilTimeout+0x8a>
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2b40      	cmp	r3, #64	@ 0x40
 800829c:	d01d      	beq.n	80082da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0308 	and.w	r3, r3, #8
 80082a8:	2b08      	cmp	r3, #8
 80082aa:	d116      	bne.n	80082da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80082ac:	2300      	movs	r3, #0
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	617b      	str	r3, [r7, #20]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 f857 	bl	8008376 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2208      	movs	r2, #8
 80082cc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e00f      	b.n	80082fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4013      	ands	r3, r2
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	bf0c      	ite	eq
 80082ea:	2301      	moveq	r3, #1
 80082ec:	2300      	movne	r3, #0
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	461a      	mov	r2, r3
 80082f2:	79fb      	ldrb	r3, [r7, #7]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d0b4      	beq.n	8008262 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008302:	b480      	push	{r7}
 8008304:	b085      	sub	sp, #20
 8008306:	af00      	add	r7, sp, #0
 8008308:	60f8      	str	r0, [r7, #12]
 800830a:	60b9      	str	r1, [r7, #8]
 800830c:	4613      	mov	r3, r2
 800830e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	88fa      	ldrh	r2, [r7, #6]
 800831a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	88fa      	ldrh	r2, [r7, #6]
 8008320:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2222      	movs	r2, #34	@ 0x22
 800832c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d007      	beq.n	8008348 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68da      	ldr	r2, [r3, #12]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008346:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	695a      	ldr	r2, [r3, #20]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0201 	orr.w	r2, r2, #1
 8008356:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68da      	ldr	r2, [r3, #12]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f042 0220 	orr.w	r2, r2, #32
 8008366:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008376:	b480      	push	{r7}
 8008378:	b095      	sub	sp, #84	@ 0x54
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	330c      	adds	r3, #12
 8008384:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800838e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008390:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008394:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	330c      	adds	r3, #12
 800839c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800839e:	643a      	str	r2, [r7, #64]	@ 0x40
 80083a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e5      	bne.n	800837e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3314      	adds	r3, #20
 80083b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	e853 3f00 	ldrex	r3, [r3]
 80083c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	f023 0301 	bic.w	r3, r3, #1
 80083c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3314      	adds	r3, #20
 80083d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083da:	e841 2300 	strex	r3, r2, [r1]
 80083de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1e5      	bne.n	80083b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d119      	bne.n	8008422 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	330c      	adds	r3, #12
 80083f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f023 0310 	bic.w	r3, r3, #16
 8008404:	647b      	str	r3, [r7, #68]	@ 0x44
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	330c      	adds	r3, #12
 800840c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800840e:	61ba      	str	r2, [r7, #24]
 8008410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	6979      	ldr	r1, [r7, #20]
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	613b      	str	r3, [r7, #16]
   return(result);
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e5      	bne.n	80083ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2220      	movs	r2, #32
 8008426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008430:	bf00      	nop
 8008432:	3754      	adds	r7, #84	@ 0x54
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008448:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f7ff fee7 	bl	8008224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008456:	bf00      	nop
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800845e:	b480      	push	{r7}
 8008460:	b085      	sub	sp, #20
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b21      	cmp	r3, #33	@ 0x21
 8008470:	d13e      	bne.n	80084f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800847a:	d114      	bne.n	80084a6 <UART_Transmit_IT+0x48>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d110      	bne.n	80084a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008498:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	1c9a      	adds	r2, r3, #2
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	621a      	str	r2, [r3, #32]
 80084a4:	e008      	b.n	80084b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	1c59      	adds	r1, r3, #1
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6211      	str	r1, [r2, #32]
 80084b0:	781a      	ldrb	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084bc:	b29b      	uxth	r3, r3
 80084be:	3b01      	subs	r3, #1
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	4619      	mov	r1, r3
 80084c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10f      	bne.n	80084ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80084da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	e000      	b.n	80084f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80084f0:	2302      	movs	r3, #2
  }
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008514:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2220      	movs	r2, #32
 800851a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7ff fe76 	bl	8008210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b08c      	sub	sp, #48	@ 0x30
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008536:	2300      	movs	r3, #0
 8008538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800853a:	2300      	movs	r3, #0
 800853c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b22      	cmp	r3, #34	@ 0x22
 8008548:	f040 80aa 	bne.w	80086a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008554:	d115      	bne.n	8008582 <UART_Receive_IT+0x54>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d111      	bne.n	8008582 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008562:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	b29b      	uxth	r3, r3
 800856c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008570:	b29a      	uxth	r2, r3
 8008572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008574:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857a:	1c9a      	adds	r2, r3, #2
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008580:	e024      	b.n	80085cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008586:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008590:	d007      	beq.n	80085a2 <UART_Receive_IT+0x74>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10a      	bne.n	80085b0 <UART_Receive_IT+0x82>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d106      	bne.n	80085b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ac:	701a      	strb	r2, [r3, #0]
 80085ae:	e008      	b.n	80085c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	3b01      	subs	r3, #1
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	4619      	mov	r1, r3
 80085da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d15d      	bne.n	800869c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68da      	ldr	r2, [r3, #12]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 0220 	bic.w	r2, r2, #32
 80085ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68da      	ldr	r2, [r3, #12]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	695a      	ldr	r2, [r3, #20]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f022 0201 	bic.w	r2, r2, #1
 800860e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2220      	movs	r2, #32
 8008614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008622:	2b01      	cmp	r3, #1
 8008624:	d135      	bne.n	8008692 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	330c      	adds	r3, #12
 8008632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	613b      	str	r3, [r7, #16]
   return(result);
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	f023 0310 	bic.w	r3, r3, #16
 8008642:	627b      	str	r3, [r7, #36]	@ 0x24
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	330c      	adds	r3, #12
 800864a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800864c:	623a      	str	r2, [r7, #32]
 800864e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	69f9      	ldr	r1, [r7, #28]
 8008652:	6a3a      	ldr	r2, [r7, #32]
 8008654:	e841 2300 	strex	r3, r2, [r1]
 8008658:	61bb      	str	r3, [r7, #24]
   return(result);
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e5      	bne.n	800862c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0310 	and.w	r3, r3, #16
 800866a:	2b10      	cmp	r3, #16
 800866c:	d10a      	bne.n	8008684 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800866e:	2300      	movs	r3, #0
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	60fb      	str	r3, [r7, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	60fb      	str	r3, [r7, #12]
 8008682:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7ff fdd4 	bl	8008238 <HAL_UARTEx_RxEventCallback>
 8008690:	e002      	b.n	8008698 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7f9 fa5a 	bl	8001b4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	e002      	b.n	80086a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	e000      	b.n	80086a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80086a0:	2302      	movs	r3, #2
  }
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3730      	adds	r7, #48	@ 0x30
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086b0:	b0c0      	sub	sp, #256	@ 0x100
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80086c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086c8:	68d9      	ldr	r1, [r3, #12]
 80086ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	ea40 0301 	orr.w	r3, r0, r1
 80086d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	431a      	orrs	r2, r3
 80086e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	431a      	orrs	r2, r3
 80086ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80086f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008704:	f021 010c 	bic.w	r1, r1, #12
 8008708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008712:	430b      	orrs	r3, r1
 8008714:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008726:	6999      	ldr	r1, [r3, #24]
 8008728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	ea40 0301 	orr.w	r3, r0, r1
 8008732:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	4b8f      	ldr	r3, [pc, #572]	@ (8008978 <UART_SetConfig+0x2cc>)
 800873c:	429a      	cmp	r2, r3
 800873e:	d005      	beq.n	800874c <UART_SetConfig+0xa0>
 8008740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	4b8d      	ldr	r3, [pc, #564]	@ (800897c <UART_SetConfig+0x2d0>)
 8008748:	429a      	cmp	r2, r3
 800874a:	d104      	bne.n	8008756 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800874c:	f7fe fe30 	bl	80073b0 <HAL_RCC_GetPCLK2Freq>
 8008750:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008754:	e003      	b.n	800875e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008756:	f7fe fe17 	bl	8007388 <HAL_RCC_GetPCLK1Freq>
 800875a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800875e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008762:	69db      	ldr	r3, [r3, #28]
 8008764:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008768:	f040 810c 	bne.w	8008984 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800876c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008770:	2200      	movs	r2, #0
 8008772:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008776:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800877a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800877e:	4622      	mov	r2, r4
 8008780:	462b      	mov	r3, r5
 8008782:	1891      	adds	r1, r2, r2
 8008784:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008786:	415b      	adcs	r3, r3
 8008788:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800878a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800878e:	4621      	mov	r1, r4
 8008790:	eb12 0801 	adds.w	r8, r2, r1
 8008794:	4629      	mov	r1, r5
 8008796:	eb43 0901 	adc.w	r9, r3, r1
 800879a:	f04f 0200 	mov.w	r2, #0
 800879e:	f04f 0300 	mov.w	r3, #0
 80087a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087ae:	4690      	mov	r8, r2
 80087b0:	4699      	mov	r9, r3
 80087b2:	4623      	mov	r3, r4
 80087b4:	eb18 0303 	adds.w	r3, r8, r3
 80087b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80087bc:	462b      	mov	r3, r5
 80087be:	eb49 0303 	adc.w	r3, r9, r3
 80087c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80087c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80087d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80087da:	460b      	mov	r3, r1
 80087dc:	18db      	adds	r3, r3, r3
 80087de:	653b      	str	r3, [r7, #80]	@ 0x50
 80087e0:	4613      	mov	r3, r2
 80087e2:	eb42 0303 	adc.w	r3, r2, r3
 80087e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80087e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80087ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80087f0:	f7f8 fa2a 	bl	8000c48 <__aeabi_uldivmod>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4b61      	ldr	r3, [pc, #388]	@ (8008980 <UART_SetConfig+0x2d4>)
 80087fa:	fba3 2302 	umull	r2, r3, r3, r2
 80087fe:	095b      	lsrs	r3, r3, #5
 8008800:	011c      	lsls	r4, r3, #4
 8008802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008806:	2200      	movs	r2, #0
 8008808:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800880c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008810:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008814:	4642      	mov	r2, r8
 8008816:	464b      	mov	r3, r9
 8008818:	1891      	adds	r1, r2, r2
 800881a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800881c:	415b      	adcs	r3, r3
 800881e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008820:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008824:	4641      	mov	r1, r8
 8008826:	eb12 0a01 	adds.w	sl, r2, r1
 800882a:	4649      	mov	r1, r9
 800882c:	eb43 0b01 	adc.w	fp, r3, r1
 8008830:	f04f 0200 	mov.w	r2, #0
 8008834:	f04f 0300 	mov.w	r3, #0
 8008838:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800883c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008844:	4692      	mov	sl, r2
 8008846:	469b      	mov	fp, r3
 8008848:	4643      	mov	r3, r8
 800884a:	eb1a 0303 	adds.w	r3, sl, r3
 800884e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008852:	464b      	mov	r3, r9
 8008854:	eb4b 0303 	adc.w	r3, fp, r3
 8008858:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800885c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008868:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800886c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008870:	460b      	mov	r3, r1
 8008872:	18db      	adds	r3, r3, r3
 8008874:	643b      	str	r3, [r7, #64]	@ 0x40
 8008876:	4613      	mov	r3, r2
 8008878:	eb42 0303 	adc.w	r3, r2, r3
 800887c:	647b      	str	r3, [r7, #68]	@ 0x44
 800887e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008882:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008886:	f7f8 f9df 	bl	8000c48 <__aeabi_uldivmod>
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	4611      	mov	r1, r2
 8008890:	4b3b      	ldr	r3, [pc, #236]	@ (8008980 <UART_SetConfig+0x2d4>)
 8008892:	fba3 2301 	umull	r2, r3, r3, r1
 8008896:	095b      	lsrs	r3, r3, #5
 8008898:	2264      	movs	r2, #100	@ 0x64
 800889a:	fb02 f303 	mul.w	r3, r2, r3
 800889e:	1acb      	subs	r3, r1, r3
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80088a6:	4b36      	ldr	r3, [pc, #216]	@ (8008980 <UART_SetConfig+0x2d4>)
 80088a8:	fba3 2302 	umull	r2, r3, r3, r2
 80088ac:	095b      	lsrs	r3, r3, #5
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80088b4:	441c      	add	r4, r3
 80088b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088ba:	2200      	movs	r2, #0
 80088bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80088c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80088c8:	4642      	mov	r2, r8
 80088ca:	464b      	mov	r3, r9
 80088cc:	1891      	adds	r1, r2, r2
 80088ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80088d0:	415b      	adcs	r3, r3
 80088d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80088d8:	4641      	mov	r1, r8
 80088da:	1851      	adds	r1, r2, r1
 80088dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80088de:	4649      	mov	r1, r9
 80088e0:	414b      	adcs	r3, r1
 80088e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	f04f 0300 	mov.w	r3, #0
 80088ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80088f0:	4659      	mov	r1, fp
 80088f2:	00cb      	lsls	r3, r1, #3
 80088f4:	4651      	mov	r1, sl
 80088f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088fa:	4651      	mov	r1, sl
 80088fc:	00ca      	lsls	r2, r1, #3
 80088fe:	4610      	mov	r0, r2
 8008900:	4619      	mov	r1, r3
 8008902:	4603      	mov	r3, r0
 8008904:	4642      	mov	r2, r8
 8008906:	189b      	adds	r3, r3, r2
 8008908:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800890c:	464b      	mov	r3, r9
 800890e:	460a      	mov	r2, r1
 8008910:	eb42 0303 	adc.w	r3, r2, r3
 8008914:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008924:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008928:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800892c:	460b      	mov	r3, r1
 800892e:	18db      	adds	r3, r3, r3
 8008930:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008932:	4613      	mov	r3, r2
 8008934:	eb42 0303 	adc.w	r3, r2, r3
 8008938:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800893a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800893e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008942:	f7f8 f981 	bl	8000c48 <__aeabi_uldivmod>
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	4b0d      	ldr	r3, [pc, #52]	@ (8008980 <UART_SetConfig+0x2d4>)
 800894c:	fba3 1302 	umull	r1, r3, r3, r2
 8008950:	095b      	lsrs	r3, r3, #5
 8008952:	2164      	movs	r1, #100	@ 0x64
 8008954:	fb01 f303 	mul.w	r3, r1, r3
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	3332      	adds	r3, #50	@ 0x32
 800895e:	4a08      	ldr	r2, [pc, #32]	@ (8008980 <UART_SetConfig+0x2d4>)
 8008960:	fba2 2303 	umull	r2, r3, r2, r3
 8008964:	095b      	lsrs	r3, r3, #5
 8008966:	f003 0207 	and.w	r2, r3, #7
 800896a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4422      	add	r2, r4
 8008972:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008974:	e106      	b.n	8008b84 <UART_SetConfig+0x4d8>
 8008976:	bf00      	nop
 8008978:	40011000 	.word	0x40011000
 800897c:	40011400 	.word	0x40011400
 8008980:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008988:	2200      	movs	r2, #0
 800898a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800898e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008992:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008996:	4642      	mov	r2, r8
 8008998:	464b      	mov	r3, r9
 800899a:	1891      	adds	r1, r2, r2
 800899c:	6239      	str	r1, [r7, #32]
 800899e:	415b      	adcs	r3, r3
 80089a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80089a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089a6:	4641      	mov	r1, r8
 80089a8:	1854      	adds	r4, r2, r1
 80089aa:	4649      	mov	r1, r9
 80089ac:	eb43 0501 	adc.w	r5, r3, r1
 80089b0:	f04f 0200 	mov.w	r2, #0
 80089b4:	f04f 0300 	mov.w	r3, #0
 80089b8:	00eb      	lsls	r3, r5, #3
 80089ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089be:	00e2      	lsls	r2, r4, #3
 80089c0:	4614      	mov	r4, r2
 80089c2:	461d      	mov	r5, r3
 80089c4:	4643      	mov	r3, r8
 80089c6:	18e3      	adds	r3, r4, r3
 80089c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80089cc:	464b      	mov	r3, r9
 80089ce:	eb45 0303 	adc.w	r3, r5, r3
 80089d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80089d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80089e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80089e6:	f04f 0200 	mov.w	r2, #0
 80089ea:	f04f 0300 	mov.w	r3, #0
 80089ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80089f2:	4629      	mov	r1, r5
 80089f4:	008b      	lsls	r3, r1, #2
 80089f6:	4621      	mov	r1, r4
 80089f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089fc:	4621      	mov	r1, r4
 80089fe:	008a      	lsls	r2, r1, #2
 8008a00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008a04:	f7f8 f920 	bl	8000c48 <__aeabi_uldivmod>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4b60      	ldr	r3, [pc, #384]	@ (8008b90 <UART_SetConfig+0x4e4>)
 8008a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8008a12:	095b      	lsrs	r3, r3, #5
 8008a14:	011c      	lsls	r4, r3, #4
 8008a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008a24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008a28:	4642      	mov	r2, r8
 8008a2a:	464b      	mov	r3, r9
 8008a2c:	1891      	adds	r1, r2, r2
 8008a2e:	61b9      	str	r1, [r7, #24]
 8008a30:	415b      	adcs	r3, r3
 8008a32:	61fb      	str	r3, [r7, #28]
 8008a34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a38:	4641      	mov	r1, r8
 8008a3a:	1851      	adds	r1, r2, r1
 8008a3c:	6139      	str	r1, [r7, #16]
 8008a3e:	4649      	mov	r1, r9
 8008a40:	414b      	adcs	r3, r1
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	f04f 0200 	mov.w	r2, #0
 8008a48:	f04f 0300 	mov.w	r3, #0
 8008a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a50:	4659      	mov	r1, fp
 8008a52:	00cb      	lsls	r3, r1, #3
 8008a54:	4651      	mov	r1, sl
 8008a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a5a:	4651      	mov	r1, sl
 8008a5c:	00ca      	lsls	r2, r1, #3
 8008a5e:	4610      	mov	r0, r2
 8008a60:	4619      	mov	r1, r3
 8008a62:	4603      	mov	r3, r0
 8008a64:	4642      	mov	r2, r8
 8008a66:	189b      	adds	r3, r3, r2
 8008a68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a6c:	464b      	mov	r3, r9
 8008a6e:	460a      	mov	r2, r1
 8008a70:	eb42 0303 	adc.w	r3, r2, r3
 8008a74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008a84:	f04f 0200 	mov.w	r2, #0
 8008a88:	f04f 0300 	mov.w	r3, #0
 8008a8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008a90:	4649      	mov	r1, r9
 8008a92:	008b      	lsls	r3, r1, #2
 8008a94:	4641      	mov	r1, r8
 8008a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a9a:	4641      	mov	r1, r8
 8008a9c:	008a      	lsls	r2, r1, #2
 8008a9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008aa2:	f7f8 f8d1 	bl	8000c48 <__aeabi_uldivmod>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4611      	mov	r1, r2
 8008aac:	4b38      	ldr	r3, [pc, #224]	@ (8008b90 <UART_SetConfig+0x4e4>)
 8008aae:	fba3 2301 	umull	r2, r3, r3, r1
 8008ab2:	095b      	lsrs	r3, r3, #5
 8008ab4:	2264      	movs	r2, #100	@ 0x64
 8008ab6:	fb02 f303 	mul.w	r3, r2, r3
 8008aba:	1acb      	subs	r3, r1, r3
 8008abc:	011b      	lsls	r3, r3, #4
 8008abe:	3332      	adds	r3, #50	@ 0x32
 8008ac0:	4a33      	ldr	r2, [pc, #204]	@ (8008b90 <UART_SetConfig+0x4e4>)
 8008ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac6:	095b      	lsrs	r3, r3, #5
 8008ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008acc:	441c      	add	r4, r3
 8008ace:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ad6:	677a      	str	r2, [r7, #116]	@ 0x74
 8008ad8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008adc:	4642      	mov	r2, r8
 8008ade:	464b      	mov	r3, r9
 8008ae0:	1891      	adds	r1, r2, r2
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	415b      	adcs	r3, r3
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008aec:	4641      	mov	r1, r8
 8008aee:	1851      	adds	r1, r2, r1
 8008af0:	6039      	str	r1, [r7, #0]
 8008af2:	4649      	mov	r1, r9
 8008af4:	414b      	adcs	r3, r1
 8008af6:	607b      	str	r3, [r7, #4]
 8008af8:	f04f 0200 	mov.w	r2, #0
 8008afc:	f04f 0300 	mov.w	r3, #0
 8008b00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b04:	4659      	mov	r1, fp
 8008b06:	00cb      	lsls	r3, r1, #3
 8008b08:	4651      	mov	r1, sl
 8008b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b0e:	4651      	mov	r1, sl
 8008b10:	00ca      	lsls	r2, r1, #3
 8008b12:	4610      	mov	r0, r2
 8008b14:	4619      	mov	r1, r3
 8008b16:	4603      	mov	r3, r0
 8008b18:	4642      	mov	r2, r8
 8008b1a:	189b      	adds	r3, r3, r2
 8008b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b1e:	464b      	mov	r3, r9
 8008b20:	460a      	mov	r2, r1
 8008b22:	eb42 0303 	adc.w	r3, r2, r3
 8008b26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b32:	667a      	str	r2, [r7, #100]	@ 0x64
 8008b34:	f04f 0200 	mov.w	r2, #0
 8008b38:	f04f 0300 	mov.w	r3, #0
 8008b3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008b40:	4649      	mov	r1, r9
 8008b42:	008b      	lsls	r3, r1, #2
 8008b44:	4641      	mov	r1, r8
 8008b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b4a:	4641      	mov	r1, r8
 8008b4c:	008a      	lsls	r2, r1, #2
 8008b4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008b52:	f7f8 f879 	bl	8000c48 <__aeabi_uldivmod>
 8008b56:	4602      	mov	r2, r0
 8008b58:	460b      	mov	r3, r1
 8008b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008b90 <UART_SetConfig+0x4e4>)
 8008b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b60:	095b      	lsrs	r3, r3, #5
 8008b62:	2164      	movs	r1, #100	@ 0x64
 8008b64:	fb01 f303 	mul.w	r3, r1, r3
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	011b      	lsls	r3, r3, #4
 8008b6c:	3332      	adds	r3, #50	@ 0x32
 8008b6e:	4a08      	ldr	r2, [pc, #32]	@ (8008b90 <UART_SetConfig+0x4e4>)
 8008b70:	fba2 2303 	umull	r2, r3, r2, r3
 8008b74:	095b      	lsrs	r3, r3, #5
 8008b76:	f003 020f 	and.w	r2, r3, #15
 8008b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4422      	add	r2, r4
 8008b82:	609a      	str	r2, [r3, #8]
}
 8008b84:	bf00      	nop
 8008b86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b90:	51eb851f 	.word	0x51eb851f

08008b94 <__cvt>:
 8008b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b98:	ec57 6b10 	vmov	r6, r7, d0
 8008b9c:	2f00      	cmp	r7, #0
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	463b      	mov	r3, r7
 8008ba4:	bfbb      	ittet	lt
 8008ba6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008baa:	461f      	movlt	r7, r3
 8008bac:	2300      	movge	r3, #0
 8008bae:	232d      	movlt	r3, #45	@ 0x2d
 8008bb0:	700b      	strb	r3, [r1, #0]
 8008bb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bb4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008bb8:	4691      	mov	r9, r2
 8008bba:	f023 0820 	bic.w	r8, r3, #32
 8008bbe:	bfbc      	itt	lt
 8008bc0:	4632      	movlt	r2, r6
 8008bc2:	4616      	movlt	r6, r2
 8008bc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008bc8:	d005      	beq.n	8008bd6 <__cvt+0x42>
 8008bca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008bce:	d100      	bne.n	8008bd2 <__cvt+0x3e>
 8008bd0:	3401      	adds	r4, #1
 8008bd2:	2102      	movs	r1, #2
 8008bd4:	e000      	b.n	8008bd8 <__cvt+0x44>
 8008bd6:	2103      	movs	r1, #3
 8008bd8:	ab03      	add	r3, sp, #12
 8008bda:	9301      	str	r3, [sp, #4]
 8008bdc:	ab02      	add	r3, sp, #8
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	ec47 6b10 	vmov	d0, r6, r7
 8008be4:	4653      	mov	r3, sl
 8008be6:	4622      	mov	r2, r4
 8008be8:	f000 fe8e 	bl	8009908 <_dtoa_r>
 8008bec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	d119      	bne.n	8008c28 <__cvt+0x94>
 8008bf4:	f019 0f01 	tst.w	r9, #1
 8008bf8:	d00e      	beq.n	8008c18 <__cvt+0x84>
 8008bfa:	eb00 0904 	add.w	r9, r0, r4
 8008bfe:	2200      	movs	r2, #0
 8008c00:	2300      	movs	r3, #0
 8008c02:	4630      	mov	r0, r6
 8008c04:	4639      	mov	r1, r7
 8008c06:	f7f7 ff5f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c0a:	b108      	cbz	r0, 8008c10 <__cvt+0x7c>
 8008c0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c10:	2230      	movs	r2, #48	@ 0x30
 8008c12:	9b03      	ldr	r3, [sp, #12]
 8008c14:	454b      	cmp	r3, r9
 8008c16:	d31e      	bcc.n	8008c56 <__cvt+0xc2>
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c1c:	1b5b      	subs	r3, r3, r5
 8008c1e:	4628      	mov	r0, r5
 8008c20:	6013      	str	r3, [r2, #0]
 8008c22:	b004      	add	sp, #16
 8008c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c2c:	eb00 0904 	add.w	r9, r0, r4
 8008c30:	d1e5      	bne.n	8008bfe <__cvt+0x6a>
 8008c32:	7803      	ldrb	r3, [r0, #0]
 8008c34:	2b30      	cmp	r3, #48	@ 0x30
 8008c36:	d10a      	bne.n	8008c4e <__cvt+0xba>
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	4639      	mov	r1, r7
 8008c40:	f7f7 ff42 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c44:	b918      	cbnz	r0, 8008c4e <__cvt+0xba>
 8008c46:	f1c4 0401 	rsb	r4, r4, #1
 8008c4a:	f8ca 4000 	str.w	r4, [sl]
 8008c4e:	f8da 3000 	ldr.w	r3, [sl]
 8008c52:	4499      	add	r9, r3
 8008c54:	e7d3      	b.n	8008bfe <__cvt+0x6a>
 8008c56:	1c59      	adds	r1, r3, #1
 8008c58:	9103      	str	r1, [sp, #12]
 8008c5a:	701a      	strb	r2, [r3, #0]
 8008c5c:	e7d9      	b.n	8008c12 <__cvt+0x7e>

08008c5e <__exponent>:
 8008c5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c60:	2900      	cmp	r1, #0
 8008c62:	bfba      	itte	lt
 8008c64:	4249      	neglt	r1, r1
 8008c66:	232d      	movlt	r3, #45	@ 0x2d
 8008c68:	232b      	movge	r3, #43	@ 0x2b
 8008c6a:	2909      	cmp	r1, #9
 8008c6c:	7002      	strb	r2, [r0, #0]
 8008c6e:	7043      	strb	r3, [r0, #1]
 8008c70:	dd29      	ble.n	8008cc6 <__exponent+0x68>
 8008c72:	f10d 0307 	add.w	r3, sp, #7
 8008c76:	461d      	mov	r5, r3
 8008c78:	270a      	movs	r7, #10
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008c80:	fb07 1416 	mls	r4, r7, r6, r1
 8008c84:	3430      	adds	r4, #48	@ 0x30
 8008c86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008c8a:	460c      	mov	r4, r1
 8008c8c:	2c63      	cmp	r4, #99	@ 0x63
 8008c8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c92:	4631      	mov	r1, r6
 8008c94:	dcf1      	bgt.n	8008c7a <__exponent+0x1c>
 8008c96:	3130      	adds	r1, #48	@ 0x30
 8008c98:	1e94      	subs	r4, r2, #2
 8008c9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008c9e:	1c41      	adds	r1, r0, #1
 8008ca0:	4623      	mov	r3, r4
 8008ca2:	42ab      	cmp	r3, r5
 8008ca4:	d30a      	bcc.n	8008cbc <__exponent+0x5e>
 8008ca6:	f10d 0309 	add.w	r3, sp, #9
 8008caa:	1a9b      	subs	r3, r3, r2
 8008cac:	42ac      	cmp	r4, r5
 8008cae:	bf88      	it	hi
 8008cb0:	2300      	movhi	r3, #0
 8008cb2:	3302      	adds	r3, #2
 8008cb4:	4403      	add	r3, r0
 8008cb6:	1a18      	subs	r0, r3, r0
 8008cb8:	b003      	add	sp, #12
 8008cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cbc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008cc0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008cc4:	e7ed      	b.n	8008ca2 <__exponent+0x44>
 8008cc6:	2330      	movs	r3, #48	@ 0x30
 8008cc8:	3130      	adds	r1, #48	@ 0x30
 8008cca:	7083      	strb	r3, [r0, #2]
 8008ccc:	70c1      	strb	r1, [r0, #3]
 8008cce:	1d03      	adds	r3, r0, #4
 8008cd0:	e7f1      	b.n	8008cb6 <__exponent+0x58>
	...

08008cd4 <_printf_float>:
 8008cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd8:	b08d      	sub	sp, #52	@ 0x34
 8008cda:	460c      	mov	r4, r1
 8008cdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ce0:	4616      	mov	r6, r2
 8008ce2:	461f      	mov	r7, r3
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	f000 fd01 	bl	80096ec <_localeconv_r>
 8008cea:	6803      	ldr	r3, [r0, #0]
 8008cec:	9304      	str	r3, [sp, #16]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7f7 fabe 	bl	8000270 <strlen>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8008cfc:	9005      	str	r0, [sp, #20]
 8008cfe:	3307      	adds	r3, #7
 8008d00:	f023 0307 	bic.w	r3, r3, #7
 8008d04:	f103 0208 	add.w	r2, r3, #8
 8008d08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008d0c:	f8d4 b000 	ldr.w	fp, [r4]
 8008d10:	f8c8 2000 	str.w	r2, [r8]
 8008d14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008d1c:	9307      	str	r3, [sp, #28]
 8008d1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d2a:	4b9c      	ldr	r3, [pc, #624]	@ (8008f9c <_printf_float+0x2c8>)
 8008d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d30:	f7f7 fefc 	bl	8000b2c <__aeabi_dcmpun>
 8008d34:	bb70      	cbnz	r0, 8008d94 <_printf_float+0xc0>
 8008d36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d3a:	4b98      	ldr	r3, [pc, #608]	@ (8008f9c <_printf_float+0x2c8>)
 8008d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d40:	f7f7 fed6 	bl	8000af0 <__aeabi_dcmple>
 8008d44:	bb30      	cbnz	r0, 8008d94 <_printf_float+0xc0>
 8008d46:	2200      	movs	r2, #0
 8008d48:	2300      	movs	r3, #0
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	f7f7 fec5 	bl	8000adc <__aeabi_dcmplt>
 8008d52:	b110      	cbz	r0, 8008d5a <_printf_float+0x86>
 8008d54:	232d      	movs	r3, #45	@ 0x2d
 8008d56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d5a:	4a91      	ldr	r2, [pc, #580]	@ (8008fa0 <_printf_float+0x2cc>)
 8008d5c:	4b91      	ldr	r3, [pc, #580]	@ (8008fa4 <_printf_float+0x2d0>)
 8008d5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008d62:	bf8c      	ite	hi
 8008d64:	4690      	movhi	r8, r2
 8008d66:	4698      	movls	r8, r3
 8008d68:	2303      	movs	r3, #3
 8008d6a:	6123      	str	r3, [r4, #16]
 8008d6c:	f02b 0304 	bic.w	r3, fp, #4
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	f04f 0900 	mov.w	r9, #0
 8008d76:	9700      	str	r7, [sp, #0]
 8008d78:	4633      	mov	r3, r6
 8008d7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	4628      	mov	r0, r5
 8008d80:	f000 f9d2 	bl	8009128 <_printf_common>
 8008d84:	3001      	adds	r0, #1
 8008d86:	f040 808d 	bne.w	8008ea4 <_printf_float+0x1d0>
 8008d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8e:	b00d      	add	sp, #52	@ 0x34
 8008d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d94:	4642      	mov	r2, r8
 8008d96:	464b      	mov	r3, r9
 8008d98:	4640      	mov	r0, r8
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	f7f7 fec6 	bl	8000b2c <__aeabi_dcmpun>
 8008da0:	b140      	cbz	r0, 8008db4 <_printf_float+0xe0>
 8008da2:	464b      	mov	r3, r9
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	bfbc      	itt	lt
 8008da8:	232d      	movlt	r3, #45	@ 0x2d
 8008daa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008dae:	4a7e      	ldr	r2, [pc, #504]	@ (8008fa8 <_printf_float+0x2d4>)
 8008db0:	4b7e      	ldr	r3, [pc, #504]	@ (8008fac <_printf_float+0x2d8>)
 8008db2:	e7d4      	b.n	8008d5e <_printf_float+0x8a>
 8008db4:	6863      	ldr	r3, [r4, #4]
 8008db6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008dba:	9206      	str	r2, [sp, #24]
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	d13b      	bne.n	8008e38 <_printf_float+0x164>
 8008dc0:	2306      	movs	r3, #6
 8008dc2:	6063      	str	r3, [r4, #4]
 8008dc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008dc8:	2300      	movs	r3, #0
 8008dca:	6022      	str	r2, [r4, #0]
 8008dcc:	9303      	str	r3, [sp, #12]
 8008dce:	ab0a      	add	r3, sp, #40	@ 0x28
 8008dd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008dd4:	ab09      	add	r3, sp, #36	@ 0x24
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	6861      	ldr	r1, [r4, #4]
 8008dda:	ec49 8b10 	vmov	d0, r8, r9
 8008dde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008de2:	4628      	mov	r0, r5
 8008de4:	f7ff fed6 	bl	8008b94 <__cvt>
 8008de8:	9b06      	ldr	r3, [sp, #24]
 8008dea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008dec:	2b47      	cmp	r3, #71	@ 0x47
 8008dee:	4680      	mov	r8, r0
 8008df0:	d129      	bne.n	8008e46 <_printf_float+0x172>
 8008df2:	1cc8      	adds	r0, r1, #3
 8008df4:	db02      	blt.n	8008dfc <_printf_float+0x128>
 8008df6:	6863      	ldr	r3, [r4, #4]
 8008df8:	4299      	cmp	r1, r3
 8008dfa:	dd41      	ble.n	8008e80 <_printf_float+0x1ac>
 8008dfc:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e00:	fa5f fa8a 	uxtb.w	sl, sl
 8008e04:	3901      	subs	r1, #1
 8008e06:	4652      	mov	r2, sl
 8008e08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008e0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e0e:	f7ff ff26 	bl	8008c5e <__exponent>
 8008e12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e14:	1813      	adds	r3, r2, r0
 8008e16:	2a01      	cmp	r2, #1
 8008e18:	4681      	mov	r9, r0
 8008e1a:	6123      	str	r3, [r4, #16]
 8008e1c:	dc02      	bgt.n	8008e24 <_printf_float+0x150>
 8008e1e:	6822      	ldr	r2, [r4, #0]
 8008e20:	07d2      	lsls	r2, r2, #31
 8008e22:	d501      	bpl.n	8008e28 <_printf_float+0x154>
 8008e24:	3301      	adds	r3, #1
 8008e26:	6123      	str	r3, [r4, #16]
 8008e28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d0a2      	beq.n	8008d76 <_printf_float+0xa2>
 8008e30:	232d      	movs	r3, #45	@ 0x2d
 8008e32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e36:	e79e      	b.n	8008d76 <_printf_float+0xa2>
 8008e38:	9a06      	ldr	r2, [sp, #24]
 8008e3a:	2a47      	cmp	r2, #71	@ 0x47
 8008e3c:	d1c2      	bne.n	8008dc4 <_printf_float+0xf0>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1c0      	bne.n	8008dc4 <_printf_float+0xf0>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e7bd      	b.n	8008dc2 <_printf_float+0xee>
 8008e46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e4a:	d9db      	bls.n	8008e04 <_printf_float+0x130>
 8008e4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008e50:	d118      	bne.n	8008e84 <_printf_float+0x1b0>
 8008e52:	2900      	cmp	r1, #0
 8008e54:	6863      	ldr	r3, [r4, #4]
 8008e56:	dd0b      	ble.n	8008e70 <_printf_float+0x19c>
 8008e58:	6121      	str	r1, [r4, #16]
 8008e5a:	b913      	cbnz	r3, 8008e62 <_printf_float+0x18e>
 8008e5c:	6822      	ldr	r2, [r4, #0]
 8008e5e:	07d0      	lsls	r0, r2, #31
 8008e60:	d502      	bpl.n	8008e68 <_printf_float+0x194>
 8008e62:	3301      	adds	r3, #1
 8008e64:	440b      	add	r3, r1
 8008e66:	6123      	str	r3, [r4, #16]
 8008e68:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008e6a:	f04f 0900 	mov.w	r9, #0
 8008e6e:	e7db      	b.n	8008e28 <_printf_float+0x154>
 8008e70:	b913      	cbnz	r3, 8008e78 <_printf_float+0x1a4>
 8008e72:	6822      	ldr	r2, [r4, #0]
 8008e74:	07d2      	lsls	r2, r2, #31
 8008e76:	d501      	bpl.n	8008e7c <_printf_float+0x1a8>
 8008e78:	3302      	adds	r3, #2
 8008e7a:	e7f4      	b.n	8008e66 <_printf_float+0x192>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e7f2      	b.n	8008e66 <_printf_float+0x192>
 8008e80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e86:	4299      	cmp	r1, r3
 8008e88:	db05      	blt.n	8008e96 <_printf_float+0x1c2>
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	6121      	str	r1, [r4, #16]
 8008e8e:	07d8      	lsls	r0, r3, #31
 8008e90:	d5ea      	bpl.n	8008e68 <_printf_float+0x194>
 8008e92:	1c4b      	adds	r3, r1, #1
 8008e94:	e7e7      	b.n	8008e66 <_printf_float+0x192>
 8008e96:	2900      	cmp	r1, #0
 8008e98:	bfd4      	ite	le
 8008e9a:	f1c1 0202 	rsble	r2, r1, #2
 8008e9e:	2201      	movgt	r2, #1
 8008ea0:	4413      	add	r3, r2
 8008ea2:	e7e0      	b.n	8008e66 <_printf_float+0x192>
 8008ea4:	6823      	ldr	r3, [r4, #0]
 8008ea6:	055a      	lsls	r2, r3, #21
 8008ea8:	d407      	bmi.n	8008eba <_printf_float+0x1e6>
 8008eaa:	6923      	ldr	r3, [r4, #16]
 8008eac:	4642      	mov	r2, r8
 8008eae:	4631      	mov	r1, r6
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	47b8      	blx	r7
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	d12b      	bne.n	8008f10 <_printf_float+0x23c>
 8008eb8:	e767      	b.n	8008d8a <_printf_float+0xb6>
 8008eba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ebe:	f240 80dd 	bls.w	800907c <_printf_float+0x3a8>
 8008ec2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f7f7 fdfd 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d033      	beq.n	8008f3a <_printf_float+0x266>
 8008ed2:	4a37      	ldr	r2, [pc, #220]	@ (8008fb0 <_printf_float+0x2dc>)
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	4628      	mov	r0, r5
 8008eda:	47b8      	blx	r7
 8008edc:	3001      	adds	r0, #1
 8008ede:	f43f af54 	beq.w	8008d8a <_printf_float+0xb6>
 8008ee2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008ee6:	4543      	cmp	r3, r8
 8008ee8:	db02      	blt.n	8008ef0 <_printf_float+0x21c>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	07d8      	lsls	r0, r3, #31
 8008eee:	d50f      	bpl.n	8008f10 <_printf_float+0x23c>
 8008ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	47b8      	blx	r7
 8008efa:	3001      	adds	r0, #1
 8008efc:	f43f af45 	beq.w	8008d8a <_printf_float+0xb6>
 8008f00:	f04f 0900 	mov.w	r9, #0
 8008f04:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f08:	f104 0a1a 	add.w	sl, r4, #26
 8008f0c:	45c8      	cmp	r8, r9
 8008f0e:	dc09      	bgt.n	8008f24 <_printf_float+0x250>
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	079b      	lsls	r3, r3, #30
 8008f14:	f100 8103 	bmi.w	800911e <_printf_float+0x44a>
 8008f18:	68e0      	ldr	r0, [r4, #12]
 8008f1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f1c:	4298      	cmp	r0, r3
 8008f1e:	bfb8      	it	lt
 8008f20:	4618      	movlt	r0, r3
 8008f22:	e734      	b.n	8008d8e <_printf_float+0xba>
 8008f24:	2301      	movs	r3, #1
 8008f26:	4652      	mov	r2, sl
 8008f28:	4631      	mov	r1, r6
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	47b8      	blx	r7
 8008f2e:	3001      	adds	r0, #1
 8008f30:	f43f af2b 	beq.w	8008d8a <_printf_float+0xb6>
 8008f34:	f109 0901 	add.w	r9, r9, #1
 8008f38:	e7e8      	b.n	8008f0c <_printf_float+0x238>
 8008f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	dc39      	bgt.n	8008fb4 <_printf_float+0x2e0>
 8008f40:	4a1b      	ldr	r2, [pc, #108]	@ (8008fb0 <_printf_float+0x2dc>)
 8008f42:	2301      	movs	r3, #1
 8008f44:	4631      	mov	r1, r6
 8008f46:	4628      	mov	r0, r5
 8008f48:	47b8      	blx	r7
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	f43f af1d 	beq.w	8008d8a <_printf_float+0xb6>
 8008f50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008f54:	ea59 0303 	orrs.w	r3, r9, r3
 8008f58:	d102      	bne.n	8008f60 <_printf_float+0x28c>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	07d9      	lsls	r1, r3, #31
 8008f5e:	d5d7      	bpl.n	8008f10 <_printf_float+0x23c>
 8008f60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f64:	4631      	mov	r1, r6
 8008f66:	4628      	mov	r0, r5
 8008f68:	47b8      	blx	r7
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	f43f af0d 	beq.w	8008d8a <_printf_float+0xb6>
 8008f70:	f04f 0a00 	mov.w	sl, #0
 8008f74:	f104 0b1a 	add.w	fp, r4, #26
 8008f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f7a:	425b      	negs	r3, r3
 8008f7c:	4553      	cmp	r3, sl
 8008f7e:	dc01      	bgt.n	8008f84 <_printf_float+0x2b0>
 8008f80:	464b      	mov	r3, r9
 8008f82:	e793      	b.n	8008eac <_printf_float+0x1d8>
 8008f84:	2301      	movs	r3, #1
 8008f86:	465a      	mov	r2, fp
 8008f88:	4631      	mov	r1, r6
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	47b8      	blx	r7
 8008f8e:	3001      	adds	r0, #1
 8008f90:	f43f aefb 	beq.w	8008d8a <_printf_float+0xb6>
 8008f94:	f10a 0a01 	add.w	sl, sl, #1
 8008f98:	e7ee      	b.n	8008f78 <_printf_float+0x2a4>
 8008f9a:	bf00      	nop
 8008f9c:	7fefffff 	.word	0x7fefffff
 8008fa0:	0800e034 	.word	0x0800e034
 8008fa4:	0800e030 	.word	0x0800e030
 8008fa8:	0800e03c 	.word	0x0800e03c
 8008fac:	0800e038 	.word	0x0800e038
 8008fb0:	0800e040 	.word	0x0800e040
 8008fb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008fb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008fba:	4553      	cmp	r3, sl
 8008fbc:	bfa8      	it	ge
 8008fbe:	4653      	movge	r3, sl
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	4699      	mov	r9, r3
 8008fc4:	dc36      	bgt.n	8009034 <_printf_float+0x360>
 8008fc6:	f04f 0b00 	mov.w	fp, #0
 8008fca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fce:	f104 021a 	add.w	r2, r4, #26
 8008fd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008fd4:	9306      	str	r3, [sp, #24]
 8008fd6:	eba3 0309 	sub.w	r3, r3, r9
 8008fda:	455b      	cmp	r3, fp
 8008fdc:	dc31      	bgt.n	8009042 <_printf_float+0x36e>
 8008fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe0:	459a      	cmp	sl, r3
 8008fe2:	dc3a      	bgt.n	800905a <_printf_float+0x386>
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	07da      	lsls	r2, r3, #31
 8008fe8:	d437      	bmi.n	800905a <_printf_float+0x386>
 8008fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fec:	ebaa 0903 	sub.w	r9, sl, r3
 8008ff0:	9b06      	ldr	r3, [sp, #24]
 8008ff2:	ebaa 0303 	sub.w	r3, sl, r3
 8008ff6:	4599      	cmp	r9, r3
 8008ff8:	bfa8      	it	ge
 8008ffa:	4699      	movge	r9, r3
 8008ffc:	f1b9 0f00 	cmp.w	r9, #0
 8009000:	dc33      	bgt.n	800906a <_printf_float+0x396>
 8009002:	f04f 0800 	mov.w	r8, #0
 8009006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800900a:	f104 0b1a 	add.w	fp, r4, #26
 800900e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009010:	ebaa 0303 	sub.w	r3, sl, r3
 8009014:	eba3 0309 	sub.w	r3, r3, r9
 8009018:	4543      	cmp	r3, r8
 800901a:	f77f af79 	ble.w	8008f10 <_printf_float+0x23c>
 800901e:	2301      	movs	r3, #1
 8009020:	465a      	mov	r2, fp
 8009022:	4631      	mov	r1, r6
 8009024:	4628      	mov	r0, r5
 8009026:	47b8      	blx	r7
 8009028:	3001      	adds	r0, #1
 800902a:	f43f aeae 	beq.w	8008d8a <_printf_float+0xb6>
 800902e:	f108 0801 	add.w	r8, r8, #1
 8009032:	e7ec      	b.n	800900e <_printf_float+0x33a>
 8009034:	4642      	mov	r2, r8
 8009036:	4631      	mov	r1, r6
 8009038:	4628      	mov	r0, r5
 800903a:	47b8      	blx	r7
 800903c:	3001      	adds	r0, #1
 800903e:	d1c2      	bne.n	8008fc6 <_printf_float+0x2f2>
 8009040:	e6a3      	b.n	8008d8a <_printf_float+0xb6>
 8009042:	2301      	movs	r3, #1
 8009044:	4631      	mov	r1, r6
 8009046:	4628      	mov	r0, r5
 8009048:	9206      	str	r2, [sp, #24]
 800904a:	47b8      	blx	r7
 800904c:	3001      	adds	r0, #1
 800904e:	f43f ae9c 	beq.w	8008d8a <_printf_float+0xb6>
 8009052:	9a06      	ldr	r2, [sp, #24]
 8009054:	f10b 0b01 	add.w	fp, fp, #1
 8009058:	e7bb      	b.n	8008fd2 <_printf_float+0x2fe>
 800905a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800905e:	4631      	mov	r1, r6
 8009060:	4628      	mov	r0, r5
 8009062:	47b8      	blx	r7
 8009064:	3001      	adds	r0, #1
 8009066:	d1c0      	bne.n	8008fea <_printf_float+0x316>
 8009068:	e68f      	b.n	8008d8a <_printf_float+0xb6>
 800906a:	9a06      	ldr	r2, [sp, #24]
 800906c:	464b      	mov	r3, r9
 800906e:	4442      	add	r2, r8
 8009070:	4631      	mov	r1, r6
 8009072:	4628      	mov	r0, r5
 8009074:	47b8      	blx	r7
 8009076:	3001      	adds	r0, #1
 8009078:	d1c3      	bne.n	8009002 <_printf_float+0x32e>
 800907a:	e686      	b.n	8008d8a <_printf_float+0xb6>
 800907c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009080:	f1ba 0f01 	cmp.w	sl, #1
 8009084:	dc01      	bgt.n	800908a <_printf_float+0x3b6>
 8009086:	07db      	lsls	r3, r3, #31
 8009088:	d536      	bpl.n	80090f8 <_printf_float+0x424>
 800908a:	2301      	movs	r3, #1
 800908c:	4642      	mov	r2, r8
 800908e:	4631      	mov	r1, r6
 8009090:	4628      	mov	r0, r5
 8009092:	47b8      	blx	r7
 8009094:	3001      	adds	r0, #1
 8009096:	f43f ae78 	beq.w	8008d8a <_printf_float+0xb6>
 800909a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800909e:	4631      	mov	r1, r6
 80090a0:	4628      	mov	r0, r5
 80090a2:	47b8      	blx	r7
 80090a4:	3001      	adds	r0, #1
 80090a6:	f43f ae70 	beq.w	8008d8a <_printf_float+0xb6>
 80090aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80090ae:	2200      	movs	r2, #0
 80090b0:	2300      	movs	r3, #0
 80090b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090b6:	f7f7 fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 80090ba:	b9c0      	cbnz	r0, 80090ee <_printf_float+0x41a>
 80090bc:	4653      	mov	r3, sl
 80090be:	f108 0201 	add.w	r2, r8, #1
 80090c2:	4631      	mov	r1, r6
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b8      	blx	r7
 80090c8:	3001      	adds	r0, #1
 80090ca:	d10c      	bne.n	80090e6 <_printf_float+0x412>
 80090cc:	e65d      	b.n	8008d8a <_printf_float+0xb6>
 80090ce:	2301      	movs	r3, #1
 80090d0:	465a      	mov	r2, fp
 80090d2:	4631      	mov	r1, r6
 80090d4:	4628      	mov	r0, r5
 80090d6:	47b8      	blx	r7
 80090d8:	3001      	adds	r0, #1
 80090da:	f43f ae56 	beq.w	8008d8a <_printf_float+0xb6>
 80090de:	f108 0801 	add.w	r8, r8, #1
 80090e2:	45d0      	cmp	r8, sl
 80090e4:	dbf3      	blt.n	80090ce <_printf_float+0x3fa>
 80090e6:	464b      	mov	r3, r9
 80090e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80090ec:	e6df      	b.n	8008eae <_printf_float+0x1da>
 80090ee:	f04f 0800 	mov.w	r8, #0
 80090f2:	f104 0b1a 	add.w	fp, r4, #26
 80090f6:	e7f4      	b.n	80090e2 <_printf_float+0x40e>
 80090f8:	2301      	movs	r3, #1
 80090fa:	4642      	mov	r2, r8
 80090fc:	e7e1      	b.n	80090c2 <_printf_float+0x3ee>
 80090fe:	2301      	movs	r3, #1
 8009100:	464a      	mov	r2, r9
 8009102:	4631      	mov	r1, r6
 8009104:	4628      	mov	r0, r5
 8009106:	47b8      	blx	r7
 8009108:	3001      	adds	r0, #1
 800910a:	f43f ae3e 	beq.w	8008d8a <_printf_float+0xb6>
 800910e:	f108 0801 	add.w	r8, r8, #1
 8009112:	68e3      	ldr	r3, [r4, #12]
 8009114:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009116:	1a5b      	subs	r3, r3, r1
 8009118:	4543      	cmp	r3, r8
 800911a:	dcf0      	bgt.n	80090fe <_printf_float+0x42a>
 800911c:	e6fc      	b.n	8008f18 <_printf_float+0x244>
 800911e:	f04f 0800 	mov.w	r8, #0
 8009122:	f104 0919 	add.w	r9, r4, #25
 8009126:	e7f4      	b.n	8009112 <_printf_float+0x43e>

08009128 <_printf_common>:
 8009128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800912c:	4616      	mov	r6, r2
 800912e:	4698      	mov	r8, r3
 8009130:	688a      	ldr	r2, [r1, #8]
 8009132:	690b      	ldr	r3, [r1, #16]
 8009134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009138:	4293      	cmp	r3, r2
 800913a:	bfb8      	it	lt
 800913c:	4613      	movlt	r3, r2
 800913e:	6033      	str	r3, [r6, #0]
 8009140:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009144:	4607      	mov	r7, r0
 8009146:	460c      	mov	r4, r1
 8009148:	b10a      	cbz	r2, 800914e <_printf_common+0x26>
 800914a:	3301      	adds	r3, #1
 800914c:	6033      	str	r3, [r6, #0]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	0699      	lsls	r1, r3, #26
 8009152:	bf42      	ittt	mi
 8009154:	6833      	ldrmi	r3, [r6, #0]
 8009156:	3302      	addmi	r3, #2
 8009158:	6033      	strmi	r3, [r6, #0]
 800915a:	6825      	ldr	r5, [r4, #0]
 800915c:	f015 0506 	ands.w	r5, r5, #6
 8009160:	d106      	bne.n	8009170 <_printf_common+0x48>
 8009162:	f104 0a19 	add.w	sl, r4, #25
 8009166:	68e3      	ldr	r3, [r4, #12]
 8009168:	6832      	ldr	r2, [r6, #0]
 800916a:	1a9b      	subs	r3, r3, r2
 800916c:	42ab      	cmp	r3, r5
 800916e:	dc26      	bgt.n	80091be <_printf_common+0x96>
 8009170:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009174:	6822      	ldr	r2, [r4, #0]
 8009176:	3b00      	subs	r3, #0
 8009178:	bf18      	it	ne
 800917a:	2301      	movne	r3, #1
 800917c:	0692      	lsls	r2, r2, #26
 800917e:	d42b      	bmi.n	80091d8 <_printf_common+0xb0>
 8009180:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009184:	4641      	mov	r1, r8
 8009186:	4638      	mov	r0, r7
 8009188:	47c8      	blx	r9
 800918a:	3001      	adds	r0, #1
 800918c:	d01e      	beq.n	80091cc <_printf_common+0xa4>
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	6922      	ldr	r2, [r4, #16]
 8009192:	f003 0306 	and.w	r3, r3, #6
 8009196:	2b04      	cmp	r3, #4
 8009198:	bf02      	ittt	eq
 800919a:	68e5      	ldreq	r5, [r4, #12]
 800919c:	6833      	ldreq	r3, [r6, #0]
 800919e:	1aed      	subeq	r5, r5, r3
 80091a0:	68a3      	ldr	r3, [r4, #8]
 80091a2:	bf0c      	ite	eq
 80091a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091a8:	2500      	movne	r5, #0
 80091aa:	4293      	cmp	r3, r2
 80091ac:	bfc4      	itt	gt
 80091ae:	1a9b      	subgt	r3, r3, r2
 80091b0:	18ed      	addgt	r5, r5, r3
 80091b2:	2600      	movs	r6, #0
 80091b4:	341a      	adds	r4, #26
 80091b6:	42b5      	cmp	r5, r6
 80091b8:	d11a      	bne.n	80091f0 <_printf_common+0xc8>
 80091ba:	2000      	movs	r0, #0
 80091bc:	e008      	b.n	80091d0 <_printf_common+0xa8>
 80091be:	2301      	movs	r3, #1
 80091c0:	4652      	mov	r2, sl
 80091c2:	4641      	mov	r1, r8
 80091c4:	4638      	mov	r0, r7
 80091c6:	47c8      	blx	r9
 80091c8:	3001      	adds	r0, #1
 80091ca:	d103      	bne.n	80091d4 <_printf_common+0xac>
 80091cc:	f04f 30ff 	mov.w	r0, #4294967295
 80091d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d4:	3501      	adds	r5, #1
 80091d6:	e7c6      	b.n	8009166 <_printf_common+0x3e>
 80091d8:	18e1      	adds	r1, r4, r3
 80091da:	1c5a      	adds	r2, r3, #1
 80091dc:	2030      	movs	r0, #48	@ 0x30
 80091de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80091e2:	4422      	add	r2, r4
 80091e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80091e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80091ec:	3302      	adds	r3, #2
 80091ee:	e7c7      	b.n	8009180 <_printf_common+0x58>
 80091f0:	2301      	movs	r3, #1
 80091f2:	4622      	mov	r2, r4
 80091f4:	4641      	mov	r1, r8
 80091f6:	4638      	mov	r0, r7
 80091f8:	47c8      	blx	r9
 80091fa:	3001      	adds	r0, #1
 80091fc:	d0e6      	beq.n	80091cc <_printf_common+0xa4>
 80091fe:	3601      	adds	r6, #1
 8009200:	e7d9      	b.n	80091b6 <_printf_common+0x8e>
	...

08009204 <_printf_i>:
 8009204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009208:	7e0f      	ldrb	r7, [r1, #24]
 800920a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800920c:	2f78      	cmp	r7, #120	@ 0x78
 800920e:	4691      	mov	r9, r2
 8009210:	4680      	mov	r8, r0
 8009212:	460c      	mov	r4, r1
 8009214:	469a      	mov	sl, r3
 8009216:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800921a:	d807      	bhi.n	800922c <_printf_i+0x28>
 800921c:	2f62      	cmp	r7, #98	@ 0x62
 800921e:	d80a      	bhi.n	8009236 <_printf_i+0x32>
 8009220:	2f00      	cmp	r7, #0
 8009222:	f000 80d1 	beq.w	80093c8 <_printf_i+0x1c4>
 8009226:	2f58      	cmp	r7, #88	@ 0x58
 8009228:	f000 80b8 	beq.w	800939c <_printf_i+0x198>
 800922c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009230:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009234:	e03a      	b.n	80092ac <_printf_i+0xa8>
 8009236:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800923a:	2b15      	cmp	r3, #21
 800923c:	d8f6      	bhi.n	800922c <_printf_i+0x28>
 800923e:	a101      	add	r1, pc, #4	@ (adr r1, 8009244 <_printf_i+0x40>)
 8009240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009244:	0800929d 	.word	0x0800929d
 8009248:	080092b1 	.word	0x080092b1
 800924c:	0800922d 	.word	0x0800922d
 8009250:	0800922d 	.word	0x0800922d
 8009254:	0800922d 	.word	0x0800922d
 8009258:	0800922d 	.word	0x0800922d
 800925c:	080092b1 	.word	0x080092b1
 8009260:	0800922d 	.word	0x0800922d
 8009264:	0800922d 	.word	0x0800922d
 8009268:	0800922d 	.word	0x0800922d
 800926c:	0800922d 	.word	0x0800922d
 8009270:	080093af 	.word	0x080093af
 8009274:	080092db 	.word	0x080092db
 8009278:	08009369 	.word	0x08009369
 800927c:	0800922d 	.word	0x0800922d
 8009280:	0800922d 	.word	0x0800922d
 8009284:	080093d1 	.word	0x080093d1
 8009288:	0800922d 	.word	0x0800922d
 800928c:	080092db 	.word	0x080092db
 8009290:	0800922d 	.word	0x0800922d
 8009294:	0800922d 	.word	0x0800922d
 8009298:	08009371 	.word	0x08009371
 800929c:	6833      	ldr	r3, [r6, #0]
 800929e:	1d1a      	adds	r2, r3, #4
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6032      	str	r2, [r6, #0]
 80092a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80092ac:	2301      	movs	r3, #1
 80092ae:	e09c      	b.n	80093ea <_printf_i+0x1e6>
 80092b0:	6833      	ldr	r3, [r6, #0]
 80092b2:	6820      	ldr	r0, [r4, #0]
 80092b4:	1d19      	adds	r1, r3, #4
 80092b6:	6031      	str	r1, [r6, #0]
 80092b8:	0606      	lsls	r6, r0, #24
 80092ba:	d501      	bpl.n	80092c0 <_printf_i+0xbc>
 80092bc:	681d      	ldr	r5, [r3, #0]
 80092be:	e003      	b.n	80092c8 <_printf_i+0xc4>
 80092c0:	0645      	lsls	r5, r0, #25
 80092c2:	d5fb      	bpl.n	80092bc <_printf_i+0xb8>
 80092c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80092c8:	2d00      	cmp	r5, #0
 80092ca:	da03      	bge.n	80092d4 <_printf_i+0xd0>
 80092cc:	232d      	movs	r3, #45	@ 0x2d
 80092ce:	426d      	negs	r5, r5
 80092d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092d4:	4858      	ldr	r0, [pc, #352]	@ (8009438 <_printf_i+0x234>)
 80092d6:	230a      	movs	r3, #10
 80092d8:	e011      	b.n	80092fe <_printf_i+0xfa>
 80092da:	6821      	ldr	r1, [r4, #0]
 80092dc:	6833      	ldr	r3, [r6, #0]
 80092de:	0608      	lsls	r0, r1, #24
 80092e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80092e4:	d402      	bmi.n	80092ec <_printf_i+0xe8>
 80092e6:	0649      	lsls	r1, r1, #25
 80092e8:	bf48      	it	mi
 80092ea:	b2ad      	uxthmi	r5, r5
 80092ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80092ee:	4852      	ldr	r0, [pc, #328]	@ (8009438 <_printf_i+0x234>)
 80092f0:	6033      	str	r3, [r6, #0]
 80092f2:	bf14      	ite	ne
 80092f4:	230a      	movne	r3, #10
 80092f6:	2308      	moveq	r3, #8
 80092f8:	2100      	movs	r1, #0
 80092fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80092fe:	6866      	ldr	r6, [r4, #4]
 8009300:	60a6      	str	r6, [r4, #8]
 8009302:	2e00      	cmp	r6, #0
 8009304:	db05      	blt.n	8009312 <_printf_i+0x10e>
 8009306:	6821      	ldr	r1, [r4, #0]
 8009308:	432e      	orrs	r6, r5
 800930a:	f021 0104 	bic.w	r1, r1, #4
 800930e:	6021      	str	r1, [r4, #0]
 8009310:	d04b      	beq.n	80093aa <_printf_i+0x1a6>
 8009312:	4616      	mov	r6, r2
 8009314:	fbb5 f1f3 	udiv	r1, r5, r3
 8009318:	fb03 5711 	mls	r7, r3, r1, r5
 800931c:	5dc7      	ldrb	r7, [r0, r7]
 800931e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009322:	462f      	mov	r7, r5
 8009324:	42bb      	cmp	r3, r7
 8009326:	460d      	mov	r5, r1
 8009328:	d9f4      	bls.n	8009314 <_printf_i+0x110>
 800932a:	2b08      	cmp	r3, #8
 800932c:	d10b      	bne.n	8009346 <_printf_i+0x142>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	07df      	lsls	r7, r3, #31
 8009332:	d508      	bpl.n	8009346 <_printf_i+0x142>
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	6861      	ldr	r1, [r4, #4]
 8009338:	4299      	cmp	r1, r3
 800933a:	bfde      	ittt	le
 800933c:	2330      	movle	r3, #48	@ 0x30
 800933e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009342:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009346:	1b92      	subs	r2, r2, r6
 8009348:	6122      	str	r2, [r4, #16]
 800934a:	f8cd a000 	str.w	sl, [sp]
 800934e:	464b      	mov	r3, r9
 8009350:	aa03      	add	r2, sp, #12
 8009352:	4621      	mov	r1, r4
 8009354:	4640      	mov	r0, r8
 8009356:	f7ff fee7 	bl	8009128 <_printf_common>
 800935a:	3001      	adds	r0, #1
 800935c:	d14a      	bne.n	80093f4 <_printf_i+0x1f0>
 800935e:	f04f 30ff 	mov.w	r0, #4294967295
 8009362:	b004      	add	sp, #16
 8009364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	f043 0320 	orr.w	r3, r3, #32
 800936e:	6023      	str	r3, [r4, #0]
 8009370:	4832      	ldr	r0, [pc, #200]	@ (800943c <_printf_i+0x238>)
 8009372:	2778      	movs	r7, #120	@ 0x78
 8009374:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009378:	6823      	ldr	r3, [r4, #0]
 800937a:	6831      	ldr	r1, [r6, #0]
 800937c:	061f      	lsls	r7, r3, #24
 800937e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009382:	d402      	bmi.n	800938a <_printf_i+0x186>
 8009384:	065f      	lsls	r7, r3, #25
 8009386:	bf48      	it	mi
 8009388:	b2ad      	uxthmi	r5, r5
 800938a:	6031      	str	r1, [r6, #0]
 800938c:	07d9      	lsls	r1, r3, #31
 800938e:	bf44      	itt	mi
 8009390:	f043 0320 	orrmi.w	r3, r3, #32
 8009394:	6023      	strmi	r3, [r4, #0]
 8009396:	b11d      	cbz	r5, 80093a0 <_printf_i+0x19c>
 8009398:	2310      	movs	r3, #16
 800939a:	e7ad      	b.n	80092f8 <_printf_i+0xf4>
 800939c:	4826      	ldr	r0, [pc, #152]	@ (8009438 <_printf_i+0x234>)
 800939e:	e7e9      	b.n	8009374 <_printf_i+0x170>
 80093a0:	6823      	ldr	r3, [r4, #0]
 80093a2:	f023 0320 	bic.w	r3, r3, #32
 80093a6:	6023      	str	r3, [r4, #0]
 80093a8:	e7f6      	b.n	8009398 <_printf_i+0x194>
 80093aa:	4616      	mov	r6, r2
 80093ac:	e7bd      	b.n	800932a <_printf_i+0x126>
 80093ae:	6833      	ldr	r3, [r6, #0]
 80093b0:	6825      	ldr	r5, [r4, #0]
 80093b2:	6961      	ldr	r1, [r4, #20]
 80093b4:	1d18      	adds	r0, r3, #4
 80093b6:	6030      	str	r0, [r6, #0]
 80093b8:	062e      	lsls	r6, r5, #24
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	d501      	bpl.n	80093c2 <_printf_i+0x1be>
 80093be:	6019      	str	r1, [r3, #0]
 80093c0:	e002      	b.n	80093c8 <_printf_i+0x1c4>
 80093c2:	0668      	lsls	r0, r5, #25
 80093c4:	d5fb      	bpl.n	80093be <_printf_i+0x1ba>
 80093c6:	8019      	strh	r1, [r3, #0]
 80093c8:	2300      	movs	r3, #0
 80093ca:	6123      	str	r3, [r4, #16]
 80093cc:	4616      	mov	r6, r2
 80093ce:	e7bc      	b.n	800934a <_printf_i+0x146>
 80093d0:	6833      	ldr	r3, [r6, #0]
 80093d2:	1d1a      	adds	r2, r3, #4
 80093d4:	6032      	str	r2, [r6, #0]
 80093d6:	681e      	ldr	r6, [r3, #0]
 80093d8:	6862      	ldr	r2, [r4, #4]
 80093da:	2100      	movs	r1, #0
 80093dc:	4630      	mov	r0, r6
 80093de:	f7f6 fef7 	bl	80001d0 <memchr>
 80093e2:	b108      	cbz	r0, 80093e8 <_printf_i+0x1e4>
 80093e4:	1b80      	subs	r0, r0, r6
 80093e6:	6060      	str	r0, [r4, #4]
 80093e8:	6863      	ldr	r3, [r4, #4]
 80093ea:	6123      	str	r3, [r4, #16]
 80093ec:	2300      	movs	r3, #0
 80093ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093f2:	e7aa      	b.n	800934a <_printf_i+0x146>
 80093f4:	6923      	ldr	r3, [r4, #16]
 80093f6:	4632      	mov	r2, r6
 80093f8:	4649      	mov	r1, r9
 80093fa:	4640      	mov	r0, r8
 80093fc:	47d0      	blx	sl
 80093fe:	3001      	adds	r0, #1
 8009400:	d0ad      	beq.n	800935e <_printf_i+0x15a>
 8009402:	6823      	ldr	r3, [r4, #0]
 8009404:	079b      	lsls	r3, r3, #30
 8009406:	d413      	bmi.n	8009430 <_printf_i+0x22c>
 8009408:	68e0      	ldr	r0, [r4, #12]
 800940a:	9b03      	ldr	r3, [sp, #12]
 800940c:	4298      	cmp	r0, r3
 800940e:	bfb8      	it	lt
 8009410:	4618      	movlt	r0, r3
 8009412:	e7a6      	b.n	8009362 <_printf_i+0x15e>
 8009414:	2301      	movs	r3, #1
 8009416:	4632      	mov	r2, r6
 8009418:	4649      	mov	r1, r9
 800941a:	4640      	mov	r0, r8
 800941c:	47d0      	blx	sl
 800941e:	3001      	adds	r0, #1
 8009420:	d09d      	beq.n	800935e <_printf_i+0x15a>
 8009422:	3501      	adds	r5, #1
 8009424:	68e3      	ldr	r3, [r4, #12]
 8009426:	9903      	ldr	r1, [sp, #12]
 8009428:	1a5b      	subs	r3, r3, r1
 800942a:	42ab      	cmp	r3, r5
 800942c:	dcf2      	bgt.n	8009414 <_printf_i+0x210>
 800942e:	e7eb      	b.n	8009408 <_printf_i+0x204>
 8009430:	2500      	movs	r5, #0
 8009432:	f104 0619 	add.w	r6, r4, #25
 8009436:	e7f5      	b.n	8009424 <_printf_i+0x220>
 8009438:	0800e042 	.word	0x0800e042
 800943c:	0800e053 	.word	0x0800e053

08009440 <std>:
 8009440:	2300      	movs	r3, #0
 8009442:	b510      	push	{r4, lr}
 8009444:	4604      	mov	r4, r0
 8009446:	e9c0 3300 	strd	r3, r3, [r0]
 800944a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800944e:	6083      	str	r3, [r0, #8]
 8009450:	8181      	strh	r1, [r0, #12]
 8009452:	6643      	str	r3, [r0, #100]	@ 0x64
 8009454:	81c2      	strh	r2, [r0, #14]
 8009456:	6183      	str	r3, [r0, #24]
 8009458:	4619      	mov	r1, r3
 800945a:	2208      	movs	r2, #8
 800945c:	305c      	adds	r0, #92	@ 0x5c
 800945e:	f000 f92a 	bl	80096b6 <memset>
 8009462:	4b0d      	ldr	r3, [pc, #52]	@ (8009498 <std+0x58>)
 8009464:	6263      	str	r3, [r4, #36]	@ 0x24
 8009466:	4b0d      	ldr	r3, [pc, #52]	@ (800949c <std+0x5c>)
 8009468:	62a3      	str	r3, [r4, #40]	@ 0x28
 800946a:	4b0d      	ldr	r3, [pc, #52]	@ (80094a0 <std+0x60>)
 800946c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800946e:	4b0d      	ldr	r3, [pc, #52]	@ (80094a4 <std+0x64>)
 8009470:	6323      	str	r3, [r4, #48]	@ 0x30
 8009472:	4b0d      	ldr	r3, [pc, #52]	@ (80094a8 <std+0x68>)
 8009474:	6224      	str	r4, [r4, #32]
 8009476:	429c      	cmp	r4, r3
 8009478:	d006      	beq.n	8009488 <std+0x48>
 800947a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800947e:	4294      	cmp	r4, r2
 8009480:	d002      	beq.n	8009488 <std+0x48>
 8009482:	33d0      	adds	r3, #208	@ 0xd0
 8009484:	429c      	cmp	r4, r3
 8009486:	d105      	bne.n	8009494 <std+0x54>
 8009488:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800948c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009490:	f000 b9a0 	b.w	80097d4 <__retarget_lock_init_recursive>
 8009494:	bd10      	pop	{r4, pc}
 8009496:	bf00      	nop
 8009498:	08009631 	.word	0x08009631
 800949c:	08009653 	.word	0x08009653
 80094a0:	0800968b 	.word	0x0800968b
 80094a4:	080096af 	.word	0x080096af
 80094a8:	200007f0 	.word	0x200007f0

080094ac <stdio_exit_handler>:
 80094ac:	4a02      	ldr	r2, [pc, #8]	@ (80094b8 <stdio_exit_handler+0xc>)
 80094ae:	4903      	ldr	r1, [pc, #12]	@ (80094bc <stdio_exit_handler+0x10>)
 80094b0:	4803      	ldr	r0, [pc, #12]	@ (80094c0 <stdio_exit_handler+0x14>)
 80094b2:	f000 b869 	b.w	8009588 <_fwalk_sglue>
 80094b6:	bf00      	nop
 80094b8:	200000a8 	.word	0x200000a8
 80094bc:	0800b155 	.word	0x0800b155
 80094c0:	200000b8 	.word	0x200000b8

080094c4 <cleanup_stdio>:
 80094c4:	6841      	ldr	r1, [r0, #4]
 80094c6:	4b0c      	ldr	r3, [pc, #48]	@ (80094f8 <cleanup_stdio+0x34>)
 80094c8:	4299      	cmp	r1, r3
 80094ca:	b510      	push	{r4, lr}
 80094cc:	4604      	mov	r4, r0
 80094ce:	d001      	beq.n	80094d4 <cleanup_stdio+0x10>
 80094d0:	f001 fe40 	bl	800b154 <_fflush_r>
 80094d4:	68a1      	ldr	r1, [r4, #8]
 80094d6:	4b09      	ldr	r3, [pc, #36]	@ (80094fc <cleanup_stdio+0x38>)
 80094d8:	4299      	cmp	r1, r3
 80094da:	d002      	beq.n	80094e2 <cleanup_stdio+0x1e>
 80094dc:	4620      	mov	r0, r4
 80094de:	f001 fe39 	bl	800b154 <_fflush_r>
 80094e2:	68e1      	ldr	r1, [r4, #12]
 80094e4:	4b06      	ldr	r3, [pc, #24]	@ (8009500 <cleanup_stdio+0x3c>)
 80094e6:	4299      	cmp	r1, r3
 80094e8:	d004      	beq.n	80094f4 <cleanup_stdio+0x30>
 80094ea:	4620      	mov	r0, r4
 80094ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094f0:	f001 be30 	b.w	800b154 <_fflush_r>
 80094f4:	bd10      	pop	{r4, pc}
 80094f6:	bf00      	nop
 80094f8:	200007f0 	.word	0x200007f0
 80094fc:	20000858 	.word	0x20000858
 8009500:	200008c0 	.word	0x200008c0

08009504 <global_stdio_init.part.0>:
 8009504:	b510      	push	{r4, lr}
 8009506:	4b0b      	ldr	r3, [pc, #44]	@ (8009534 <global_stdio_init.part.0+0x30>)
 8009508:	4c0b      	ldr	r4, [pc, #44]	@ (8009538 <global_stdio_init.part.0+0x34>)
 800950a:	4a0c      	ldr	r2, [pc, #48]	@ (800953c <global_stdio_init.part.0+0x38>)
 800950c:	601a      	str	r2, [r3, #0]
 800950e:	4620      	mov	r0, r4
 8009510:	2200      	movs	r2, #0
 8009512:	2104      	movs	r1, #4
 8009514:	f7ff ff94 	bl	8009440 <std>
 8009518:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800951c:	2201      	movs	r2, #1
 800951e:	2109      	movs	r1, #9
 8009520:	f7ff ff8e 	bl	8009440 <std>
 8009524:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009528:	2202      	movs	r2, #2
 800952a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800952e:	2112      	movs	r1, #18
 8009530:	f7ff bf86 	b.w	8009440 <std>
 8009534:	20000928 	.word	0x20000928
 8009538:	200007f0 	.word	0x200007f0
 800953c:	080094ad 	.word	0x080094ad

08009540 <__sfp_lock_acquire>:
 8009540:	4801      	ldr	r0, [pc, #4]	@ (8009548 <__sfp_lock_acquire+0x8>)
 8009542:	f000 b948 	b.w	80097d6 <__retarget_lock_acquire_recursive>
 8009546:	bf00      	nop
 8009548:	20000931 	.word	0x20000931

0800954c <__sfp_lock_release>:
 800954c:	4801      	ldr	r0, [pc, #4]	@ (8009554 <__sfp_lock_release+0x8>)
 800954e:	f000 b943 	b.w	80097d8 <__retarget_lock_release_recursive>
 8009552:	bf00      	nop
 8009554:	20000931 	.word	0x20000931

08009558 <__sinit>:
 8009558:	b510      	push	{r4, lr}
 800955a:	4604      	mov	r4, r0
 800955c:	f7ff fff0 	bl	8009540 <__sfp_lock_acquire>
 8009560:	6a23      	ldr	r3, [r4, #32]
 8009562:	b11b      	cbz	r3, 800956c <__sinit+0x14>
 8009564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009568:	f7ff bff0 	b.w	800954c <__sfp_lock_release>
 800956c:	4b04      	ldr	r3, [pc, #16]	@ (8009580 <__sinit+0x28>)
 800956e:	6223      	str	r3, [r4, #32]
 8009570:	4b04      	ldr	r3, [pc, #16]	@ (8009584 <__sinit+0x2c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1f5      	bne.n	8009564 <__sinit+0xc>
 8009578:	f7ff ffc4 	bl	8009504 <global_stdio_init.part.0>
 800957c:	e7f2      	b.n	8009564 <__sinit+0xc>
 800957e:	bf00      	nop
 8009580:	080094c5 	.word	0x080094c5
 8009584:	20000928 	.word	0x20000928

08009588 <_fwalk_sglue>:
 8009588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800958c:	4607      	mov	r7, r0
 800958e:	4688      	mov	r8, r1
 8009590:	4614      	mov	r4, r2
 8009592:	2600      	movs	r6, #0
 8009594:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009598:	f1b9 0901 	subs.w	r9, r9, #1
 800959c:	d505      	bpl.n	80095aa <_fwalk_sglue+0x22>
 800959e:	6824      	ldr	r4, [r4, #0]
 80095a0:	2c00      	cmp	r4, #0
 80095a2:	d1f7      	bne.n	8009594 <_fwalk_sglue+0xc>
 80095a4:	4630      	mov	r0, r6
 80095a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095aa:	89ab      	ldrh	r3, [r5, #12]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d907      	bls.n	80095c0 <_fwalk_sglue+0x38>
 80095b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095b4:	3301      	adds	r3, #1
 80095b6:	d003      	beq.n	80095c0 <_fwalk_sglue+0x38>
 80095b8:	4629      	mov	r1, r5
 80095ba:	4638      	mov	r0, r7
 80095bc:	47c0      	blx	r8
 80095be:	4306      	orrs	r6, r0
 80095c0:	3568      	adds	r5, #104	@ 0x68
 80095c2:	e7e9      	b.n	8009598 <_fwalk_sglue+0x10>

080095c4 <sniprintf>:
 80095c4:	b40c      	push	{r2, r3}
 80095c6:	b530      	push	{r4, r5, lr}
 80095c8:	4b18      	ldr	r3, [pc, #96]	@ (800962c <sniprintf+0x68>)
 80095ca:	1e0c      	subs	r4, r1, #0
 80095cc:	681d      	ldr	r5, [r3, #0]
 80095ce:	b09d      	sub	sp, #116	@ 0x74
 80095d0:	da08      	bge.n	80095e4 <sniprintf+0x20>
 80095d2:	238b      	movs	r3, #139	@ 0x8b
 80095d4:	602b      	str	r3, [r5, #0]
 80095d6:	f04f 30ff 	mov.w	r0, #4294967295
 80095da:	b01d      	add	sp, #116	@ 0x74
 80095dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095e0:	b002      	add	sp, #8
 80095e2:	4770      	bx	lr
 80095e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80095e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80095ec:	f04f 0300 	mov.w	r3, #0
 80095f0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80095f2:	bf14      	ite	ne
 80095f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80095f8:	4623      	moveq	r3, r4
 80095fa:	9304      	str	r3, [sp, #16]
 80095fc:	9307      	str	r3, [sp, #28]
 80095fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009602:	9002      	str	r0, [sp, #8]
 8009604:	9006      	str	r0, [sp, #24]
 8009606:	f8ad 3016 	strh.w	r3, [sp, #22]
 800960a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800960c:	ab21      	add	r3, sp, #132	@ 0x84
 800960e:	a902      	add	r1, sp, #8
 8009610:	4628      	mov	r0, r5
 8009612:	9301      	str	r3, [sp, #4]
 8009614:	f001 fc1e 	bl	800ae54 <_svfiprintf_r>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	bfbc      	itt	lt
 800961c:	238b      	movlt	r3, #139	@ 0x8b
 800961e:	602b      	strlt	r3, [r5, #0]
 8009620:	2c00      	cmp	r4, #0
 8009622:	d0da      	beq.n	80095da <sniprintf+0x16>
 8009624:	9b02      	ldr	r3, [sp, #8]
 8009626:	2200      	movs	r2, #0
 8009628:	701a      	strb	r2, [r3, #0]
 800962a:	e7d6      	b.n	80095da <sniprintf+0x16>
 800962c:	200000b4 	.word	0x200000b4

08009630 <__sread>:
 8009630:	b510      	push	{r4, lr}
 8009632:	460c      	mov	r4, r1
 8009634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009638:	f000 f87e 	bl	8009738 <_read_r>
 800963c:	2800      	cmp	r0, #0
 800963e:	bfab      	itete	ge
 8009640:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009642:	89a3      	ldrhlt	r3, [r4, #12]
 8009644:	181b      	addge	r3, r3, r0
 8009646:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800964a:	bfac      	ite	ge
 800964c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800964e:	81a3      	strhlt	r3, [r4, #12]
 8009650:	bd10      	pop	{r4, pc}

08009652 <__swrite>:
 8009652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009656:	461f      	mov	r7, r3
 8009658:	898b      	ldrh	r3, [r1, #12]
 800965a:	05db      	lsls	r3, r3, #23
 800965c:	4605      	mov	r5, r0
 800965e:	460c      	mov	r4, r1
 8009660:	4616      	mov	r6, r2
 8009662:	d505      	bpl.n	8009670 <__swrite+0x1e>
 8009664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009668:	2302      	movs	r3, #2
 800966a:	2200      	movs	r2, #0
 800966c:	f000 f852 	bl	8009714 <_lseek_r>
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009676:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800967a:	81a3      	strh	r3, [r4, #12]
 800967c:	4632      	mov	r2, r6
 800967e:	463b      	mov	r3, r7
 8009680:	4628      	mov	r0, r5
 8009682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009686:	f000 b869 	b.w	800975c <_write_r>

0800968a <__sseek>:
 800968a:	b510      	push	{r4, lr}
 800968c:	460c      	mov	r4, r1
 800968e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009692:	f000 f83f 	bl	8009714 <_lseek_r>
 8009696:	1c43      	adds	r3, r0, #1
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	bf15      	itete	ne
 800969c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800969e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80096a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80096a6:	81a3      	strheq	r3, [r4, #12]
 80096a8:	bf18      	it	ne
 80096aa:	81a3      	strhne	r3, [r4, #12]
 80096ac:	bd10      	pop	{r4, pc}

080096ae <__sclose>:
 80096ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b2:	f000 b81f 	b.w	80096f4 <_close_r>

080096b6 <memset>:
 80096b6:	4402      	add	r2, r0
 80096b8:	4603      	mov	r3, r0
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d100      	bne.n	80096c0 <memset+0xa>
 80096be:	4770      	bx	lr
 80096c0:	f803 1b01 	strb.w	r1, [r3], #1
 80096c4:	e7f9      	b.n	80096ba <memset+0x4>

080096c6 <strncmp>:
 80096c6:	b510      	push	{r4, lr}
 80096c8:	b16a      	cbz	r2, 80096e6 <strncmp+0x20>
 80096ca:	3901      	subs	r1, #1
 80096cc:	1884      	adds	r4, r0, r2
 80096ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d103      	bne.n	80096e2 <strncmp+0x1c>
 80096da:	42a0      	cmp	r0, r4
 80096dc:	d001      	beq.n	80096e2 <strncmp+0x1c>
 80096de:	2a00      	cmp	r2, #0
 80096e0:	d1f5      	bne.n	80096ce <strncmp+0x8>
 80096e2:	1ad0      	subs	r0, r2, r3
 80096e4:	bd10      	pop	{r4, pc}
 80096e6:	4610      	mov	r0, r2
 80096e8:	e7fc      	b.n	80096e4 <strncmp+0x1e>
	...

080096ec <_localeconv_r>:
 80096ec:	4800      	ldr	r0, [pc, #0]	@ (80096f0 <_localeconv_r+0x4>)
 80096ee:	4770      	bx	lr
 80096f0:	200001f4 	.word	0x200001f4

080096f4 <_close_r>:
 80096f4:	b538      	push	{r3, r4, r5, lr}
 80096f6:	4d06      	ldr	r5, [pc, #24]	@ (8009710 <_close_r+0x1c>)
 80096f8:	2300      	movs	r3, #0
 80096fa:	4604      	mov	r4, r0
 80096fc:	4608      	mov	r0, r1
 80096fe:	602b      	str	r3, [r5, #0]
 8009700:	f7fa ffbe 	bl	8004680 <_close>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d102      	bne.n	800970e <_close_r+0x1a>
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	b103      	cbz	r3, 800970e <_close_r+0x1a>
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	2000092c 	.word	0x2000092c

08009714 <_lseek_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	4d07      	ldr	r5, [pc, #28]	@ (8009734 <_lseek_r+0x20>)
 8009718:	4604      	mov	r4, r0
 800971a:	4608      	mov	r0, r1
 800971c:	4611      	mov	r1, r2
 800971e:	2200      	movs	r2, #0
 8009720:	602a      	str	r2, [r5, #0]
 8009722:	461a      	mov	r2, r3
 8009724:	f7fa ffd3 	bl	80046ce <_lseek>
 8009728:	1c43      	adds	r3, r0, #1
 800972a:	d102      	bne.n	8009732 <_lseek_r+0x1e>
 800972c:	682b      	ldr	r3, [r5, #0]
 800972e:	b103      	cbz	r3, 8009732 <_lseek_r+0x1e>
 8009730:	6023      	str	r3, [r4, #0]
 8009732:	bd38      	pop	{r3, r4, r5, pc}
 8009734:	2000092c 	.word	0x2000092c

08009738 <_read_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4d07      	ldr	r5, [pc, #28]	@ (8009758 <_read_r+0x20>)
 800973c:	4604      	mov	r4, r0
 800973e:	4608      	mov	r0, r1
 8009740:	4611      	mov	r1, r2
 8009742:	2200      	movs	r2, #0
 8009744:	602a      	str	r2, [r5, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	f7fa ff61 	bl	800460e <_read>
 800974c:	1c43      	adds	r3, r0, #1
 800974e:	d102      	bne.n	8009756 <_read_r+0x1e>
 8009750:	682b      	ldr	r3, [r5, #0]
 8009752:	b103      	cbz	r3, 8009756 <_read_r+0x1e>
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	bd38      	pop	{r3, r4, r5, pc}
 8009758:	2000092c 	.word	0x2000092c

0800975c <_write_r>:
 800975c:	b538      	push	{r3, r4, r5, lr}
 800975e:	4d07      	ldr	r5, [pc, #28]	@ (800977c <_write_r+0x20>)
 8009760:	4604      	mov	r4, r0
 8009762:	4608      	mov	r0, r1
 8009764:	4611      	mov	r1, r2
 8009766:	2200      	movs	r2, #0
 8009768:	602a      	str	r2, [r5, #0]
 800976a:	461a      	mov	r2, r3
 800976c:	f7fa ff6c 	bl	8004648 <_write>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d102      	bne.n	800977a <_write_r+0x1e>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	b103      	cbz	r3, 800977a <_write_r+0x1e>
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	bd38      	pop	{r3, r4, r5, pc}
 800977c:	2000092c 	.word	0x2000092c

08009780 <__errno>:
 8009780:	4b01      	ldr	r3, [pc, #4]	@ (8009788 <__errno+0x8>)
 8009782:	6818      	ldr	r0, [r3, #0]
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	200000b4 	.word	0x200000b4

0800978c <__libc_init_array>:
 800978c:	b570      	push	{r4, r5, r6, lr}
 800978e:	4d0d      	ldr	r5, [pc, #52]	@ (80097c4 <__libc_init_array+0x38>)
 8009790:	4c0d      	ldr	r4, [pc, #52]	@ (80097c8 <__libc_init_array+0x3c>)
 8009792:	1b64      	subs	r4, r4, r5
 8009794:	10a4      	asrs	r4, r4, #2
 8009796:	2600      	movs	r6, #0
 8009798:	42a6      	cmp	r6, r4
 800979a:	d109      	bne.n	80097b0 <__libc_init_array+0x24>
 800979c:	4d0b      	ldr	r5, [pc, #44]	@ (80097cc <__libc_init_array+0x40>)
 800979e:	4c0c      	ldr	r4, [pc, #48]	@ (80097d0 <__libc_init_array+0x44>)
 80097a0:	f004 fbea 	bl	800df78 <_init>
 80097a4:	1b64      	subs	r4, r4, r5
 80097a6:	10a4      	asrs	r4, r4, #2
 80097a8:	2600      	movs	r6, #0
 80097aa:	42a6      	cmp	r6, r4
 80097ac:	d105      	bne.n	80097ba <__libc_init_array+0x2e>
 80097ae:	bd70      	pop	{r4, r5, r6, pc}
 80097b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097b4:	4798      	blx	r3
 80097b6:	3601      	adds	r6, #1
 80097b8:	e7ee      	b.n	8009798 <__libc_init_array+0xc>
 80097ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80097be:	4798      	blx	r3
 80097c0:	3601      	adds	r6, #1
 80097c2:	e7f2      	b.n	80097aa <__libc_init_array+0x1e>
 80097c4:	0800e670 	.word	0x0800e670
 80097c8:	0800e670 	.word	0x0800e670
 80097cc:	0800e670 	.word	0x0800e670
 80097d0:	0800e674 	.word	0x0800e674

080097d4 <__retarget_lock_init_recursive>:
 80097d4:	4770      	bx	lr

080097d6 <__retarget_lock_acquire_recursive>:
 80097d6:	4770      	bx	lr

080097d8 <__retarget_lock_release_recursive>:
 80097d8:	4770      	bx	lr

080097da <memcpy>:
 80097da:	440a      	add	r2, r1
 80097dc:	4291      	cmp	r1, r2
 80097de:	f100 33ff 	add.w	r3, r0, #4294967295
 80097e2:	d100      	bne.n	80097e6 <memcpy+0xc>
 80097e4:	4770      	bx	lr
 80097e6:	b510      	push	{r4, lr}
 80097e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097f0:	4291      	cmp	r1, r2
 80097f2:	d1f9      	bne.n	80097e8 <memcpy+0xe>
 80097f4:	bd10      	pop	{r4, pc}

080097f6 <quorem>:
 80097f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fa:	6903      	ldr	r3, [r0, #16]
 80097fc:	690c      	ldr	r4, [r1, #16]
 80097fe:	42a3      	cmp	r3, r4
 8009800:	4607      	mov	r7, r0
 8009802:	db7e      	blt.n	8009902 <quorem+0x10c>
 8009804:	3c01      	subs	r4, #1
 8009806:	f101 0814 	add.w	r8, r1, #20
 800980a:	00a3      	lsls	r3, r4, #2
 800980c:	f100 0514 	add.w	r5, r0, #20
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009816:	9301      	str	r3, [sp, #4]
 8009818:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800981c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009820:	3301      	adds	r3, #1
 8009822:	429a      	cmp	r2, r3
 8009824:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009828:	fbb2 f6f3 	udiv	r6, r2, r3
 800982c:	d32e      	bcc.n	800988c <quorem+0x96>
 800982e:	f04f 0a00 	mov.w	sl, #0
 8009832:	46c4      	mov	ip, r8
 8009834:	46ae      	mov	lr, r5
 8009836:	46d3      	mov	fp, sl
 8009838:	f85c 3b04 	ldr.w	r3, [ip], #4
 800983c:	b298      	uxth	r0, r3
 800983e:	fb06 a000 	mla	r0, r6, r0, sl
 8009842:	0c02      	lsrs	r2, r0, #16
 8009844:	0c1b      	lsrs	r3, r3, #16
 8009846:	fb06 2303 	mla	r3, r6, r3, r2
 800984a:	f8de 2000 	ldr.w	r2, [lr]
 800984e:	b280      	uxth	r0, r0
 8009850:	b292      	uxth	r2, r2
 8009852:	1a12      	subs	r2, r2, r0
 8009854:	445a      	add	r2, fp
 8009856:	f8de 0000 	ldr.w	r0, [lr]
 800985a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800985e:	b29b      	uxth	r3, r3
 8009860:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009864:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009868:	b292      	uxth	r2, r2
 800986a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800986e:	45e1      	cmp	r9, ip
 8009870:	f84e 2b04 	str.w	r2, [lr], #4
 8009874:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009878:	d2de      	bcs.n	8009838 <quorem+0x42>
 800987a:	9b00      	ldr	r3, [sp, #0]
 800987c:	58eb      	ldr	r3, [r5, r3]
 800987e:	b92b      	cbnz	r3, 800988c <quorem+0x96>
 8009880:	9b01      	ldr	r3, [sp, #4]
 8009882:	3b04      	subs	r3, #4
 8009884:	429d      	cmp	r5, r3
 8009886:	461a      	mov	r2, r3
 8009888:	d32f      	bcc.n	80098ea <quorem+0xf4>
 800988a:	613c      	str	r4, [r7, #16]
 800988c:	4638      	mov	r0, r7
 800988e:	f001 f97d 	bl	800ab8c <__mcmp>
 8009892:	2800      	cmp	r0, #0
 8009894:	db25      	blt.n	80098e2 <quorem+0xec>
 8009896:	4629      	mov	r1, r5
 8009898:	2000      	movs	r0, #0
 800989a:	f858 2b04 	ldr.w	r2, [r8], #4
 800989e:	f8d1 c000 	ldr.w	ip, [r1]
 80098a2:	fa1f fe82 	uxth.w	lr, r2
 80098a6:	fa1f f38c 	uxth.w	r3, ip
 80098aa:	eba3 030e 	sub.w	r3, r3, lr
 80098ae:	4403      	add	r3, r0
 80098b0:	0c12      	lsrs	r2, r2, #16
 80098b2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80098b6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098c0:	45c1      	cmp	r9, r8
 80098c2:	f841 3b04 	str.w	r3, [r1], #4
 80098c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80098ca:	d2e6      	bcs.n	800989a <quorem+0xa4>
 80098cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098d4:	b922      	cbnz	r2, 80098e0 <quorem+0xea>
 80098d6:	3b04      	subs	r3, #4
 80098d8:	429d      	cmp	r5, r3
 80098da:	461a      	mov	r2, r3
 80098dc:	d30b      	bcc.n	80098f6 <quorem+0x100>
 80098de:	613c      	str	r4, [r7, #16]
 80098e0:	3601      	adds	r6, #1
 80098e2:	4630      	mov	r0, r6
 80098e4:	b003      	add	sp, #12
 80098e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ea:	6812      	ldr	r2, [r2, #0]
 80098ec:	3b04      	subs	r3, #4
 80098ee:	2a00      	cmp	r2, #0
 80098f0:	d1cb      	bne.n	800988a <quorem+0x94>
 80098f2:	3c01      	subs	r4, #1
 80098f4:	e7c6      	b.n	8009884 <quorem+0x8e>
 80098f6:	6812      	ldr	r2, [r2, #0]
 80098f8:	3b04      	subs	r3, #4
 80098fa:	2a00      	cmp	r2, #0
 80098fc:	d1ef      	bne.n	80098de <quorem+0xe8>
 80098fe:	3c01      	subs	r4, #1
 8009900:	e7ea      	b.n	80098d8 <quorem+0xe2>
 8009902:	2000      	movs	r0, #0
 8009904:	e7ee      	b.n	80098e4 <quorem+0xee>
	...

08009908 <_dtoa_r>:
 8009908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990c:	69c7      	ldr	r7, [r0, #28]
 800990e:	b097      	sub	sp, #92	@ 0x5c
 8009910:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009914:	ec55 4b10 	vmov	r4, r5, d0
 8009918:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800991a:	9107      	str	r1, [sp, #28]
 800991c:	4681      	mov	r9, r0
 800991e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009920:	9311      	str	r3, [sp, #68]	@ 0x44
 8009922:	b97f      	cbnz	r7, 8009944 <_dtoa_r+0x3c>
 8009924:	2010      	movs	r0, #16
 8009926:	f000 fe09 	bl	800a53c <malloc>
 800992a:	4602      	mov	r2, r0
 800992c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009930:	b920      	cbnz	r0, 800993c <_dtoa_r+0x34>
 8009932:	4ba9      	ldr	r3, [pc, #676]	@ (8009bd8 <_dtoa_r+0x2d0>)
 8009934:	21ef      	movs	r1, #239	@ 0xef
 8009936:	48a9      	ldr	r0, [pc, #676]	@ (8009bdc <_dtoa_r+0x2d4>)
 8009938:	f001 fc5e 	bl	800b1f8 <__assert_func>
 800993c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009940:	6007      	str	r7, [r0, #0]
 8009942:	60c7      	str	r7, [r0, #12]
 8009944:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009948:	6819      	ldr	r1, [r3, #0]
 800994a:	b159      	cbz	r1, 8009964 <_dtoa_r+0x5c>
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	604a      	str	r2, [r1, #4]
 8009950:	2301      	movs	r3, #1
 8009952:	4093      	lsls	r3, r2
 8009954:	608b      	str	r3, [r1, #8]
 8009956:	4648      	mov	r0, r9
 8009958:	f000 fee6 	bl	800a728 <_Bfree>
 800995c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	1e2b      	subs	r3, r5, #0
 8009966:	bfb9      	ittee	lt
 8009968:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800996c:	9305      	strlt	r3, [sp, #20]
 800996e:	2300      	movge	r3, #0
 8009970:	6033      	strge	r3, [r6, #0]
 8009972:	9f05      	ldr	r7, [sp, #20]
 8009974:	4b9a      	ldr	r3, [pc, #616]	@ (8009be0 <_dtoa_r+0x2d8>)
 8009976:	bfbc      	itt	lt
 8009978:	2201      	movlt	r2, #1
 800997a:	6032      	strlt	r2, [r6, #0]
 800997c:	43bb      	bics	r3, r7
 800997e:	d112      	bne.n	80099a6 <_dtoa_r+0x9e>
 8009980:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009982:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800998c:	4323      	orrs	r3, r4
 800998e:	f000 855a 	beq.w	800a446 <_dtoa_r+0xb3e>
 8009992:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009994:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009bf4 <_dtoa_r+0x2ec>
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 855c 	beq.w	800a456 <_dtoa_r+0xb4e>
 800999e:	f10a 0303 	add.w	r3, sl, #3
 80099a2:	f000 bd56 	b.w	800a452 <_dtoa_r+0xb4a>
 80099a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80099aa:	2200      	movs	r2, #0
 80099ac:	ec51 0b17 	vmov	r0, r1, d7
 80099b0:	2300      	movs	r3, #0
 80099b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80099b6:	f7f7 f887 	bl	8000ac8 <__aeabi_dcmpeq>
 80099ba:	4680      	mov	r8, r0
 80099bc:	b158      	cbz	r0, 80099d6 <_dtoa_r+0xce>
 80099be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80099c0:	2301      	movs	r3, #1
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80099c6:	b113      	cbz	r3, 80099ce <_dtoa_r+0xc6>
 80099c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80099ca:	4b86      	ldr	r3, [pc, #536]	@ (8009be4 <_dtoa_r+0x2dc>)
 80099cc:	6013      	str	r3, [r2, #0]
 80099ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009bf8 <_dtoa_r+0x2f0>
 80099d2:	f000 bd40 	b.w	800a456 <_dtoa_r+0xb4e>
 80099d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80099da:	aa14      	add	r2, sp, #80	@ 0x50
 80099dc:	a915      	add	r1, sp, #84	@ 0x54
 80099de:	4648      	mov	r0, r9
 80099e0:	f001 f984 	bl	800acec <__d2b>
 80099e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80099e8:	9002      	str	r0, [sp, #8]
 80099ea:	2e00      	cmp	r6, #0
 80099ec:	d078      	beq.n	8009ae0 <_dtoa_r+0x1d8>
 80099ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80099f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80099fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009a04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009a08:	4619      	mov	r1, r3
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	4b76      	ldr	r3, [pc, #472]	@ (8009be8 <_dtoa_r+0x2e0>)
 8009a0e:	f7f6 fc3b 	bl	8000288 <__aeabi_dsub>
 8009a12:	a36b      	add	r3, pc, #428	@ (adr r3, 8009bc0 <_dtoa_r+0x2b8>)
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	f7f6 fdee 	bl	80005f8 <__aeabi_dmul>
 8009a1c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009bc8 <_dtoa_r+0x2c0>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f7f6 fc33 	bl	800028c <__adddf3>
 8009a26:	4604      	mov	r4, r0
 8009a28:	4630      	mov	r0, r6
 8009a2a:	460d      	mov	r5, r1
 8009a2c:	f7f6 fd7a 	bl	8000524 <__aeabi_i2d>
 8009a30:	a367      	add	r3, pc, #412	@ (adr r3, 8009bd0 <_dtoa_r+0x2c8>)
 8009a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a36:	f7f6 fddf 	bl	80005f8 <__aeabi_dmul>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	4620      	mov	r0, r4
 8009a40:	4629      	mov	r1, r5
 8009a42:	f7f6 fc23 	bl	800028c <__adddf3>
 8009a46:	4604      	mov	r4, r0
 8009a48:	460d      	mov	r5, r1
 8009a4a:	f7f7 f885 	bl	8000b58 <__aeabi_d2iz>
 8009a4e:	2200      	movs	r2, #0
 8009a50:	4607      	mov	r7, r0
 8009a52:	2300      	movs	r3, #0
 8009a54:	4620      	mov	r0, r4
 8009a56:	4629      	mov	r1, r5
 8009a58:	f7f7 f840 	bl	8000adc <__aeabi_dcmplt>
 8009a5c:	b140      	cbz	r0, 8009a70 <_dtoa_r+0x168>
 8009a5e:	4638      	mov	r0, r7
 8009a60:	f7f6 fd60 	bl	8000524 <__aeabi_i2d>
 8009a64:	4622      	mov	r2, r4
 8009a66:	462b      	mov	r3, r5
 8009a68:	f7f7 f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a6c:	b900      	cbnz	r0, 8009a70 <_dtoa_r+0x168>
 8009a6e:	3f01      	subs	r7, #1
 8009a70:	2f16      	cmp	r7, #22
 8009a72:	d852      	bhi.n	8009b1a <_dtoa_r+0x212>
 8009a74:	4b5d      	ldr	r3, [pc, #372]	@ (8009bec <_dtoa_r+0x2e4>)
 8009a76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a82:	f7f7 f82b 	bl	8000adc <__aeabi_dcmplt>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d049      	beq.n	8009b1e <_dtoa_r+0x216>
 8009a8a:	3f01      	subs	r7, #1
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a92:	1b9b      	subs	r3, r3, r6
 8009a94:	1e5a      	subs	r2, r3, #1
 8009a96:	bf45      	ittet	mi
 8009a98:	f1c3 0301 	rsbmi	r3, r3, #1
 8009a9c:	9300      	strmi	r3, [sp, #0]
 8009a9e:	2300      	movpl	r3, #0
 8009aa0:	2300      	movmi	r3, #0
 8009aa2:	9206      	str	r2, [sp, #24]
 8009aa4:	bf54      	ite	pl
 8009aa6:	9300      	strpl	r3, [sp, #0]
 8009aa8:	9306      	strmi	r3, [sp, #24]
 8009aaa:	2f00      	cmp	r7, #0
 8009aac:	db39      	blt.n	8009b22 <_dtoa_r+0x21a>
 8009aae:	9b06      	ldr	r3, [sp, #24]
 8009ab0:	970d      	str	r7, [sp, #52]	@ 0x34
 8009ab2:	443b      	add	r3, r7
 8009ab4:	9306      	str	r3, [sp, #24]
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	9308      	str	r3, [sp, #32]
 8009aba:	9b07      	ldr	r3, [sp, #28]
 8009abc:	2b09      	cmp	r3, #9
 8009abe:	d863      	bhi.n	8009b88 <_dtoa_r+0x280>
 8009ac0:	2b05      	cmp	r3, #5
 8009ac2:	bfc4      	itt	gt
 8009ac4:	3b04      	subgt	r3, #4
 8009ac6:	9307      	strgt	r3, [sp, #28]
 8009ac8:	9b07      	ldr	r3, [sp, #28]
 8009aca:	f1a3 0302 	sub.w	r3, r3, #2
 8009ace:	bfcc      	ite	gt
 8009ad0:	2400      	movgt	r4, #0
 8009ad2:	2401      	movle	r4, #1
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	d863      	bhi.n	8009ba0 <_dtoa_r+0x298>
 8009ad8:	e8df f003 	tbb	[pc, r3]
 8009adc:	2b375452 	.word	0x2b375452
 8009ae0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009ae4:	441e      	add	r6, r3
 8009ae6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	bfc1      	itttt	gt
 8009aee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009af2:	409f      	lslgt	r7, r3
 8009af4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009af8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009afc:	bfd6      	itet	le
 8009afe:	f1c3 0320 	rsble	r3, r3, #32
 8009b02:	ea47 0003 	orrgt.w	r0, r7, r3
 8009b06:	fa04 f003 	lslle.w	r0, r4, r3
 8009b0a:	f7f6 fcfb 	bl	8000504 <__aeabi_ui2d>
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009b14:	3e01      	subs	r6, #1
 8009b16:	9212      	str	r2, [sp, #72]	@ 0x48
 8009b18:	e776      	b.n	8009a08 <_dtoa_r+0x100>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e7b7      	b.n	8009a8e <_dtoa_r+0x186>
 8009b1e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009b20:	e7b6      	b.n	8009a90 <_dtoa_r+0x188>
 8009b22:	9b00      	ldr	r3, [sp, #0]
 8009b24:	1bdb      	subs	r3, r3, r7
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	427b      	negs	r3, r7
 8009b2a:	9308      	str	r3, [sp, #32]
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009b30:	e7c3      	b.n	8009aba <_dtoa_r+0x1b2>
 8009b32:	2301      	movs	r3, #1
 8009b34:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b38:	eb07 0b03 	add.w	fp, r7, r3
 8009b3c:	f10b 0301 	add.w	r3, fp, #1
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	9303      	str	r3, [sp, #12]
 8009b44:	bfb8      	it	lt
 8009b46:	2301      	movlt	r3, #1
 8009b48:	e006      	b.n	8009b58 <_dtoa_r+0x250>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	dd28      	ble.n	8009ba6 <_dtoa_r+0x29e>
 8009b54:	469b      	mov	fp, r3
 8009b56:	9303      	str	r3, [sp, #12]
 8009b58:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009b5c:	2100      	movs	r1, #0
 8009b5e:	2204      	movs	r2, #4
 8009b60:	f102 0514 	add.w	r5, r2, #20
 8009b64:	429d      	cmp	r5, r3
 8009b66:	d926      	bls.n	8009bb6 <_dtoa_r+0x2ae>
 8009b68:	6041      	str	r1, [r0, #4]
 8009b6a:	4648      	mov	r0, r9
 8009b6c:	f000 fd9c 	bl	800a6a8 <_Balloc>
 8009b70:	4682      	mov	sl, r0
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d142      	bne.n	8009bfc <_dtoa_r+0x2f4>
 8009b76:	4b1e      	ldr	r3, [pc, #120]	@ (8009bf0 <_dtoa_r+0x2e8>)
 8009b78:	4602      	mov	r2, r0
 8009b7a:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b7e:	e6da      	b.n	8009936 <_dtoa_r+0x2e>
 8009b80:	2300      	movs	r3, #0
 8009b82:	e7e3      	b.n	8009b4c <_dtoa_r+0x244>
 8009b84:	2300      	movs	r3, #0
 8009b86:	e7d5      	b.n	8009b34 <_dtoa_r+0x22c>
 8009b88:	2401      	movs	r4, #1
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9307      	str	r3, [sp, #28]
 8009b8e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009b90:	f04f 3bff 	mov.w	fp, #4294967295
 8009b94:	2200      	movs	r2, #0
 8009b96:	f8cd b00c 	str.w	fp, [sp, #12]
 8009b9a:	2312      	movs	r3, #18
 8009b9c:	920c      	str	r2, [sp, #48]	@ 0x30
 8009b9e:	e7db      	b.n	8009b58 <_dtoa_r+0x250>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ba4:	e7f4      	b.n	8009b90 <_dtoa_r+0x288>
 8009ba6:	f04f 0b01 	mov.w	fp, #1
 8009baa:	f8cd b00c 	str.w	fp, [sp, #12]
 8009bae:	465b      	mov	r3, fp
 8009bb0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009bb4:	e7d0      	b.n	8009b58 <_dtoa_r+0x250>
 8009bb6:	3101      	adds	r1, #1
 8009bb8:	0052      	lsls	r2, r2, #1
 8009bba:	e7d1      	b.n	8009b60 <_dtoa_r+0x258>
 8009bbc:	f3af 8000 	nop.w
 8009bc0:	636f4361 	.word	0x636f4361
 8009bc4:	3fd287a7 	.word	0x3fd287a7
 8009bc8:	8b60c8b3 	.word	0x8b60c8b3
 8009bcc:	3fc68a28 	.word	0x3fc68a28
 8009bd0:	509f79fb 	.word	0x509f79fb
 8009bd4:	3fd34413 	.word	0x3fd34413
 8009bd8:	0800e071 	.word	0x0800e071
 8009bdc:	0800e088 	.word	0x0800e088
 8009be0:	7ff00000 	.word	0x7ff00000
 8009be4:	0800e041 	.word	0x0800e041
 8009be8:	3ff80000 	.word	0x3ff80000
 8009bec:	0800e1d8 	.word	0x0800e1d8
 8009bf0:	0800e0e0 	.word	0x0800e0e0
 8009bf4:	0800e06d 	.word	0x0800e06d
 8009bf8:	0800e040 	.word	0x0800e040
 8009bfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009c00:	6018      	str	r0, [r3, #0]
 8009c02:	9b03      	ldr	r3, [sp, #12]
 8009c04:	2b0e      	cmp	r3, #14
 8009c06:	f200 80a1 	bhi.w	8009d4c <_dtoa_r+0x444>
 8009c0a:	2c00      	cmp	r4, #0
 8009c0c:	f000 809e 	beq.w	8009d4c <_dtoa_r+0x444>
 8009c10:	2f00      	cmp	r7, #0
 8009c12:	dd33      	ble.n	8009c7c <_dtoa_r+0x374>
 8009c14:	4b9c      	ldr	r3, [pc, #624]	@ (8009e88 <_dtoa_r+0x580>)
 8009c16:	f007 020f 	and.w	r2, r7, #15
 8009c1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c1e:	ed93 7b00 	vldr	d7, [r3]
 8009c22:	05f8      	lsls	r0, r7, #23
 8009c24:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009c28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009c2c:	d516      	bpl.n	8009c5c <_dtoa_r+0x354>
 8009c2e:	4b97      	ldr	r3, [pc, #604]	@ (8009e8c <_dtoa_r+0x584>)
 8009c30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c38:	f7f6 fe08 	bl	800084c <__aeabi_ddiv>
 8009c3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c40:	f004 040f 	and.w	r4, r4, #15
 8009c44:	2603      	movs	r6, #3
 8009c46:	4d91      	ldr	r5, [pc, #580]	@ (8009e8c <_dtoa_r+0x584>)
 8009c48:	b954      	cbnz	r4, 8009c60 <_dtoa_r+0x358>
 8009c4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009c4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c52:	f7f6 fdfb 	bl	800084c <__aeabi_ddiv>
 8009c56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c5a:	e028      	b.n	8009cae <_dtoa_r+0x3a6>
 8009c5c:	2602      	movs	r6, #2
 8009c5e:	e7f2      	b.n	8009c46 <_dtoa_r+0x33e>
 8009c60:	07e1      	lsls	r1, r4, #31
 8009c62:	d508      	bpl.n	8009c76 <_dtoa_r+0x36e>
 8009c64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009c68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c6c:	f7f6 fcc4 	bl	80005f8 <__aeabi_dmul>
 8009c70:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009c74:	3601      	adds	r6, #1
 8009c76:	1064      	asrs	r4, r4, #1
 8009c78:	3508      	adds	r5, #8
 8009c7a:	e7e5      	b.n	8009c48 <_dtoa_r+0x340>
 8009c7c:	f000 80af 	beq.w	8009dde <_dtoa_r+0x4d6>
 8009c80:	427c      	negs	r4, r7
 8009c82:	4b81      	ldr	r3, [pc, #516]	@ (8009e88 <_dtoa_r+0x580>)
 8009c84:	4d81      	ldr	r5, [pc, #516]	@ (8009e8c <_dtoa_r+0x584>)
 8009c86:	f004 020f 	and.w	r2, r4, #15
 8009c8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c96:	f7f6 fcaf 	bl	80005f8 <__aeabi_dmul>
 8009c9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c9e:	1124      	asrs	r4, r4, #4
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	2602      	movs	r6, #2
 8009ca4:	2c00      	cmp	r4, #0
 8009ca6:	f040 808f 	bne.w	8009dc8 <_dtoa_r+0x4c0>
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1d3      	bne.n	8009c56 <_dtoa_r+0x34e>
 8009cae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009cb0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 8094 	beq.w	8009de2 <_dtoa_r+0x4da>
 8009cba:	4b75      	ldr	r3, [pc, #468]	@ (8009e90 <_dtoa_r+0x588>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	f7f6 ff0b 	bl	8000adc <__aeabi_dcmplt>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	f000 808b 	beq.w	8009de2 <_dtoa_r+0x4da>
 8009ccc:	9b03      	ldr	r3, [sp, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 8087 	beq.w	8009de2 <_dtoa_r+0x4da>
 8009cd4:	f1bb 0f00 	cmp.w	fp, #0
 8009cd8:	dd34      	ble.n	8009d44 <_dtoa_r+0x43c>
 8009cda:	4620      	mov	r0, r4
 8009cdc:	4b6d      	ldr	r3, [pc, #436]	@ (8009e94 <_dtoa_r+0x58c>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	f7f6 fc89 	bl	80005f8 <__aeabi_dmul>
 8009ce6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cea:	f107 38ff 	add.w	r8, r7, #4294967295
 8009cee:	3601      	adds	r6, #1
 8009cf0:	465c      	mov	r4, fp
 8009cf2:	4630      	mov	r0, r6
 8009cf4:	f7f6 fc16 	bl	8000524 <__aeabi_i2d>
 8009cf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cfc:	f7f6 fc7c 	bl	80005f8 <__aeabi_dmul>
 8009d00:	4b65      	ldr	r3, [pc, #404]	@ (8009e98 <_dtoa_r+0x590>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	f7f6 fac2 	bl	800028c <__adddf3>
 8009d08:	4605      	mov	r5, r0
 8009d0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009d0e:	2c00      	cmp	r4, #0
 8009d10:	d16a      	bne.n	8009de8 <_dtoa_r+0x4e0>
 8009d12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d16:	4b61      	ldr	r3, [pc, #388]	@ (8009e9c <_dtoa_r+0x594>)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f7f6 fab5 	bl	8000288 <__aeabi_dsub>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	460b      	mov	r3, r1
 8009d22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d26:	462a      	mov	r2, r5
 8009d28:	4633      	mov	r3, r6
 8009d2a:	f7f6 fef5 	bl	8000b18 <__aeabi_dcmpgt>
 8009d2e:	2800      	cmp	r0, #0
 8009d30:	f040 8298 	bne.w	800a264 <_dtoa_r+0x95c>
 8009d34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d38:	462a      	mov	r2, r5
 8009d3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009d3e:	f7f6 fecd 	bl	8000adc <__aeabi_dcmplt>
 8009d42:	bb38      	cbnz	r0, 8009d94 <_dtoa_r+0x48c>
 8009d44:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009d48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009d4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f2c0 8157 	blt.w	800a002 <_dtoa_r+0x6fa>
 8009d54:	2f0e      	cmp	r7, #14
 8009d56:	f300 8154 	bgt.w	800a002 <_dtoa_r+0x6fa>
 8009d5a:	4b4b      	ldr	r3, [pc, #300]	@ (8009e88 <_dtoa_r+0x580>)
 8009d5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d60:	ed93 7b00 	vldr	d7, [r3]
 8009d64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	ed8d 7b00 	vstr	d7, [sp]
 8009d6c:	f280 80e5 	bge.w	8009f3a <_dtoa_r+0x632>
 8009d70:	9b03      	ldr	r3, [sp, #12]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f300 80e1 	bgt.w	8009f3a <_dtoa_r+0x632>
 8009d78:	d10c      	bne.n	8009d94 <_dtoa_r+0x48c>
 8009d7a:	4b48      	ldr	r3, [pc, #288]	@ (8009e9c <_dtoa_r+0x594>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	ec51 0b17 	vmov	r0, r1, d7
 8009d82:	f7f6 fc39 	bl	80005f8 <__aeabi_dmul>
 8009d86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d8a:	f7f6 febb 	bl	8000b04 <__aeabi_dcmpge>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	f000 8266 	beq.w	800a260 <_dtoa_r+0x958>
 8009d94:	2400      	movs	r4, #0
 8009d96:	4625      	mov	r5, r4
 8009d98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d9a:	4656      	mov	r6, sl
 8009d9c:	ea6f 0803 	mvn.w	r8, r3
 8009da0:	2700      	movs	r7, #0
 8009da2:	4621      	mov	r1, r4
 8009da4:	4648      	mov	r0, r9
 8009da6:	f000 fcbf 	bl	800a728 <_Bfree>
 8009daa:	2d00      	cmp	r5, #0
 8009dac:	f000 80bd 	beq.w	8009f2a <_dtoa_r+0x622>
 8009db0:	b12f      	cbz	r7, 8009dbe <_dtoa_r+0x4b6>
 8009db2:	42af      	cmp	r7, r5
 8009db4:	d003      	beq.n	8009dbe <_dtoa_r+0x4b6>
 8009db6:	4639      	mov	r1, r7
 8009db8:	4648      	mov	r0, r9
 8009dba:	f000 fcb5 	bl	800a728 <_Bfree>
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	4648      	mov	r0, r9
 8009dc2:	f000 fcb1 	bl	800a728 <_Bfree>
 8009dc6:	e0b0      	b.n	8009f2a <_dtoa_r+0x622>
 8009dc8:	07e2      	lsls	r2, r4, #31
 8009dca:	d505      	bpl.n	8009dd8 <_dtoa_r+0x4d0>
 8009dcc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009dd0:	f7f6 fc12 	bl	80005f8 <__aeabi_dmul>
 8009dd4:	3601      	adds	r6, #1
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	1064      	asrs	r4, r4, #1
 8009dda:	3508      	adds	r5, #8
 8009ddc:	e762      	b.n	8009ca4 <_dtoa_r+0x39c>
 8009dde:	2602      	movs	r6, #2
 8009de0:	e765      	b.n	8009cae <_dtoa_r+0x3a6>
 8009de2:	9c03      	ldr	r4, [sp, #12]
 8009de4:	46b8      	mov	r8, r7
 8009de6:	e784      	b.n	8009cf2 <_dtoa_r+0x3ea>
 8009de8:	4b27      	ldr	r3, [pc, #156]	@ (8009e88 <_dtoa_r+0x580>)
 8009dea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009dec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009df0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009df4:	4454      	add	r4, sl
 8009df6:	2900      	cmp	r1, #0
 8009df8:	d054      	beq.n	8009ea4 <_dtoa_r+0x59c>
 8009dfa:	4929      	ldr	r1, [pc, #164]	@ (8009ea0 <_dtoa_r+0x598>)
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	f7f6 fd25 	bl	800084c <__aeabi_ddiv>
 8009e02:	4633      	mov	r3, r6
 8009e04:	462a      	mov	r2, r5
 8009e06:	f7f6 fa3f 	bl	8000288 <__aeabi_dsub>
 8009e0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009e0e:	4656      	mov	r6, sl
 8009e10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e14:	f7f6 fea0 	bl	8000b58 <__aeabi_d2iz>
 8009e18:	4605      	mov	r5, r0
 8009e1a:	f7f6 fb83 	bl	8000524 <__aeabi_i2d>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e26:	f7f6 fa2f 	bl	8000288 <__aeabi_dsub>
 8009e2a:	3530      	adds	r5, #48	@ 0x30
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e34:	f806 5b01 	strb.w	r5, [r6], #1
 8009e38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009e3c:	f7f6 fe4e 	bl	8000adc <__aeabi_dcmplt>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d172      	bne.n	8009f2a <_dtoa_r+0x622>
 8009e44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e48:	4911      	ldr	r1, [pc, #68]	@ (8009e90 <_dtoa_r+0x588>)
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	f7f6 fa1c 	bl	8000288 <__aeabi_dsub>
 8009e50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009e54:	f7f6 fe42 	bl	8000adc <__aeabi_dcmplt>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	f040 80b4 	bne.w	8009fc6 <_dtoa_r+0x6be>
 8009e5e:	42a6      	cmp	r6, r4
 8009e60:	f43f af70 	beq.w	8009d44 <_dtoa_r+0x43c>
 8009e64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009e68:	4b0a      	ldr	r3, [pc, #40]	@ (8009e94 <_dtoa_r+0x58c>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f7f6 fbc4 	bl	80005f8 <__aeabi_dmul>
 8009e70:	4b08      	ldr	r3, [pc, #32]	@ (8009e94 <_dtoa_r+0x58c>)
 8009e72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009e76:	2200      	movs	r2, #0
 8009e78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e7c:	f7f6 fbbc 	bl	80005f8 <__aeabi_dmul>
 8009e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e84:	e7c4      	b.n	8009e10 <_dtoa_r+0x508>
 8009e86:	bf00      	nop
 8009e88:	0800e1d8 	.word	0x0800e1d8
 8009e8c:	0800e1b0 	.word	0x0800e1b0
 8009e90:	3ff00000 	.word	0x3ff00000
 8009e94:	40240000 	.word	0x40240000
 8009e98:	401c0000 	.word	0x401c0000
 8009e9c:	40140000 	.word	0x40140000
 8009ea0:	3fe00000 	.word	0x3fe00000
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	f7f6 fba6 	bl	80005f8 <__aeabi_dmul>
 8009eac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009eb0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009eb2:	4656      	mov	r6, sl
 8009eb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eb8:	f7f6 fe4e 	bl	8000b58 <__aeabi_d2iz>
 8009ebc:	4605      	mov	r5, r0
 8009ebe:	f7f6 fb31 	bl	8000524 <__aeabi_i2d>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eca:	f7f6 f9dd 	bl	8000288 <__aeabi_dsub>
 8009ece:	3530      	adds	r5, #48	@ 0x30
 8009ed0:	f806 5b01 	strb.w	r5, [r6], #1
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	42a6      	cmp	r6, r4
 8009eda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ede:	f04f 0200 	mov.w	r2, #0
 8009ee2:	d124      	bne.n	8009f2e <_dtoa_r+0x626>
 8009ee4:	4baf      	ldr	r3, [pc, #700]	@ (800a1a4 <_dtoa_r+0x89c>)
 8009ee6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009eea:	f7f6 f9cf 	bl	800028c <__adddf3>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ef6:	f7f6 fe0f 	bl	8000b18 <__aeabi_dcmpgt>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d163      	bne.n	8009fc6 <_dtoa_r+0x6be>
 8009efe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009f02:	49a8      	ldr	r1, [pc, #672]	@ (800a1a4 <_dtoa_r+0x89c>)
 8009f04:	2000      	movs	r0, #0
 8009f06:	f7f6 f9bf 	bl	8000288 <__aeabi_dsub>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f12:	f7f6 fde3 	bl	8000adc <__aeabi_dcmplt>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	f43f af14 	beq.w	8009d44 <_dtoa_r+0x43c>
 8009f1c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009f1e:	1e73      	subs	r3, r6, #1
 8009f20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f26:	2b30      	cmp	r3, #48	@ 0x30
 8009f28:	d0f8      	beq.n	8009f1c <_dtoa_r+0x614>
 8009f2a:	4647      	mov	r7, r8
 8009f2c:	e03b      	b.n	8009fa6 <_dtoa_r+0x69e>
 8009f2e:	4b9e      	ldr	r3, [pc, #632]	@ (800a1a8 <_dtoa_r+0x8a0>)
 8009f30:	f7f6 fb62 	bl	80005f8 <__aeabi_dmul>
 8009f34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f38:	e7bc      	b.n	8009eb4 <_dtoa_r+0x5ac>
 8009f3a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009f3e:	4656      	mov	r6, sl
 8009f40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f44:	4620      	mov	r0, r4
 8009f46:	4629      	mov	r1, r5
 8009f48:	f7f6 fc80 	bl	800084c <__aeabi_ddiv>
 8009f4c:	f7f6 fe04 	bl	8000b58 <__aeabi_d2iz>
 8009f50:	4680      	mov	r8, r0
 8009f52:	f7f6 fae7 	bl	8000524 <__aeabi_i2d>
 8009f56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f5a:	f7f6 fb4d 	bl	80005f8 <__aeabi_dmul>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4620      	mov	r0, r4
 8009f64:	4629      	mov	r1, r5
 8009f66:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009f6a:	f7f6 f98d 	bl	8000288 <__aeabi_dsub>
 8009f6e:	f806 4b01 	strb.w	r4, [r6], #1
 8009f72:	9d03      	ldr	r5, [sp, #12]
 8009f74:	eba6 040a 	sub.w	r4, r6, sl
 8009f78:	42a5      	cmp	r5, r4
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	d133      	bne.n	8009fe8 <_dtoa_r+0x6e0>
 8009f80:	f7f6 f984 	bl	800028c <__adddf3>
 8009f84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f88:	4604      	mov	r4, r0
 8009f8a:	460d      	mov	r5, r1
 8009f8c:	f7f6 fdc4 	bl	8000b18 <__aeabi_dcmpgt>
 8009f90:	b9c0      	cbnz	r0, 8009fc4 <_dtoa_r+0x6bc>
 8009f92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f96:	4620      	mov	r0, r4
 8009f98:	4629      	mov	r1, r5
 8009f9a:	f7f6 fd95 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f9e:	b110      	cbz	r0, 8009fa6 <_dtoa_r+0x69e>
 8009fa0:	f018 0f01 	tst.w	r8, #1
 8009fa4:	d10e      	bne.n	8009fc4 <_dtoa_r+0x6bc>
 8009fa6:	9902      	ldr	r1, [sp, #8]
 8009fa8:	4648      	mov	r0, r9
 8009faa:	f000 fbbd 	bl	800a728 <_Bfree>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	7033      	strb	r3, [r6, #0]
 8009fb2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009fb4:	3701      	adds	r7, #1
 8009fb6:	601f      	str	r7, [r3, #0]
 8009fb8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 824b 	beq.w	800a456 <_dtoa_r+0xb4e>
 8009fc0:	601e      	str	r6, [r3, #0]
 8009fc2:	e248      	b.n	800a456 <_dtoa_r+0xb4e>
 8009fc4:	46b8      	mov	r8, r7
 8009fc6:	4633      	mov	r3, r6
 8009fc8:	461e      	mov	r6, r3
 8009fca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fce:	2a39      	cmp	r2, #57	@ 0x39
 8009fd0:	d106      	bne.n	8009fe0 <_dtoa_r+0x6d8>
 8009fd2:	459a      	cmp	sl, r3
 8009fd4:	d1f8      	bne.n	8009fc8 <_dtoa_r+0x6c0>
 8009fd6:	2230      	movs	r2, #48	@ 0x30
 8009fd8:	f108 0801 	add.w	r8, r8, #1
 8009fdc:	f88a 2000 	strb.w	r2, [sl]
 8009fe0:	781a      	ldrb	r2, [r3, #0]
 8009fe2:	3201      	adds	r2, #1
 8009fe4:	701a      	strb	r2, [r3, #0]
 8009fe6:	e7a0      	b.n	8009f2a <_dtoa_r+0x622>
 8009fe8:	4b6f      	ldr	r3, [pc, #444]	@ (800a1a8 <_dtoa_r+0x8a0>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	f7f6 fb04 	bl	80005f8 <__aeabi_dmul>
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	460d      	mov	r5, r1
 8009ff8:	f7f6 fd66 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d09f      	beq.n	8009f40 <_dtoa_r+0x638>
 800a000:	e7d1      	b.n	8009fa6 <_dtoa_r+0x69e>
 800a002:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a004:	2a00      	cmp	r2, #0
 800a006:	f000 80ea 	beq.w	800a1de <_dtoa_r+0x8d6>
 800a00a:	9a07      	ldr	r2, [sp, #28]
 800a00c:	2a01      	cmp	r2, #1
 800a00e:	f300 80cd 	bgt.w	800a1ac <_dtoa_r+0x8a4>
 800a012:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a014:	2a00      	cmp	r2, #0
 800a016:	f000 80c1 	beq.w	800a19c <_dtoa_r+0x894>
 800a01a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a01e:	9c08      	ldr	r4, [sp, #32]
 800a020:	9e00      	ldr	r6, [sp, #0]
 800a022:	9a00      	ldr	r2, [sp, #0]
 800a024:	441a      	add	r2, r3
 800a026:	9200      	str	r2, [sp, #0]
 800a028:	9a06      	ldr	r2, [sp, #24]
 800a02a:	2101      	movs	r1, #1
 800a02c:	441a      	add	r2, r3
 800a02e:	4648      	mov	r0, r9
 800a030:	9206      	str	r2, [sp, #24]
 800a032:	f000 fc2d 	bl	800a890 <__i2b>
 800a036:	4605      	mov	r5, r0
 800a038:	b166      	cbz	r6, 800a054 <_dtoa_r+0x74c>
 800a03a:	9b06      	ldr	r3, [sp, #24]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	dd09      	ble.n	800a054 <_dtoa_r+0x74c>
 800a040:	42b3      	cmp	r3, r6
 800a042:	9a00      	ldr	r2, [sp, #0]
 800a044:	bfa8      	it	ge
 800a046:	4633      	movge	r3, r6
 800a048:	1ad2      	subs	r2, r2, r3
 800a04a:	9200      	str	r2, [sp, #0]
 800a04c:	9a06      	ldr	r2, [sp, #24]
 800a04e:	1af6      	subs	r6, r6, r3
 800a050:	1ad3      	subs	r3, r2, r3
 800a052:	9306      	str	r3, [sp, #24]
 800a054:	9b08      	ldr	r3, [sp, #32]
 800a056:	b30b      	cbz	r3, 800a09c <_dtoa_r+0x794>
 800a058:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 80c6 	beq.w	800a1ec <_dtoa_r+0x8e4>
 800a060:	2c00      	cmp	r4, #0
 800a062:	f000 80c0 	beq.w	800a1e6 <_dtoa_r+0x8de>
 800a066:	4629      	mov	r1, r5
 800a068:	4622      	mov	r2, r4
 800a06a:	4648      	mov	r0, r9
 800a06c:	f000 fcc8 	bl	800aa00 <__pow5mult>
 800a070:	9a02      	ldr	r2, [sp, #8]
 800a072:	4601      	mov	r1, r0
 800a074:	4605      	mov	r5, r0
 800a076:	4648      	mov	r0, r9
 800a078:	f000 fc20 	bl	800a8bc <__multiply>
 800a07c:	9902      	ldr	r1, [sp, #8]
 800a07e:	4680      	mov	r8, r0
 800a080:	4648      	mov	r0, r9
 800a082:	f000 fb51 	bl	800a728 <_Bfree>
 800a086:	9b08      	ldr	r3, [sp, #32]
 800a088:	1b1b      	subs	r3, r3, r4
 800a08a:	9308      	str	r3, [sp, #32]
 800a08c:	f000 80b1 	beq.w	800a1f2 <_dtoa_r+0x8ea>
 800a090:	9a08      	ldr	r2, [sp, #32]
 800a092:	4641      	mov	r1, r8
 800a094:	4648      	mov	r0, r9
 800a096:	f000 fcb3 	bl	800aa00 <__pow5mult>
 800a09a:	9002      	str	r0, [sp, #8]
 800a09c:	2101      	movs	r1, #1
 800a09e:	4648      	mov	r0, r9
 800a0a0:	f000 fbf6 	bl	800a890 <__i2b>
 800a0a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 81d8 	beq.w	800a45e <_dtoa_r+0xb56>
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	4601      	mov	r1, r0
 800a0b2:	4648      	mov	r0, r9
 800a0b4:	f000 fca4 	bl	800aa00 <__pow5mult>
 800a0b8:	9b07      	ldr	r3, [sp, #28]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	4604      	mov	r4, r0
 800a0be:	f300 809f 	bgt.w	800a200 <_dtoa_r+0x8f8>
 800a0c2:	9b04      	ldr	r3, [sp, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f040 8097 	bne.w	800a1f8 <_dtoa_r+0x8f0>
 800a0ca:	9b05      	ldr	r3, [sp, #20]
 800a0cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f040 8093 	bne.w	800a1fc <_dtoa_r+0x8f4>
 800a0d6:	9b05      	ldr	r3, [sp, #20]
 800a0d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a0dc:	0d1b      	lsrs	r3, r3, #20
 800a0de:	051b      	lsls	r3, r3, #20
 800a0e0:	b133      	cbz	r3, 800a0f0 <_dtoa_r+0x7e8>
 800a0e2:	9b00      	ldr	r3, [sp, #0]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	9b06      	ldr	r3, [sp, #24]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	9306      	str	r3, [sp, #24]
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	9308      	str	r3, [sp, #32]
 800a0f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 81b8 	beq.w	800a46a <_dtoa_r+0xb62>
 800a0fa:	6923      	ldr	r3, [r4, #16]
 800a0fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a100:	6918      	ldr	r0, [r3, #16]
 800a102:	f000 fb79 	bl	800a7f8 <__hi0bits>
 800a106:	f1c0 0020 	rsb	r0, r0, #32
 800a10a:	9b06      	ldr	r3, [sp, #24]
 800a10c:	4418      	add	r0, r3
 800a10e:	f010 001f 	ands.w	r0, r0, #31
 800a112:	f000 8082 	beq.w	800a21a <_dtoa_r+0x912>
 800a116:	f1c0 0320 	rsb	r3, r0, #32
 800a11a:	2b04      	cmp	r3, #4
 800a11c:	dd73      	ble.n	800a206 <_dtoa_r+0x8fe>
 800a11e:	9b00      	ldr	r3, [sp, #0]
 800a120:	f1c0 001c 	rsb	r0, r0, #28
 800a124:	4403      	add	r3, r0
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	9b06      	ldr	r3, [sp, #24]
 800a12a:	4403      	add	r3, r0
 800a12c:	4406      	add	r6, r0
 800a12e:	9306      	str	r3, [sp, #24]
 800a130:	9b00      	ldr	r3, [sp, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	dd05      	ble.n	800a142 <_dtoa_r+0x83a>
 800a136:	9902      	ldr	r1, [sp, #8]
 800a138:	461a      	mov	r2, r3
 800a13a:	4648      	mov	r0, r9
 800a13c:	f000 fcba 	bl	800aab4 <__lshift>
 800a140:	9002      	str	r0, [sp, #8]
 800a142:	9b06      	ldr	r3, [sp, #24]
 800a144:	2b00      	cmp	r3, #0
 800a146:	dd05      	ble.n	800a154 <_dtoa_r+0x84c>
 800a148:	4621      	mov	r1, r4
 800a14a:	461a      	mov	r2, r3
 800a14c:	4648      	mov	r0, r9
 800a14e:	f000 fcb1 	bl	800aab4 <__lshift>
 800a152:	4604      	mov	r4, r0
 800a154:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a156:	2b00      	cmp	r3, #0
 800a158:	d061      	beq.n	800a21e <_dtoa_r+0x916>
 800a15a:	9802      	ldr	r0, [sp, #8]
 800a15c:	4621      	mov	r1, r4
 800a15e:	f000 fd15 	bl	800ab8c <__mcmp>
 800a162:	2800      	cmp	r0, #0
 800a164:	da5b      	bge.n	800a21e <_dtoa_r+0x916>
 800a166:	2300      	movs	r3, #0
 800a168:	9902      	ldr	r1, [sp, #8]
 800a16a:	220a      	movs	r2, #10
 800a16c:	4648      	mov	r0, r9
 800a16e:	f000 fafd 	bl	800a76c <__multadd>
 800a172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a174:	9002      	str	r0, [sp, #8]
 800a176:	f107 38ff 	add.w	r8, r7, #4294967295
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f000 8177 	beq.w	800a46e <_dtoa_r+0xb66>
 800a180:	4629      	mov	r1, r5
 800a182:	2300      	movs	r3, #0
 800a184:	220a      	movs	r2, #10
 800a186:	4648      	mov	r0, r9
 800a188:	f000 faf0 	bl	800a76c <__multadd>
 800a18c:	f1bb 0f00 	cmp.w	fp, #0
 800a190:	4605      	mov	r5, r0
 800a192:	dc6f      	bgt.n	800a274 <_dtoa_r+0x96c>
 800a194:	9b07      	ldr	r3, [sp, #28]
 800a196:	2b02      	cmp	r3, #2
 800a198:	dc49      	bgt.n	800a22e <_dtoa_r+0x926>
 800a19a:	e06b      	b.n	800a274 <_dtoa_r+0x96c>
 800a19c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a19e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a1a2:	e73c      	b.n	800a01e <_dtoa_r+0x716>
 800a1a4:	3fe00000 	.word	0x3fe00000
 800a1a8:	40240000 	.word	0x40240000
 800a1ac:	9b03      	ldr	r3, [sp, #12]
 800a1ae:	1e5c      	subs	r4, r3, #1
 800a1b0:	9b08      	ldr	r3, [sp, #32]
 800a1b2:	42a3      	cmp	r3, r4
 800a1b4:	db09      	blt.n	800a1ca <_dtoa_r+0x8c2>
 800a1b6:	1b1c      	subs	r4, r3, r4
 800a1b8:	9b03      	ldr	r3, [sp, #12]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f6bf af30 	bge.w	800a020 <_dtoa_r+0x718>
 800a1c0:	9b00      	ldr	r3, [sp, #0]
 800a1c2:	9a03      	ldr	r2, [sp, #12]
 800a1c4:	1a9e      	subs	r6, r3, r2
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	e72b      	b.n	800a022 <_dtoa_r+0x71a>
 800a1ca:	9b08      	ldr	r3, [sp, #32]
 800a1cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a1ce:	9408      	str	r4, [sp, #32]
 800a1d0:	1ae3      	subs	r3, r4, r3
 800a1d2:	441a      	add	r2, r3
 800a1d4:	9e00      	ldr	r6, [sp, #0]
 800a1d6:	9b03      	ldr	r3, [sp, #12]
 800a1d8:	920d      	str	r2, [sp, #52]	@ 0x34
 800a1da:	2400      	movs	r4, #0
 800a1dc:	e721      	b.n	800a022 <_dtoa_r+0x71a>
 800a1de:	9c08      	ldr	r4, [sp, #32]
 800a1e0:	9e00      	ldr	r6, [sp, #0]
 800a1e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a1e4:	e728      	b.n	800a038 <_dtoa_r+0x730>
 800a1e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a1ea:	e751      	b.n	800a090 <_dtoa_r+0x788>
 800a1ec:	9a08      	ldr	r2, [sp, #32]
 800a1ee:	9902      	ldr	r1, [sp, #8]
 800a1f0:	e750      	b.n	800a094 <_dtoa_r+0x78c>
 800a1f2:	f8cd 8008 	str.w	r8, [sp, #8]
 800a1f6:	e751      	b.n	800a09c <_dtoa_r+0x794>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	e779      	b.n	800a0f0 <_dtoa_r+0x7e8>
 800a1fc:	9b04      	ldr	r3, [sp, #16]
 800a1fe:	e777      	b.n	800a0f0 <_dtoa_r+0x7e8>
 800a200:	2300      	movs	r3, #0
 800a202:	9308      	str	r3, [sp, #32]
 800a204:	e779      	b.n	800a0fa <_dtoa_r+0x7f2>
 800a206:	d093      	beq.n	800a130 <_dtoa_r+0x828>
 800a208:	9a00      	ldr	r2, [sp, #0]
 800a20a:	331c      	adds	r3, #28
 800a20c:	441a      	add	r2, r3
 800a20e:	9200      	str	r2, [sp, #0]
 800a210:	9a06      	ldr	r2, [sp, #24]
 800a212:	441a      	add	r2, r3
 800a214:	441e      	add	r6, r3
 800a216:	9206      	str	r2, [sp, #24]
 800a218:	e78a      	b.n	800a130 <_dtoa_r+0x828>
 800a21a:	4603      	mov	r3, r0
 800a21c:	e7f4      	b.n	800a208 <_dtoa_r+0x900>
 800a21e:	9b03      	ldr	r3, [sp, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	46b8      	mov	r8, r7
 800a224:	dc20      	bgt.n	800a268 <_dtoa_r+0x960>
 800a226:	469b      	mov	fp, r3
 800a228:	9b07      	ldr	r3, [sp, #28]
 800a22a:	2b02      	cmp	r3, #2
 800a22c:	dd1e      	ble.n	800a26c <_dtoa_r+0x964>
 800a22e:	f1bb 0f00 	cmp.w	fp, #0
 800a232:	f47f adb1 	bne.w	8009d98 <_dtoa_r+0x490>
 800a236:	4621      	mov	r1, r4
 800a238:	465b      	mov	r3, fp
 800a23a:	2205      	movs	r2, #5
 800a23c:	4648      	mov	r0, r9
 800a23e:	f000 fa95 	bl	800a76c <__multadd>
 800a242:	4601      	mov	r1, r0
 800a244:	4604      	mov	r4, r0
 800a246:	9802      	ldr	r0, [sp, #8]
 800a248:	f000 fca0 	bl	800ab8c <__mcmp>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	f77f ada3 	ble.w	8009d98 <_dtoa_r+0x490>
 800a252:	4656      	mov	r6, sl
 800a254:	2331      	movs	r3, #49	@ 0x31
 800a256:	f806 3b01 	strb.w	r3, [r6], #1
 800a25a:	f108 0801 	add.w	r8, r8, #1
 800a25e:	e59f      	b.n	8009da0 <_dtoa_r+0x498>
 800a260:	9c03      	ldr	r4, [sp, #12]
 800a262:	46b8      	mov	r8, r7
 800a264:	4625      	mov	r5, r4
 800a266:	e7f4      	b.n	800a252 <_dtoa_r+0x94a>
 800a268:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a26c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 8101 	beq.w	800a476 <_dtoa_r+0xb6e>
 800a274:	2e00      	cmp	r6, #0
 800a276:	dd05      	ble.n	800a284 <_dtoa_r+0x97c>
 800a278:	4629      	mov	r1, r5
 800a27a:	4632      	mov	r2, r6
 800a27c:	4648      	mov	r0, r9
 800a27e:	f000 fc19 	bl	800aab4 <__lshift>
 800a282:	4605      	mov	r5, r0
 800a284:	9b08      	ldr	r3, [sp, #32]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d05c      	beq.n	800a344 <_dtoa_r+0xa3c>
 800a28a:	6869      	ldr	r1, [r5, #4]
 800a28c:	4648      	mov	r0, r9
 800a28e:	f000 fa0b 	bl	800a6a8 <_Balloc>
 800a292:	4606      	mov	r6, r0
 800a294:	b928      	cbnz	r0, 800a2a2 <_dtoa_r+0x99a>
 800a296:	4b82      	ldr	r3, [pc, #520]	@ (800a4a0 <_dtoa_r+0xb98>)
 800a298:	4602      	mov	r2, r0
 800a29a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a29e:	f7ff bb4a 	b.w	8009936 <_dtoa_r+0x2e>
 800a2a2:	692a      	ldr	r2, [r5, #16]
 800a2a4:	3202      	adds	r2, #2
 800a2a6:	0092      	lsls	r2, r2, #2
 800a2a8:	f105 010c 	add.w	r1, r5, #12
 800a2ac:	300c      	adds	r0, #12
 800a2ae:	f7ff fa94 	bl	80097da <memcpy>
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	4631      	mov	r1, r6
 800a2b6:	4648      	mov	r0, r9
 800a2b8:	f000 fbfc 	bl	800aab4 <__lshift>
 800a2bc:	f10a 0301 	add.w	r3, sl, #1
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	eb0a 030b 	add.w	r3, sl, fp
 800a2c6:	9308      	str	r3, [sp, #32]
 800a2c8:	9b04      	ldr	r3, [sp, #16]
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	462f      	mov	r7, r5
 800a2d0:	9306      	str	r3, [sp, #24]
 800a2d2:	4605      	mov	r5, r0
 800a2d4:	9b00      	ldr	r3, [sp, #0]
 800a2d6:	9802      	ldr	r0, [sp, #8]
 800a2d8:	4621      	mov	r1, r4
 800a2da:	f103 3bff 	add.w	fp, r3, #4294967295
 800a2de:	f7ff fa8a 	bl	80097f6 <quorem>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	3330      	adds	r3, #48	@ 0x30
 800a2e6:	9003      	str	r0, [sp, #12]
 800a2e8:	4639      	mov	r1, r7
 800a2ea:	9802      	ldr	r0, [sp, #8]
 800a2ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ee:	f000 fc4d 	bl	800ab8c <__mcmp>
 800a2f2:	462a      	mov	r2, r5
 800a2f4:	9004      	str	r0, [sp, #16]
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4648      	mov	r0, r9
 800a2fa:	f000 fc63 	bl	800abc4 <__mdiff>
 800a2fe:	68c2      	ldr	r2, [r0, #12]
 800a300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a302:	4606      	mov	r6, r0
 800a304:	bb02      	cbnz	r2, 800a348 <_dtoa_r+0xa40>
 800a306:	4601      	mov	r1, r0
 800a308:	9802      	ldr	r0, [sp, #8]
 800a30a:	f000 fc3f 	bl	800ab8c <__mcmp>
 800a30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a310:	4602      	mov	r2, r0
 800a312:	4631      	mov	r1, r6
 800a314:	4648      	mov	r0, r9
 800a316:	920c      	str	r2, [sp, #48]	@ 0x30
 800a318:	9309      	str	r3, [sp, #36]	@ 0x24
 800a31a:	f000 fa05 	bl	800a728 <_Bfree>
 800a31e:	9b07      	ldr	r3, [sp, #28]
 800a320:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a322:	9e00      	ldr	r6, [sp, #0]
 800a324:	ea42 0103 	orr.w	r1, r2, r3
 800a328:	9b06      	ldr	r3, [sp, #24]
 800a32a:	4319      	orrs	r1, r3
 800a32c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a32e:	d10d      	bne.n	800a34c <_dtoa_r+0xa44>
 800a330:	2b39      	cmp	r3, #57	@ 0x39
 800a332:	d027      	beq.n	800a384 <_dtoa_r+0xa7c>
 800a334:	9a04      	ldr	r2, [sp, #16]
 800a336:	2a00      	cmp	r2, #0
 800a338:	dd01      	ble.n	800a33e <_dtoa_r+0xa36>
 800a33a:	9b03      	ldr	r3, [sp, #12]
 800a33c:	3331      	adds	r3, #49	@ 0x31
 800a33e:	f88b 3000 	strb.w	r3, [fp]
 800a342:	e52e      	b.n	8009da2 <_dtoa_r+0x49a>
 800a344:	4628      	mov	r0, r5
 800a346:	e7b9      	b.n	800a2bc <_dtoa_r+0x9b4>
 800a348:	2201      	movs	r2, #1
 800a34a:	e7e2      	b.n	800a312 <_dtoa_r+0xa0a>
 800a34c:	9904      	ldr	r1, [sp, #16]
 800a34e:	2900      	cmp	r1, #0
 800a350:	db04      	blt.n	800a35c <_dtoa_r+0xa54>
 800a352:	9807      	ldr	r0, [sp, #28]
 800a354:	4301      	orrs	r1, r0
 800a356:	9806      	ldr	r0, [sp, #24]
 800a358:	4301      	orrs	r1, r0
 800a35a:	d120      	bne.n	800a39e <_dtoa_r+0xa96>
 800a35c:	2a00      	cmp	r2, #0
 800a35e:	ddee      	ble.n	800a33e <_dtoa_r+0xa36>
 800a360:	9902      	ldr	r1, [sp, #8]
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	2201      	movs	r2, #1
 800a366:	4648      	mov	r0, r9
 800a368:	f000 fba4 	bl	800aab4 <__lshift>
 800a36c:	4621      	mov	r1, r4
 800a36e:	9002      	str	r0, [sp, #8]
 800a370:	f000 fc0c 	bl	800ab8c <__mcmp>
 800a374:	2800      	cmp	r0, #0
 800a376:	9b00      	ldr	r3, [sp, #0]
 800a378:	dc02      	bgt.n	800a380 <_dtoa_r+0xa78>
 800a37a:	d1e0      	bne.n	800a33e <_dtoa_r+0xa36>
 800a37c:	07da      	lsls	r2, r3, #31
 800a37e:	d5de      	bpl.n	800a33e <_dtoa_r+0xa36>
 800a380:	2b39      	cmp	r3, #57	@ 0x39
 800a382:	d1da      	bne.n	800a33a <_dtoa_r+0xa32>
 800a384:	2339      	movs	r3, #57	@ 0x39
 800a386:	f88b 3000 	strb.w	r3, [fp]
 800a38a:	4633      	mov	r3, r6
 800a38c:	461e      	mov	r6, r3
 800a38e:	3b01      	subs	r3, #1
 800a390:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a394:	2a39      	cmp	r2, #57	@ 0x39
 800a396:	d04e      	beq.n	800a436 <_dtoa_r+0xb2e>
 800a398:	3201      	adds	r2, #1
 800a39a:	701a      	strb	r2, [r3, #0]
 800a39c:	e501      	b.n	8009da2 <_dtoa_r+0x49a>
 800a39e:	2a00      	cmp	r2, #0
 800a3a0:	dd03      	ble.n	800a3aa <_dtoa_r+0xaa2>
 800a3a2:	2b39      	cmp	r3, #57	@ 0x39
 800a3a4:	d0ee      	beq.n	800a384 <_dtoa_r+0xa7c>
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	e7c9      	b.n	800a33e <_dtoa_r+0xa36>
 800a3aa:	9a00      	ldr	r2, [sp, #0]
 800a3ac:	9908      	ldr	r1, [sp, #32]
 800a3ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a3b2:	428a      	cmp	r2, r1
 800a3b4:	d028      	beq.n	800a408 <_dtoa_r+0xb00>
 800a3b6:	9902      	ldr	r1, [sp, #8]
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	220a      	movs	r2, #10
 800a3bc:	4648      	mov	r0, r9
 800a3be:	f000 f9d5 	bl	800a76c <__multadd>
 800a3c2:	42af      	cmp	r7, r5
 800a3c4:	9002      	str	r0, [sp, #8]
 800a3c6:	f04f 0300 	mov.w	r3, #0
 800a3ca:	f04f 020a 	mov.w	r2, #10
 800a3ce:	4639      	mov	r1, r7
 800a3d0:	4648      	mov	r0, r9
 800a3d2:	d107      	bne.n	800a3e4 <_dtoa_r+0xadc>
 800a3d4:	f000 f9ca 	bl	800a76c <__multadd>
 800a3d8:	4607      	mov	r7, r0
 800a3da:	4605      	mov	r5, r0
 800a3dc:	9b00      	ldr	r3, [sp, #0]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	e777      	b.n	800a2d4 <_dtoa_r+0x9cc>
 800a3e4:	f000 f9c2 	bl	800a76c <__multadd>
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	4607      	mov	r7, r0
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	220a      	movs	r2, #10
 800a3f0:	4648      	mov	r0, r9
 800a3f2:	f000 f9bb 	bl	800a76c <__multadd>
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	e7f0      	b.n	800a3dc <_dtoa_r+0xad4>
 800a3fa:	f1bb 0f00 	cmp.w	fp, #0
 800a3fe:	bfcc      	ite	gt
 800a400:	465e      	movgt	r6, fp
 800a402:	2601      	movle	r6, #1
 800a404:	4456      	add	r6, sl
 800a406:	2700      	movs	r7, #0
 800a408:	9902      	ldr	r1, [sp, #8]
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	2201      	movs	r2, #1
 800a40e:	4648      	mov	r0, r9
 800a410:	f000 fb50 	bl	800aab4 <__lshift>
 800a414:	4621      	mov	r1, r4
 800a416:	9002      	str	r0, [sp, #8]
 800a418:	f000 fbb8 	bl	800ab8c <__mcmp>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	dcb4      	bgt.n	800a38a <_dtoa_r+0xa82>
 800a420:	d102      	bne.n	800a428 <_dtoa_r+0xb20>
 800a422:	9b00      	ldr	r3, [sp, #0]
 800a424:	07db      	lsls	r3, r3, #31
 800a426:	d4b0      	bmi.n	800a38a <_dtoa_r+0xa82>
 800a428:	4633      	mov	r3, r6
 800a42a:	461e      	mov	r6, r3
 800a42c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a430:	2a30      	cmp	r2, #48	@ 0x30
 800a432:	d0fa      	beq.n	800a42a <_dtoa_r+0xb22>
 800a434:	e4b5      	b.n	8009da2 <_dtoa_r+0x49a>
 800a436:	459a      	cmp	sl, r3
 800a438:	d1a8      	bne.n	800a38c <_dtoa_r+0xa84>
 800a43a:	2331      	movs	r3, #49	@ 0x31
 800a43c:	f108 0801 	add.w	r8, r8, #1
 800a440:	f88a 3000 	strb.w	r3, [sl]
 800a444:	e4ad      	b.n	8009da2 <_dtoa_r+0x49a>
 800a446:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a448:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a4a4 <_dtoa_r+0xb9c>
 800a44c:	b11b      	cbz	r3, 800a456 <_dtoa_r+0xb4e>
 800a44e:	f10a 0308 	add.w	r3, sl, #8
 800a452:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	4650      	mov	r0, sl
 800a458:	b017      	add	sp, #92	@ 0x5c
 800a45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a45e:	9b07      	ldr	r3, [sp, #28]
 800a460:	2b01      	cmp	r3, #1
 800a462:	f77f ae2e 	ble.w	800a0c2 <_dtoa_r+0x7ba>
 800a466:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a468:	9308      	str	r3, [sp, #32]
 800a46a:	2001      	movs	r0, #1
 800a46c:	e64d      	b.n	800a10a <_dtoa_r+0x802>
 800a46e:	f1bb 0f00 	cmp.w	fp, #0
 800a472:	f77f aed9 	ble.w	800a228 <_dtoa_r+0x920>
 800a476:	4656      	mov	r6, sl
 800a478:	9802      	ldr	r0, [sp, #8]
 800a47a:	4621      	mov	r1, r4
 800a47c:	f7ff f9bb 	bl	80097f6 <quorem>
 800a480:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a484:	f806 3b01 	strb.w	r3, [r6], #1
 800a488:	eba6 020a 	sub.w	r2, r6, sl
 800a48c:	4593      	cmp	fp, r2
 800a48e:	ddb4      	ble.n	800a3fa <_dtoa_r+0xaf2>
 800a490:	9902      	ldr	r1, [sp, #8]
 800a492:	2300      	movs	r3, #0
 800a494:	220a      	movs	r2, #10
 800a496:	4648      	mov	r0, r9
 800a498:	f000 f968 	bl	800a76c <__multadd>
 800a49c:	9002      	str	r0, [sp, #8]
 800a49e:	e7eb      	b.n	800a478 <_dtoa_r+0xb70>
 800a4a0:	0800e0e0 	.word	0x0800e0e0
 800a4a4:	0800e064 	.word	0x0800e064

0800a4a8 <_free_r>:
 800a4a8:	b538      	push	{r3, r4, r5, lr}
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	2900      	cmp	r1, #0
 800a4ae:	d041      	beq.n	800a534 <_free_r+0x8c>
 800a4b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4b4:	1f0c      	subs	r4, r1, #4
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	bfb8      	it	lt
 800a4ba:	18e4      	addlt	r4, r4, r3
 800a4bc:	f000 f8e8 	bl	800a690 <__malloc_lock>
 800a4c0:	4a1d      	ldr	r2, [pc, #116]	@ (800a538 <_free_r+0x90>)
 800a4c2:	6813      	ldr	r3, [r2, #0]
 800a4c4:	b933      	cbnz	r3, 800a4d4 <_free_r+0x2c>
 800a4c6:	6063      	str	r3, [r4, #4]
 800a4c8:	6014      	str	r4, [r2, #0]
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4d0:	f000 b8e4 	b.w	800a69c <__malloc_unlock>
 800a4d4:	42a3      	cmp	r3, r4
 800a4d6:	d908      	bls.n	800a4ea <_free_r+0x42>
 800a4d8:	6820      	ldr	r0, [r4, #0]
 800a4da:	1821      	adds	r1, r4, r0
 800a4dc:	428b      	cmp	r3, r1
 800a4de:	bf01      	itttt	eq
 800a4e0:	6819      	ldreq	r1, [r3, #0]
 800a4e2:	685b      	ldreq	r3, [r3, #4]
 800a4e4:	1809      	addeq	r1, r1, r0
 800a4e6:	6021      	streq	r1, [r4, #0]
 800a4e8:	e7ed      	b.n	800a4c6 <_free_r+0x1e>
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	b10b      	cbz	r3, 800a4f4 <_free_r+0x4c>
 800a4f0:	42a3      	cmp	r3, r4
 800a4f2:	d9fa      	bls.n	800a4ea <_free_r+0x42>
 800a4f4:	6811      	ldr	r1, [r2, #0]
 800a4f6:	1850      	adds	r0, r2, r1
 800a4f8:	42a0      	cmp	r0, r4
 800a4fa:	d10b      	bne.n	800a514 <_free_r+0x6c>
 800a4fc:	6820      	ldr	r0, [r4, #0]
 800a4fe:	4401      	add	r1, r0
 800a500:	1850      	adds	r0, r2, r1
 800a502:	4283      	cmp	r3, r0
 800a504:	6011      	str	r1, [r2, #0]
 800a506:	d1e0      	bne.n	800a4ca <_free_r+0x22>
 800a508:	6818      	ldr	r0, [r3, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	6053      	str	r3, [r2, #4]
 800a50e:	4408      	add	r0, r1
 800a510:	6010      	str	r0, [r2, #0]
 800a512:	e7da      	b.n	800a4ca <_free_r+0x22>
 800a514:	d902      	bls.n	800a51c <_free_r+0x74>
 800a516:	230c      	movs	r3, #12
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	e7d6      	b.n	800a4ca <_free_r+0x22>
 800a51c:	6820      	ldr	r0, [r4, #0]
 800a51e:	1821      	adds	r1, r4, r0
 800a520:	428b      	cmp	r3, r1
 800a522:	bf04      	itt	eq
 800a524:	6819      	ldreq	r1, [r3, #0]
 800a526:	685b      	ldreq	r3, [r3, #4]
 800a528:	6063      	str	r3, [r4, #4]
 800a52a:	bf04      	itt	eq
 800a52c:	1809      	addeq	r1, r1, r0
 800a52e:	6021      	streq	r1, [r4, #0]
 800a530:	6054      	str	r4, [r2, #4]
 800a532:	e7ca      	b.n	800a4ca <_free_r+0x22>
 800a534:	bd38      	pop	{r3, r4, r5, pc}
 800a536:	bf00      	nop
 800a538:	20000938 	.word	0x20000938

0800a53c <malloc>:
 800a53c:	4b02      	ldr	r3, [pc, #8]	@ (800a548 <malloc+0xc>)
 800a53e:	4601      	mov	r1, r0
 800a540:	6818      	ldr	r0, [r3, #0]
 800a542:	f000 b825 	b.w	800a590 <_malloc_r>
 800a546:	bf00      	nop
 800a548:	200000b4 	.word	0x200000b4

0800a54c <sbrk_aligned>:
 800a54c:	b570      	push	{r4, r5, r6, lr}
 800a54e:	4e0f      	ldr	r6, [pc, #60]	@ (800a58c <sbrk_aligned+0x40>)
 800a550:	460c      	mov	r4, r1
 800a552:	6831      	ldr	r1, [r6, #0]
 800a554:	4605      	mov	r5, r0
 800a556:	b911      	cbnz	r1, 800a55e <sbrk_aligned+0x12>
 800a558:	f000 fe3e 	bl	800b1d8 <_sbrk_r>
 800a55c:	6030      	str	r0, [r6, #0]
 800a55e:	4621      	mov	r1, r4
 800a560:	4628      	mov	r0, r5
 800a562:	f000 fe39 	bl	800b1d8 <_sbrk_r>
 800a566:	1c43      	adds	r3, r0, #1
 800a568:	d103      	bne.n	800a572 <sbrk_aligned+0x26>
 800a56a:	f04f 34ff 	mov.w	r4, #4294967295
 800a56e:	4620      	mov	r0, r4
 800a570:	bd70      	pop	{r4, r5, r6, pc}
 800a572:	1cc4      	adds	r4, r0, #3
 800a574:	f024 0403 	bic.w	r4, r4, #3
 800a578:	42a0      	cmp	r0, r4
 800a57a:	d0f8      	beq.n	800a56e <sbrk_aligned+0x22>
 800a57c:	1a21      	subs	r1, r4, r0
 800a57e:	4628      	mov	r0, r5
 800a580:	f000 fe2a 	bl	800b1d8 <_sbrk_r>
 800a584:	3001      	adds	r0, #1
 800a586:	d1f2      	bne.n	800a56e <sbrk_aligned+0x22>
 800a588:	e7ef      	b.n	800a56a <sbrk_aligned+0x1e>
 800a58a:	bf00      	nop
 800a58c:	20000934 	.word	0x20000934

0800a590 <_malloc_r>:
 800a590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a594:	1ccd      	adds	r5, r1, #3
 800a596:	f025 0503 	bic.w	r5, r5, #3
 800a59a:	3508      	adds	r5, #8
 800a59c:	2d0c      	cmp	r5, #12
 800a59e:	bf38      	it	cc
 800a5a0:	250c      	movcc	r5, #12
 800a5a2:	2d00      	cmp	r5, #0
 800a5a4:	4606      	mov	r6, r0
 800a5a6:	db01      	blt.n	800a5ac <_malloc_r+0x1c>
 800a5a8:	42a9      	cmp	r1, r5
 800a5aa:	d904      	bls.n	800a5b6 <_malloc_r+0x26>
 800a5ac:	230c      	movs	r3, #12
 800a5ae:	6033      	str	r3, [r6, #0]
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a68c <_malloc_r+0xfc>
 800a5ba:	f000 f869 	bl	800a690 <__malloc_lock>
 800a5be:	f8d8 3000 	ldr.w	r3, [r8]
 800a5c2:	461c      	mov	r4, r3
 800a5c4:	bb44      	cbnz	r4, 800a618 <_malloc_r+0x88>
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f7ff ffbf 	bl	800a54c <sbrk_aligned>
 800a5ce:	1c43      	adds	r3, r0, #1
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	d158      	bne.n	800a686 <_malloc_r+0xf6>
 800a5d4:	f8d8 4000 	ldr.w	r4, [r8]
 800a5d8:	4627      	mov	r7, r4
 800a5da:	2f00      	cmp	r7, #0
 800a5dc:	d143      	bne.n	800a666 <_malloc_r+0xd6>
 800a5de:	2c00      	cmp	r4, #0
 800a5e0:	d04b      	beq.n	800a67a <_malloc_r+0xea>
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	4639      	mov	r1, r7
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	eb04 0903 	add.w	r9, r4, r3
 800a5ec:	f000 fdf4 	bl	800b1d8 <_sbrk_r>
 800a5f0:	4581      	cmp	r9, r0
 800a5f2:	d142      	bne.n	800a67a <_malloc_r+0xea>
 800a5f4:	6821      	ldr	r1, [r4, #0]
 800a5f6:	1a6d      	subs	r5, r5, r1
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f7ff ffa6 	bl	800a54c <sbrk_aligned>
 800a600:	3001      	adds	r0, #1
 800a602:	d03a      	beq.n	800a67a <_malloc_r+0xea>
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	442b      	add	r3, r5
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	f8d8 3000 	ldr.w	r3, [r8]
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	bb62      	cbnz	r2, 800a66c <_malloc_r+0xdc>
 800a612:	f8c8 7000 	str.w	r7, [r8]
 800a616:	e00f      	b.n	800a638 <_malloc_r+0xa8>
 800a618:	6822      	ldr	r2, [r4, #0]
 800a61a:	1b52      	subs	r2, r2, r5
 800a61c:	d420      	bmi.n	800a660 <_malloc_r+0xd0>
 800a61e:	2a0b      	cmp	r2, #11
 800a620:	d917      	bls.n	800a652 <_malloc_r+0xc2>
 800a622:	1961      	adds	r1, r4, r5
 800a624:	42a3      	cmp	r3, r4
 800a626:	6025      	str	r5, [r4, #0]
 800a628:	bf18      	it	ne
 800a62a:	6059      	strne	r1, [r3, #4]
 800a62c:	6863      	ldr	r3, [r4, #4]
 800a62e:	bf08      	it	eq
 800a630:	f8c8 1000 	streq.w	r1, [r8]
 800a634:	5162      	str	r2, [r4, r5]
 800a636:	604b      	str	r3, [r1, #4]
 800a638:	4630      	mov	r0, r6
 800a63a:	f000 f82f 	bl	800a69c <__malloc_unlock>
 800a63e:	f104 000b 	add.w	r0, r4, #11
 800a642:	1d23      	adds	r3, r4, #4
 800a644:	f020 0007 	bic.w	r0, r0, #7
 800a648:	1ac2      	subs	r2, r0, r3
 800a64a:	bf1c      	itt	ne
 800a64c:	1a1b      	subne	r3, r3, r0
 800a64e:	50a3      	strne	r3, [r4, r2]
 800a650:	e7af      	b.n	800a5b2 <_malloc_r+0x22>
 800a652:	6862      	ldr	r2, [r4, #4]
 800a654:	42a3      	cmp	r3, r4
 800a656:	bf0c      	ite	eq
 800a658:	f8c8 2000 	streq.w	r2, [r8]
 800a65c:	605a      	strne	r2, [r3, #4]
 800a65e:	e7eb      	b.n	800a638 <_malloc_r+0xa8>
 800a660:	4623      	mov	r3, r4
 800a662:	6864      	ldr	r4, [r4, #4]
 800a664:	e7ae      	b.n	800a5c4 <_malloc_r+0x34>
 800a666:	463c      	mov	r4, r7
 800a668:	687f      	ldr	r7, [r7, #4]
 800a66a:	e7b6      	b.n	800a5da <_malloc_r+0x4a>
 800a66c:	461a      	mov	r2, r3
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	42a3      	cmp	r3, r4
 800a672:	d1fb      	bne.n	800a66c <_malloc_r+0xdc>
 800a674:	2300      	movs	r3, #0
 800a676:	6053      	str	r3, [r2, #4]
 800a678:	e7de      	b.n	800a638 <_malloc_r+0xa8>
 800a67a:	230c      	movs	r3, #12
 800a67c:	6033      	str	r3, [r6, #0]
 800a67e:	4630      	mov	r0, r6
 800a680:	f000 f80c 	bl	800a69c <__malloc_unlock>
 800a684:	e794      	b.n	800a5b0 <_malloc_r+0x20>
 800a686:	6005      	str	r5, [r0, #0]
 800a688:	e7d6      	b.n	800a638 <_malloc_r+0xa8>
 800a68a:	bf00      	nop
 800a68c:	20000938 	.word	0x20000938

0800a690 <__malloc_lock>:
 800a690:	4801      	ldr	r0, [pc, #4]	@ (800a698 <__malloc_lock+0x8>)
 800a692:	f7ff b8a0 	b.w	80097d6 <__retarget_lock_acquire_recursive>
 800a696:	bf00      	nop
 800a698:	20000930 	.word	0x20000930

0800a69c <__malloc_unlock>:
 800a69c:	4801      	ldr	r0, [pc, #4]	@ (800a6a4 <__malloc_unlock+0x8>)
 800a69e:	f7ff b89b 	b.w	80097d8 <__retarget_lock_release_recursive>
 800a6a2:	bf00      	nop
 800a6a4:	20000930 	.word	0x20000930

0800a6a8 <_Balloc>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	69c6      	ldr	r6, [r0, #28]
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	460d      	mov	r5, r1
 800a6b0:	b976      	cbnz	r6, 800a6d0 <_Balloc+0x28>
 800a6b2:	2010      	movs	r0, #16
 800a6b4:	f7ff ff42 	bl	800a53c <malloc>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	61e0      	str	r0, [r4, #28]
 800a6bc:	b920      	cbnz	r0, 800a6c8 <_Balloc+0x20>
 800a6be:	4b18      	ldr	r3, [pc, #96]	@ (800a720 <_Balloc+0x78>)
 800a6c0:	4818      	ldr	r0, [pc, #96]	@ (800a724 <_Balloc+0x7c>)
 800a6c2:	216b      	movs	r1, #107	@ 0x6b
 800a6c4:	f000 fd98 	bl	800b1f8 <__assert_func>
 800a6c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6cc:	6006      	str	r6, [r0, #0]
 800a6ce:	60c6      	str	r6, [r0, #12]
 800a6d0:	69e6      	ldr	r6, [r4, #28]
 800a6d2:	68f3      	ldr	r3, [r6, #12]
 800a6d4:	b183      	cbz	r3, 800a6f8 <_Balloc+0x50>
 800a6d6:	69e3      	ldr	r3, [r4, #28]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a6de:	b9b8      	cbnz	r0, 800a710 <_Balloc+0x68>
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	fa01 f605 	lsl.w	r6, r1, r5
 800a6e6:	1d72      	adds	r2, r6, #5
 800a6e8:	0092      	lsls	r2, r2, #2
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f000 fda2 	bl	800b234 <_calloc_r>
 800a6f0:	b160      	cbz	r0, 800a70c <_Balloc+0x64>
 800a6f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6f6:	e00e      	b.n	800a716 <_Balloc+0x6e>
 800a6f8:	2221      	movs	r2, #33	@ 0x21
 800a6fa:	2104      	movs	r1, #4
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f000 fd99 	bl	800b234 <_calloc_r>
 800a702:	69e3      	ldr	r3, [r4, #28]
 800a704:	60f0      	str	r0, [r6, #12]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1e4      	bne.n	800a6d6 <_Balloc+0x2e>
 800a70c:	2000      	movs	r0, #0
 800a70e:	bd70      	pop	{r4, r5, r6, pc}
 800a710:	6802      	ldr	r2, [r0, #0]
 800a712:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a716:	2300      	movs	r3, #0
 800a718:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a71c:	e7f7      	b.n	800a70e <_Balloc+0x66>
 800a71e:	bf00      	nop
 800a720:	0800e071 	.word	0x0800e071
 800a724:	0800e0f1 	.word	0x0800e0f1

0800a728 <_Bfree>:
 800a728:	b570      	push	{r4, r5, r6, lr}
 800a72a:	69c6      	ldr	r6, [r0, #28]
 800a72c:	4605      	mov	r5, r0
 800a72e:	460c      	mov	r4, r1
 800a730:	b976      	cbnz	r6, 800a750 <_Bfree+0x28>
 800a732:	2010      	movs	r0, #16
 800a734:	f7ff ff02 	bl	800a53c <malloc>
 800a738:	4602      	mov	r2, r0
 800a73a:	61e8      	str	r0, [r5, #28]
 800a73c:	b920      	cbnz	r0, 800a748 <_Bfree+0x20>
 800a73e:	4b09      	ldr	r3, [pc, #36]	@ (800a764 <_Bfree+0x3c>)
 800a740:	4809      	ldr	r0, [pc, #36]	@ (800a768 <_Bfree+0x40>)
 800a742:	218f      	movs	r1, #143	@ 0x8f
 800a744:	f000 fd58 	bl	800b1f8 <__assert_func>
 800a748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a74c:	6006      	str	r6, [r0, #0]
 800a74e:	60c6      	str	r6, [r0, #12]
 800a750:	b13c      	cbz	r4, 800a762 <_Bfree+0x3a>
 800a752:	69eb      	ldr	r3, [r5, #28]
 800a754:	6862      	ldr	r2, [r4, #4]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a75c:	6021      	str	r1, [r4, #0]
 800a75e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a762:	bd70      	pop	{r4, r5, r6, pc}
 800a764:	0800e071 	.word	0x0800e071
 800a768:	0800e0f1 	.word	0x0800e0f1

0800a76c <__multadd>:
 800a76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a770:	690d      	ldr	r5, [r1, #16]
 800a772:	4607      	mov	r7, r0
 800a774:	460c      	mov	r4, r1
 800a776:	461e      	mov	r6, r3
 800a778:	f101 0c14 	add.w	ip, r1, #20
 800a77c:	2000      	movs	r0, #0
 800a77e:	f8dc 3000 	ldr.w	r3, [ip]
 800a782:	b299      	uxth	r1, r3
 800a784:	fb02 6101 	mla	r1, r2, r1, r6
 800a788:	0c1e      	lsrs	r6, r3, #16
 800a78a:	0c0b      	lsrs	r3, r1, #16
 800a78c:	fb02 3306 	mla	r3, r2, r6, r3
 800a790:	b289      	uxth	r1, r1
 800a792:	3001      	adds	r0, #1
 800a794:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a798:	4285      	cmp	r5, r0
 800a79a:	f84c 1b04 	str.w	r1, [ip], #4
 800a79e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a7a2:	dcec      	bgt.n	800a77e <__multadd+0x12>
 800a7a4:	b30e      	cbz	r6, 800a7ea <__multadd+0x7e>
 800a7a6:	68a3      	ldr	r3, [r4, #8]
 800a7a8:	42ab      	cmp	r3, r5
 800a7aa:	dc19      	bgt.n	800a7e0 <__multadd+0x74>
 800a7ac:	6861      	ldr	r1, [r4, #4]
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	3101      	adds	r1, #1
 800a7b2:	f7ff ff79 	bl	800a6a8 <_Balloc>
 800a7b6:	4680      	mov	r8, r0
 800a7b8:	b928      	cbnz	r0, 800a7c6 <__multadd+0x5a>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a7f0 <__multadd+0x84>)
 800a7be:	480d      	ldr	r0, [pc, #52]	@ (800a7f4 <__multadd+0x88>)
 800a7c0:	21ba      	movs	r1, #186	@ 0xba
 800a7c2:	f000 fd19 	bl	800b1f8 <__assert_func>
 800a7c6:	6922      	ldr	r2, [r4, #16]
 800a7c8:	3202      	adds	r2, #2
 800a7ca:	f104 010c 	add.w	r1, r4, #12
 800a7ce:	0092      	lsls	r2, r2, #2
 800a7d0:	300c      	adds	r0, #12
 800a7d2:	f7ff f802 	bl	80097da <memcpy>
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7ff ffa5 	bl	800a728 <_Bfree>
 800a7de:	4644      	mov	r4, r8
 800a7e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a7e4:	3501      	adds	r5, #1
 800a7e6:	615e      	str	r6, [r3, #20]
 800a7e8:	6125      	str	r5, [r4, #16]
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f0:	0800e0e0 	.word	0x0800e0e0
 800a7f4:	0800e0f1 	.word	0x0800e0f1

0800a7f8 <__hi0bits>:
 800a7f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	bf36      	itet	cc
 800a800:	0403      	lslcc	r3, r0, #16
 800a802:	2000      	movcs	r0, #0
 800a804:	2010      	movcc	r0, #16
 800a806:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a80a:	bf3c      	itt	cc
 800a80c:	021b      	lslcc	r3, r3, #8
 800a80e:	3008      	addcc	r0, #8
 800a810:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a814:	bf3c      	itt	cc
 800a816:	011b      	lslcc	r3, r3, #4
 800a818:	3004      	addcc	r0, #4
 800a81a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a81e:	bf3c      	itt	cc
 800a820:	009b      	lslcc	r3, r3, #2
 800a822:	3002      	addcc	r0, #2
 800a824:	2b00      	cmp	r3, #0
 800a826:	db05      	blt.n	800a834 <__hi0bits+0x3c>
 800a828:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a82c:	f100 0001 	add.w	r0, r0, #1
 800a830:	bf08      	it	eq
 800a832:	2020      	moveq	r0, #32
 800a834:	4770      	bx	lr

0800a836 <__lo0bits>:
 800a836:	6803      	ldr	r3, [r0, #0]
 800a838:	4602      	mov	r2, r0
 800a83a:	f013 0007 	ands.w	r0, r3, #7
 800a83e:	d00b      	beq.n	800a858 <__lo0bits+0x22>
 800a840:	07d9      	lsls	r1, r3, #31
 800a842:	d421      	bmi.n	800a888 <__lo0bits+0x52>
 800a844:	0798      	lsls	r0, r3, #30
 800a846:	bf49      	itett	mi
 800a848:	085b      	lsrmi	r3, r3, #1
 800a84a:	089b      	lsrpl	r3, r3, #2
 800a84c:	2001      	movmi	r0, #1
 800a84e:	6013      	strmi	r3, [r2, #0]
 800a850:	bf5c      	itt	pl
 800a852:	6013      	strpl	r3, [r2, #0]
 800a854:	2002      	movpl	r0, #2
 800a856:	4770      	bx	lr
 800a858:	b299      	uxth	r1, r3
 800a85a:	b909      	cbnz	r1, 800a860 <__lo0bits+0x2a>
 800a85c:	0c1b      	lsrs	r3, r3, #16
 800a85e:	2010      	movs	r0, #16
 800a860:	b2d9      	uxtb	r1, r3
 800a862:	b909      	cbnz	r1, 800a868 <__lo0bits+0x32>
 800a864:	3008      	adds	r0, #8
 800a866:	0a1b      	lsrs	r3, r3, #8
 800a868:	0719      	lsls	r1, r3, #28
 800a86a:	bf04      	itt	eq
 800a86c:	091b      	lsreq	r3, r3, #4
 800a86e:	3004      	addeq	r0, #4
 800a870:	0799      	lsls	r1, r3, #30
 800a872:	bf04      	itt	eq
 800a874:	089b      	lsreq	r3, r3, #2
 800a876:	3002      	addeq	r0, #2
 800a878:	07d9      	lsls	r1, r3, #31
 800a87a:	d403      	bmi.n	800a884 <__lo0bits+0x4e>
 800a87c:	085b      	lsrs	r3, r3, #1
 800a87e:	f100 0001 	add.w	r0, r0, #1
 800a882:	d003      	beq.n	800a88c <__lo0bits+0x56>
 800a884:	6013      	str	r3, [r2, #0]
 800a886:	4770      	bx	lr
 800a888:	2000      	movs	r0, #0
 800a88a:	4770      	bx	lr
 800a88c:	2020      	movs	r0, #32
 800a88e:	4770      	bx	lr

0800a890 <__i2b>:
 800a890:	b510      	push	{r4, lr}
 800a892:	460c      	mov	r4, r1
 800a894:	2101      	movs	r1, #1
 800a896:	f7ff ff07 	bl	800a6a8 <_Balloc>
 800a89a:	4602      	mov	r2, r0
 800a89c:	b928      	cbnz	r0, 800a8aa <__i2b+0x1a>
 800a89e:	4b05      	ldr	r3, [pc, #20]	@ (800a8b4 <__i2b+0x24>)
 800a8a0:	4805      	ldr	r0, [pc, #20]	@ (800a8b8 <__i2b+0x28>)
 800a8a2:	f240 1145 	movw	r1, #325	@ 0x145
 800a8a6:	f000 fca7 	bl	800b1f8 <__assert_func>
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	6144      	str	r4, [r0, #20]
 800a8ae:	6103      	str	r3, [r0, #16]
 800a8b0:	bd10      	pop	{r4, pc}
 800a8b2:	bf00      	nop
 800a8b4:	0800e0e0 	.word	0x0800e0e0
 800a8b8:	0800e0f1 	.word	0x0800e0f1

0800a8bc <__multiply>:
 800a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c0:	4617      	mov	r7, r2
 800a8c2:	690a      	ldr	r2, [r1, #16]
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	bfa8      	it	ge
 800a8ca:	463b      	movge	r3, r7
 800a8cc:	4689      	mov	r9, r1
 800a8ce:	bfa4      	itt	ge
 800a8d0:	460f      	movge	r7, r1
 800a8d2:	4699      	movge	r9, r3
 800a8d4:	693d      	ldr	r5, [r7, #16]
 800a8d6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	6879      	ldr	r1, [r7, #4]
 800a8de:	eb05 060a 	add.w	r6, r5, sl
 800a8e2:	42b3      	cmp	r3, r6
 800a8e4:	b085      	sub	sp, #20
 800a8e6:	bfb8      	it	lt
 800a8e8:	3101      	addlt	r1, #1
 800a8ea:	f7ff fedd 	bl	800a6a8 <_Balloc>
 800a8ee:	b930      	cbnz	r0, 800a8fe <__multiply+0x42>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	4b41      	ldr	r3, [pc, #260]	@ (800a9f8 <__multiply+0x13c>)
 800a8f4:	4841      	ldr	r0, [pc, #260]	@ (800a9fc <__multiply+0x140>)
 800a8f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a8fa:	f000 fc7d 	bl	800b1f8 <__assert_func>
 800a8fe:	f100 0414 	add.w	r4, r0, #20
 800a902:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a906:	4623      	mov	r3, r4
 800a908:	2200      	movs	r2, #0
 800a90a:	4573      	cmp	r3, lr
 800a90c:	d320      	bcc.n	800a950 <__multiply+0x94>
 800a90e:	f107 0814 	add.w	r8, r7, #20
 800a912:	f109 0114 	add.w	r1, r9, #20
 800a916:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a91a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a91e:	9302      	str	r3, [sp, #8]
 800a920:	1beb      	subs	r3, r5, r7
 800a922:	3b15      	subs	r3, #21
 800a924:	f023 0303 	bic.w	r3, r3, #3
 800a928:	3304      	adds	r3, #4
 800a92a:	3715      	adds	r7, #21
 800a92c:	42bd      	cmp	r5, r7
 800a92e:	bf38      	it	cc
 800a930:	2304      	movcc	r3, #4
 800a932:	9301      	str	r3, [sp, #4]
 800a934:	9b02      	ldr	r3, [sp, #8]
 800a936:	9103      	str	r1, [sp, #12]
 800a938:	428b      	cmp	r3, r1
 800a93a:	d80c      	bhi.n	800a956 <__multiply+0x9a>
 800a93c:	2e00      	cmp	r6, #0
 800a93e:	dd03      	ble.n	800a948 <__multiply+0x8c>
 800a940:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a944:	2b00      	cmp	r3, #0
 800a946:	d055      	beq.n	800a9f4 <__multiply+0x138>
 800a948:	6106      	str	r6, [r0, #16]
 800a94a:	b005      	add	sp, #20
 800a94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a950:	f843 2b04 	str.w	r2, [r3], #4
 800a954:	e7d9      	b.n	800a90a <__multiply+0x4e>
 800a956:	f8b1 a000 	ldrh.w	sl, [r1]
 800a95a:	f1ba 0f00 	cmp.w	sl, #0
 800a95e:	d01f      	beq.n	800a9a0 <__multiply+0xe4>
 800a960:	46c4      	mov	ip, r8
 800a962:	46a1      	mov	r9, r4
 800a964:	2700      	movs	r7, #0
 800a966:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a96a:	f8d9 3000 	ldr.w	r3, [r9]
 800a96e:	fa1f fb82 	uxth.w	fp, r2
 800a972:	b29b      	uxth	r3, r3
 800a974:	fb0a 330b 	mla	r3, sl, fp, r3
 800a978:	443b      	add	r3, r7
 800a97a:	f8d9 7000 	ldr.w	r7, [r9]
 800a97e:	0c12      	lsrs	r2, r2, #16
 800a980:	0c3f      	lsrs	r7, r7, #16
 800a982:	fb0a 7202 	mla	r2, sl, r2, r7
 800a986:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a990:	4565      	cmp	r5, ip
 800a992:	f849 3b04 	str.w	r3, [r9], #4
 800a996:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a99a:	d8e4      	bhi.n	800a966 <__multiply+0xaa>
 800a99c:	9b01      	ldr	r3, [sp, #4]
 800a99e:	50e7      	str	r7, [r4, r3]
 800a9a0:	9b03      	ldr	r3, [sp, #12]
 800a9a2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a9a6:	3104      	adds	r1, #4
 800a9a8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ac:	d020      	beq.n	800a9f0 <__multiply+0x134>
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	4647      	mov	r7, r8
 800a9b2:	46a4      	mov	ip, r4
 800a9b4:	f04f 0a00 	mov.w	sl, #0
 800a9b8:	f8b7 b000 	ldrh.w	fp, [r7]
 800a9bc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a9c0:	fb09 220b 	mla	r2, r9, fp, r2
 800a9c4:	4452      	add	r2, sl
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9cc:	f84c 3b04 	str.w	r3, [ip], #4
 800a9d0:	f857 3b04 	ldr.w	r3, [r7], #4
 800a9d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9d8:	f8bc 3000 	ldrh.w	r3, [ip]
 800a9dc:	fb09 330a 	mla	r3, r9, sl, r3
 800a9e0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a9e4:	42bd      	cmp	r5, r7
 800a9e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9ea:	d8e5      	bhi.n	800a9b8 <__multiply+0xfc>
 800a9ec:	9a01      	ldr	r2, [sp, #4]
 800a9ee:	50a3      	str	r3, [r4, r2]
 800a9f0:	3404      	adds	r4, #4
 800a9f2:	e79f      	b.n	800a934 <__multiply+0x78>
 800a9f4:	3e01      	subs	r6, #1
 800a9f6:	e7a1      	b.n	800a93c <__multiply+0x80>
 800a9f8:	0800e0e0 	.word	0x0800e0e0
 800a9fc:	0800e0f1 	.word	0x0800e0f1

0800aa00 <__pow5mult>:
 800aa00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa04:	4615      	mov	r5, r2
 800aa06:	f012 0203 	ands.w	r2, r2, #3
 800aa0a:	4607      	mov	r7, r0
 800aa0c:	460e      	mov	r6, r1
 800aa0e:	d007      	beq.n	800aa20 <__pow5mult+0x20>
 800aa10:	4c25      	ldr	r4, [pc, #148]	@ (800aaa8 <__pow5mult+0xa8>)
 800aa12:	3a01      	subs	r2, #1
 800aa14:	2300      	movs	r3, #0
 800aa16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa1a:	f7ff fea7 	bl	800a76c <__multadd>
 800aa1e:	4606      	mov	r6, r0
 800aa20:	10ad      	asrs	r5, r5, #2
 800aa22:	d03d      	beq.n	800aaa0 <__pow5mult+0xa0>
 800aa24:	69fc      	ldr	r4, [r7, #28]
 800aa26:	b97c      	cbnz	r4, 800aa48 <__pow5mult+0x48>
 800aa28:	2010      	movs	r0, #16
 800aa2a:	f7ff fd87 	bl	800a53c <malloc>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	61f8      	str	r0, [r7, #28]
 800aa32:	b928      	cbnz	r0, 800aa40 <__pow5mult+0x40>
 800aa34:	4b1d      	ldr	r3, [pc, #116]	@ (800aaac <__pow5mult+0xac>)
 800aa36:	481e      	ldr	r0, [pc, #120]	@ (800aab0 <__pow5mult+0xb0>)
 800aa38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aa3c:	f000 fbdc 	bl	800b1f8 <__assert_func>
 800aa40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa44:	6004      	str	r4, [r0, #0]
 800aa46:	60c4      	str	r4, [r0, #12]
 800aa48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aa4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa50:	b94c      	cbnz	r4, 800aa66 <__pow5mult+0x66>
 800aa52:	f240 2171 	movw	r1, #625	@ 0x271
 800aa56:	4638      	mov	r0, r7
 800aa58:	f7ff ff1a 	bl	800a890 <__i2b>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa62:	4604      	mov	r4, r0
 800aa64:	6003      	str	r3, [r0, #0]
 800aa66:	f04f 0900 	mov.w	r9, #0
 800aa6a:	07eb      	lsls	r3, r5, #31
 800aa6c:	d50a      	bpl.n	800aa84 <__pow5mult+0x84>
 800aa6e:	4631      	mov	r1, r6
 800aa70:	4622      	mov	r2, r4
 800aa72:	4638      	mov	r0, r7
 800aa74:	f7ff ff22 	bl	800a8bc <__multiply>
 800aa78:	4631      	mov	r1, r6
 800aa7a:	4680      	mov	r8, r0
 800aa7c:	4638      	mov	r0, r7
 800aa7e:	f7ff fe53 	bl	800a728 <_Bfree>
 800aa82:	4646      	mov	r6, r8
 800aa84:	106d      	asrs	r5, r5, #1
 800aa86:	d00b      	beq.n	800aaa0 <__pow5mult+0xa0>
 800aa88:	6820      	ldr	r0, [r4, #0]
 800aa8a:	b938      	cbnz	r0, 800aa9c <__pow5mult+0x9c>
 800aa8c:	4622      	mov	r2, r4
 800aa8e:	4621      	mov	r1, r4
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7ff ff13 	bl	800a8bc <__multiply>
 800aa96:	6020      	str	r0, [r4, #0]
 800aa98:	f8c0 9000 	str.w	r9, [r0]
 800aa9c:	4604      	mov	r4, r0
 800aa9e:	e7e4      	b.n	800aa6a <__pow5mult+0x6a>
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaa6:	bf00      	nop
 800aaa8:	0800e1a4 	.word	0x0800e1a4
 800aaac:	0800e071 	.word	0x0800e071
 800aab0:	0800e0f1 	.word	0x0800e0f1

0800aab4 <__lshift>:
 800aab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aab8:	460c      	mov	r4, r1
 800aaba:	6849      	ldr	r1, [r1, #4]
 800aabc:	6923      	ldr	r3, [r4, #16]
 800aabe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aac2:	68a3      	ldr	r3, [r4, #8]
 800aac4:	4607      	mov	r7, r0
 800aac6:	4691      	mov	r9, r2
 800aac8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aacc:	f108 0601 	add.w	r6, r8, #1
 800aad0:	42b3      	cmp	r3, r6
 800aad2:	db0b      	blt.n	800aaec <__lshift+0x38>
 800aad4:	4638      	mov	r0, r7
 800aad6:	f7ff fde7 	bl	800a6a8 <_Balloc>
 800aada:	4605      	mov	r5, r0
 800aadc:	b948      	cbnz	r0, 800aaf2 <__lshift+0x3e>
 800aade:	4602      	mov	r2, r0
 800aae0:	4b28      	ldr	r3, [pc, #160]	@ (800ab84 <__lshift+0xd0>)
 800aae2:	4829      	ldr	r0, [pc, #164]	@ (800ab88 <__lshift+0xd4>)
 800aae4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aae8:	f000 fb86 	bl	800b1f8 <__assert_func>
 800aaec:	3101      	adds	r1, #1
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	e7ee      	b.n	800aad0 <__lshift+0x1c>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f100 0114 	add.w	r1, r0, #20
 800aaf8:	f100 0210 	add.w	r2, r0, #16
 800aafc:	4618      	mov	r0, r3
 800aafe:	4553      	cmp	r3, sl
 800ab00:	db33      	blt.n	800ab6a <__lshift+0xb6>
 800ab02:	6920      	ldr	r0, [r4, #16]
 800ab04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab08:	f104 0314 	add.w	r3, r4, #20
 800ab0c:	f019 091f 	ands.w	r9, r9, #31
 800ab10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab18:	d02b      	beq.n	800ab72 <__lshift+0xbe>
 800ab1a:	f1c9 0e20 	rsb	lr, r9, #32
 800ab1e:	468a      	mov	sl, r1
 800ab20:	2200      	movs	r2, #0
 800ab22:	6818      	ldr	r0, [r3, #0]
 800ab24:	fa00 f009 	lsl.w	r0, r0, r9
 800ab28:	4310      	orrs	r0, r2
 800ab2a:	f84a 0b04 	str.w	r0, [sl], #4
 800ab2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab32:	459c      	cmp	ip, r3
 800ab34:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab38:	d8f3      	bhi.n	800ab22 <__lshift+0x6e>
 800ab3a:	ebac 0304 	sub.w	r3, ip, r4
 800ab3e:	3b15      	subs	r3, #21
 800ab40:	f023 0303 	bic.w	r3, r3, #3
 800ab44:	3304      	adds	r3, #4
 800ab46:	f104 0015 	add.w	r0, r4, #21
 800ab4a:	4560      	cmp	r0, ip
 800ab4c:	bf88      	it	hi
 800ab4e:	2304      	movhi	r3, #4
 800ab50:	50ca      	str	r2, [r1, r3]
 800ab52:	b10a      	cbz	r2, 800ab58 <__lshift+0xa4>
 800ab54:	f108 0602 	add.w	r6, r8, #2
 800ab58:	3e01      	subs	r6, #1
 800ab5a:	4638      	mov	r0, r7
 800ab5c:	612e      	str	r6, [r5, #16]
 800ab5e:	4621      	mov	r1, r4
 800ab60:	f7ff fde2 	bl	800a728 <_Bfree>
 800ab64:	4628      	mov	r0, r5
 800ab66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab6e:	3301      	adds	r3, #1
 800ab70:	e7c5      	b.n	800aafe <__lshift+0x4a>
 800ab72:	3904      	subs	r1, #4
 800ab74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab78:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab7c:	459c      	cmp	ip, r3
 800ab7e:	d8f9      	bhi.n	800ab74 <__lshift+0xc0>
 800ab80:	e7ea      	b.n	800ab58 <__lshift+0xa4>
 800ab82:	bf00      	nop
 800ab84:	0800e0e0 	.word	0x0800e0e0
 800ab88:	0800e0f1 	.word	0x0800e0f1

0800ab8c <__mcmp>:
 800ab8c:	690a      	ldr	r2, [r1, #16]
 800ab8e:	4603      	mov	r3, r0
 800ab90:	6900      	ldr	r0, [r0, #16]
 800ab92:	1a80      	subs	r0, r0, r2
 800ab94:	b530      	push	{r4, r5, lr}
 800ab96:	d10e      	bne.n	800abb6 <__mcmp+0x2a>
 800ab98:	3314      	adds	r3, #20
 800ab9a:	3114      	adds	r1, #20
 800ab9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aba0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aba4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aba8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800abac:	4295      	cmp	r5, r2
 800abae:	d003      	beq.n	800abb8 <__mcmp+0x2c>
 800abb0:	d205      	bcs.n	800abbe <__mcmp+0x32>
 800abb2:	f04f 30ff 	mov.w	r0, #4294967295
 800abb6:	bd30      	pop	{r4, r5, pc}
 800abb8:	42a3      	cmp	r3, r4
 800abba:	d3f3      	bcc.n	800aba4 <__mcmp+0x18>
 800abbc:	e7fb      	b.n	800abb6 <__mcmp+0x2a>
 800abbe:	2001      	movs	r0, #1
 800abc0:	e7f9      	b.n	800abb6 <__mcmp+0x2a>
	...

0800abc4 <__mdiff>:
 800abc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc8:	4689      	mov	r9, r1
 800abca:	4606      	mov	r6, r0
 800abcc:	4611      	mov	r1, r2
 800abce:	4648      	mov	r0, r9
 800abd0:	4614      	mov	r4, r2
 800abd2:	f7ff ffdb 	bl	800ab8c <__mcmp>
 800abd6:	1e05      	subs	r5, r0, #0
 800abd8:	d112      	bne.n	800ac00 <__mdiff+0x3c>
 800abda:	4629      	mov	r1, r5
 800abdc:	4630      	mov	r0, r6
 800abde:	f7ff fd63 	bl	800a6a8 <_Balloc>
 800abe2:	4602      	mov	r2, r0
 800abe4:	b928      	cbnz	r0, 800abf2 <__mdiff+0x2e>
 800abe6:	4b3f      	ldr	r3, [pc, #252]	@ (800ace4 <__mdiff+0x120>)
 800abe8:	f240 2137 	movw	r1, #567	@ 0x237
 800abec:	483e      	ldr	r0, [pc, #248]	@ (800ace8 <__mdiff+0x124>)
 800abee:	f000 fb03 	bl	800b1f8 <__assert_func>
 800abf2:	2301      	movs	r3, #1
 800abf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800abf8:	4610      	mov	r0, r2
 800abfa:	b003      	add	sp, #12
 800abfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac00:	bfbc      	itt	lt
 800ac02:	464b      	movlt	r3, r9
 800ac04:	46a1      	movlt	r9, r4
 800ac06:	4630      	mov	r0, r6
 800ac08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ac0c:	bfba      	itte	lt
 800ac0e:	461c      	movlt	r4, r3
 800ac10:	2501      	movlt	r5, #1
 800ac12:	2500      	movge	r5, #0
 800ac14:	f7ff fd48 	bl	800a6a8 <_Balloc>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	b918      	cbnz	r0, 800ac24 <__mdiff+0x60>
 800ac1c:	4b31      	ldr	r3, [pc, #196]	@ (800ace4 <__mdiff+0x120>)
 800ac1e:	f240 2145 	movw	r1, #581	@ 0x245
 800ac22:	e7e3      	b.n	800abec <__mdiff+0x28>
 800ac24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ac28:	6926      	ldr	r6, [r4, #16]
 800ac2a:	60c5      	str	r5, [r0, #12]
 800ac2c:	f109 0310 	add.w	r3, r9, #16
 800ac30:	f109 0514 	add.w	r5, r9, #20
 800ac34:	f104 0e14 	add.w	lr, r4, #20
 800ac38:	f100 0b14 	add.w	fp, r0, #20
 800ac3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ac40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	46d9      	mov	r9, fp
 800ac48:	f04f 0c00 	mov.w	ip, #0
 800ac4c:	9b01      	ldr	r3, [sp, #4]
 800ac4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ac52:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ac56:	9301      	str	r3, [sp, #4]
 800ac58:	fa1f f38a 	uxth.w	r3, sl
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	b283      	uxth	r3, r0
 800ac60:	1acb      	subs	r3, r1, r3
 800ac62:	0c00      	lsrs	r0, r0, #16
 800ac64:	4463      	add	r3, ip
 800ac66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ac6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ac74:	4576      	cmp	r6, lr
 800ac76:	f849 3b04 	str.w	r3, [r9], #4
 800ac7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac7e:	d8e5      	bhi.n	800ac4c <__mdiff+0x88>
 800ac80:	1b33      	subs	r3, r6, r4
 800ac82:	3b15      	subs	r3, #21
 800ac84:	f023 0303 	bic.w	r3, r3, #3
 800ac88:	3415      	adds	r4, #21
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	42a6      	cmp	r6, r4
 800ac8e:	bf38      	it	cc
 800ac90:	2304      	movcc	r3, #4
 800ac92:	441d      	add	r5, r3
 800ac94:	445b      	add	r3, fp
 800ac96:	461e      	mov	r6, r3
 800ac98:	462c      	mov	r4, r5
 800ac9a:	4544      	cmp	r4, r8
 800ac9c:	d30e      	bcc.n	800acbc <__mdiff+0xf8>
 800ac9e:	f108 0103 	add.w	r1, r8, #3
 800aca2:	1b49      	subs	r1, r1, r5
 800aca4:	f021 0103 	bic.w	r1, r1, #3
 800aca8:	3d03      	subs	r5, #3
 800acaa:	45a8      	cmp	r8, r5
 800acac:	bf38      	it	cc
 800acae:	2100      	movcc	r1, #0
 800acb0:	440b      	add	r3, r1
 800acb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acb6:	b191      	cbz	r1, 800acde <__mdiff+0x11a>
 800acb8:	6117      	str	r7, [r2, #16]
 800acba:	e79d      	b.n	800abf8 <__mdiff+0x34>
 800acbc:	f854 1b04 	ldr.w	r1, [r4], #4
 800acc0:	46e6      	mov	lr, ip
 800acc2:	0c08      	lsrs	r0, r1, #16
 800acc4:	fa1c fc81 	uxtah	ip, ip, r1
 800acc8:	4471      	add	r1, lr
 800acca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800acce:	b289      	uxth	r1, r1
 800acd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800acd4:	f846 1b04 	str.w	r1, [r6], #4
 800acd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800acdc:	e7dd      	b.n	800ac9a <__mdiff+0xd6>
 800acde:	3f01      	subs	r7, #1
 800ace0:	e7e7      	b.n	800acb2 <__mdiff+0xee>
 800ace2:	bf00      	nop
 800ace4:	0800e0e0 	.word	0x0800e0e0
 800ace8:	0800e0f1 	.word	0x0800e0f1

0800acec <__d2b>:
 800acec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acf0:	460f      	mov	r7, r1
 800acf2:	2101      	movs	r1, #1
 800acf4:	ec59 8b10 	vmov	r8, r9, d0
 800acf8:	4616      	mov	r6, r2
 800acfa:	f7ff fcd5 	bl	800a6a8 <_Balloc>
 800acfe:	4604      	mov	r4, r0
 800ad00:	b930      	cbnz	r0, 800ad10 <__d2b+0x24>
 800ad02:	4602      	mov	r2, r0
 800ad04:	4b23      	ldr	r3, [pc, #140]	@ (800ad94 <__d2b+0xa8>)
 800ad06:	4824      	ldr	r0, [pc, #144]	@ (800ad98 <__d2b+0xac>)
 800ad08:	f240 310f 	movw	r1, #783	@ 0x30f
 800ad0c:	f000 fa74 	bl	800b1f8 <__assert_func>
 800ad10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ad14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad18:	b10d      	cbz	r5, 800ad1e <__d2b+0x32>
 800ad1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad1e:	9301      	str	r3, [sp, #4]
 800ad20:	f1b8 0300 	subs.w	r3, r8, #0
 800ad24:	d023      	beq.n	800ad6e <__d2b+0x82>
 800ad26:	4668      	mov	r0, sp
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	f7ff fd84 	bl	800a836 <__lo0bits>
 800ad2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ad32:	b1d0      	cbz	r0, 800ad6a <__d2b+0x7e>
 800ad34:	f1c0 0320 	rsb	r3, r0, #32
 800ad38:	fa02 f303 	lsl.w	r3, r2, r3
 800ad3c:	430b      	orrs	r3, r1
 800ad3e:	40c2      	lsrs	r2, r0
 800ad40:	6163      	str	r3, [r4, #20]
 800ad42:	9201      	str	r2, [sp, #4]
 800ad44:	9b01      	ldr	r3, [sp, #4]
 800ad46:	61a3      	str	r3, [r4, #24]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	bf0c      	ite	eq
 800ad4c:	2201      	moveq	r2, #1
 800ad4e:	2202      	movne	r2, #2
 800ad50:	6122      	str	r2, [r4, #16]
 800ad52:	b1a5      	cbz	r5, 800ad7e <__d2b+0x92>
 800ad54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ad58:	4405      	add	r5, r0
 800ad5a:	603d      	str	r5, [r7, #0]
 800ad5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ad60:	6030      	str	r0, [r6, #0]
 800ad62:	4620      	mov	r0, r4
 800ad64:	b003      	add	sp, #12
 800ad66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad6a:	6161      	str	r1, [r4, #20]
 800ad6c:	e7ea      	b.n	800ad44 <__d2b+0x58>
 800ad6e:	a801      	add	r0, sp, #4
 800ad70:	f7ff fd61 	bl	800a836 <__lo0bits>
 800ad74:	9b01      	ldr	r3, [sp, #4]
 800ad76:	6163      	str	r3, [r4, #20]
 800ad78:	3020      	adds	r0, #32
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	e7e8      	b.n	800ad50 <__d2b+0x64>
 800ad7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad86:	6038      	str	r0, [r7, #0]
 800ad88:	6918      	ldr	r0, [r3, #16]
 800ad8a:	f7ff fd35 	bl	800a7f8 <__hi0bits>
 800ad8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad92:	e7e5      	b.n	800ad60 <__d2b+0x74>
 800ad94:	0800e0e0 	.word	0x0800e0e0
 800ad98:	0800e0f1 	.word	0x0800e0f1

0800ad9c <__ssputs_r>:
 800ad9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ada0:	688e      	ldr	r6, [r1, #8]
 800ada2:	461f      	mov	r7, r3
 800ada4:	42be      	cmp	r6, r7
 800ada6:	680b      	ldr	r3, [r1, #0]
 800ada8:	4682      	mov	sl, r0
 800adaa:	460c      	mov	r4, r1
 800adac:	4690      	mov	r8, r2
 800adae:	d82d      	bhi.n	800ae0c <__ssputs_r+0x70>
 800adb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800adb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800adb8:	d026      	beq.n	800ae08 <__ssputs_r+0x6c>
 800adba:	6965      	ldr	r5, [r4, #20]
 800adbc:	6909      	ldr	r1, [r1, #16]
 800adbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800adc2:	eba3 0901 	sub.w	r9, r3, r1
 800adc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800adca:	1c7b      	adds	r3, r7, #1
 800adcc:	444b      	add	r3, r9
 800adce:	106d      	asrs	r5, r5, #1
 800add0:	429d      	cmp	r5, r3
 800add2:	bf38      	it	cc
 800add4:	461d      	movcc	r5, r3
 800add6:	0553      	lsls	r3, r2, #21
 800add8:	d527      	bpl.n	800ae2a <__ssputs_r+0x8e>
 800adda:	4629      	mov	r1, r5
 800addc:	f7ff fbd8 	bl	800a590 <_malloc_r>
 800ade0:	4606      	mov	r6, r0
 800ade2:	b360      	cbz	r0, 800ae3e <__ssputs_r+0xa2>
 800ade4:	6921      	ldr	r1, [r4, #16]
 800ade6:	464a      	mov	r2, r9
 800ade8:	f7fe fcf7 	bl	80097da <memcpy>
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800adf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adf6:	81a3      	strh	r3, [r4, #12]
 800adf8:	6126      	str	r6, [r4, #16]
 800adfa:	6165      	str	r5, [r4, #20]
 800adfc:	444e      	add	r6, r9
 800adfe:	eba5 0509 	sub.w	r5, r5, r9
 800ae02:	6026      	str	r6, [r4, #0]
 800ae04:	60a5      	str	r5, [r4, #8]
 800ae06:	463e      	mov	r6, r7
 800ae08:	42be      	cmp	r6, r7
 800ae0a:	d900      	bls.n	800ae0e <__ssputs_r+0x72>
 800ae0c:	463e      	mov	r6, r7
 800ae0e:	6820      	ldr	r0, [r4, #0]
 800ae10:	4632      	mov	r2, r6
 800ae12:	4641      	mov	r1, r8
 800ae14:	f000 f9c6 	bl	800b1a4 <memmove>
 800ae18:	68a3      	ldr	r3, [r4, #8]
 800ae1a:	1b9b      	subs	r3, r3, r6
 800ae1c:	60a3      	str	r3, [r4, #8]
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	4433      	add	r3, r6
 800ae22:	6023      	str	r3, [r4, #0]
 800ae24:	2000      	movs	r0, #0
 800ae26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae2a:	462a      	mov	r2, r5
 800ae2c:	f000 fa28 	bl	800b280 <_realloc_r>
 800ae30:	4606      	mov	r6, r0
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d1e0      	bne.n	800adf8 <__ssputs_r+0x5c>
 800ae36:	6921      	ldr	r1, [r4, #16]
 800ae38:	4650      	mov	r0, sl
 800ae3a:	f7ff fb35 	bl	800a4a8 <_free_r>
 800ae3e:	230c      	movs	r3, #12
 800ae40:	f8ca 3000 	str.w	r3, [sl]
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae4a:	81a3      	strh	r3, [r4, #12]
 800ae4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae50:	e7e9      	b.n	800ae26 <__ssputs_r+0x8a>
	...

0800ae54 <_svfiprintf_r>:
 800ae54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae58:	4698      	mov	r8, r3
 800ae5a:	898b      	ldrh	r3, [r1, #12]
 800ae5c:	061b      	lsls	r3, r3, #24
 800ae5e:	b09d      	sub	sp, #116	@ 0x74
 800ae60:	4607      	mov	r7, r0
 800ae62:	460d      	mov	r5, r1
 800ae64:	4614      	mov	r4, r2
 800ae66:	d510      	bpl.n	800ae8a <_svfiprintf_r+0x36>
 800ae68:	690b      	ldr	r3, [r1, #16]
 800ae6a:	b973      	cbnz	r3, 800ae8a <_svfiprintf_r+0x36>
 800ae6c:	2140      	movs	r1, #64	@ 0x40
 800ae6e:	f7ff fb8f 	bl	800a590 <_malloc_r>
 800ae72:	6028      	str	r0, [r5, #0]
 800ae74:	6128      	str	r0, [r5, #16]
 800ae76:	b930      	cbnz	r0, 800ae86 <_svfiprintf_r+0x32>
 800ae78:	230c      	movs	r3, #12
 800ae7a:	603b      	str	r3, [r7, #0]
 800ae7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae80:	b01d      	add	sp, #116	@ 0x74
 800ae82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae86:	2340      	movs	r3, #64	@ 0x40
 800ae88:	616b      	str	r3, [r5, #20]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae8e:	2320      	movs	r3, #32
 800ae90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae94:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae98:	2330      	movs	r3, #48	@ 0x30
 800ae9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b038 <_svfiprintf_r+0x1e4>
 800ae9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aea2:	f04f 0901 	mov.w	r9, #1
 800aea6:	4623      	mov	r3, r4
 800aea8:	469a      	mov	sl, r3
 800aeaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeae:	b10a      	cbz	r2, 800aeb4 <_svfiprintf_r+0x60>
 800aeb0:	2a25      	cmp	r2, #37	@ 0x25
 800aeb2:	d1f9      	bne.n	800aea8 <_svfiprintf_r+0x54>
 800aeb4:	ebba 0b04 	subs.w	fp, sl, r4
 800aeb8:	d00b      	beq.n	800aed2 <_svfiprintf_r+0x7e>
 800aeba:	465b      	mov	r3, fp
 800aebc:	4622      	mov	r2, r4
 800aebe:	4629      	mov	r1, r5
 800aec0:	4638      	mov	r0, r7
 800aec2:	f7ff ff6b 	bl	800ad9c <__ssputs_r>
 800aec6:	3001      	adds	r0, #1
 800aec8:	f000 80a7 	beq.w	800b01a <_svfiprintf_r+0x1c6>
 800aecc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aece:	445a      	add	r2, fp
 800aed0:	9209      	str	r2, [sp, #36]	@ 0x24
 800aed2:	f89a 3000 	ldrb.w	r3, [sl]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f000 809f 	beq.w	800b01a <_svfiprintf_r+0x1c6>
 800aedc:	2300      	movs	r3, #0
 800aede:	f04f 32ff 	mov.w	r2, #4294967295
 800aee2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aee6:	f10a 0a01 	add.w	sl, sl, #1
 800aeea:	9304      	str	r3, [sp, #16]
 800aeec:	9307      	str	r3, [sp, #28]
 800aeee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aef2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aef4:	4654      	mov	r4, sl
 800aef6:	2205      	movs	r2, #5
 800aef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aefc:	484e      	ldr	r0, [pc, #312]	@ (800b038 <_svfiprintf_r+0x1e4>)
 800aefe:	f7f5 f967 	bl	80001d0 <memchr>
 800af02:	9a04      	ldr	r2, [sp, #16]
 800af04:	b9d8      	cbnz	r0, 800af3e <_svfiprintf_r+0xea>
 800af06:	06d0      	lsls	r0, r2, #27
 800af08:	bf44      	itt	mi
 800af0a:	2320      	movmi	r3, #32
 800af0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af10:	0711      	lsls	r1, r2, #28
 800af12:	bf44      	itt	mi
 800af14:	232b      	movmi	r3, #43	@ 0x2b
 800af16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af1a:	f89a 3000 	ldrb.w	r3, [sl]
 800af1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800af20:	d015      	beq.n	800af4e <_svfiprintf_r+0xfa>
 800af22:	9a07      	ldr	r2, [sp, #28]
 800af24:	4654      	mov	r4, sl
 800af26:	2000      	movs	r0, #0
 800af28:	f04f 0c0a 	mov.w	ip, #10
 800af2c:	4621      	mov	r1, r4
 800af2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af32:	3b30      	subs	r3, #48	@ 0x30
 800af34:	2b09      	cmp	r3, #9
 800af36:	d94b      	bls.n	800afd0 <_svfiprintf_r+0x17c>
 800af38:	b1b0      	cbz	r0, 800af68 <_svfiprintf_r+0x114>
 800af3a:	9207      	str	r2, [sp, #28]
 800af3c:	e014      	b.n	800af68 <_svfiprintf_r+0x114>
 800af3e:	eba0 0308 	sub.w	r3, r0, r8
 800af42:	fa09 f303 	lsl.w	r3, r9, r3
 800af46:	4313      	orrs	r3, r2
 800af48:	9304      	str	r3, [sp, #16]
 800af4a:	46a2      	mov	sl, r4
 800af4c:	e7d2      	b.n	800aef4 <_svfiprintf_r+0xa0>
 800af4e:	9b03      	ldr	r3, [sp, #12]
 800af50:	1d19      	adds	r1, r3, #4
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	9103      	str	r1, [sp, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	bfbb      	ittet	lt
 800af5a:	425b      	neglt	r3, r3
 800af5c:	f042 0202 	orrlt.w	r2, r2, #2
 800af60:	9307      	strge	r3, [sp, #28]
 800af62:	9307      	strlt	r3, [sp, #28]
 800af64:	bfb8      	it	lt
 800af66:	9204      	strlt	r2, [sp, #16]
 800af68:	7823      	ldrb	r3, [r4, #0]
 800af6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800af6c:	d10a      	bne.n	800af84 <_svfiprintf_r+0x130>
 800af6e:	7863      	ldrb	r3, [r4, #1]
 800af70:	2b2a      	cmp	r3, #42	@ 0x2a
 800af72:	d132      	bne.n	800afda <_svfiprintf_r+0x186>
 800af74:	9b03      	ldr	r3, [sp, #12]
 800af76:	1d1a      	adds	r2, r3, #4
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	9203      	str	r2, [sp, #12]
 800af7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af80:	3402      	adds	r4, #2
 800af82:	9305      	str	r3, [sp, #20]
 800af84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b048 <_svfiprintf_r+0x1f4>
 800af88:	7821      	ldrb	r1, [r4, #0]
 800af8a:	2203      	movs	r2, #3
 800af8c:	4650      	mov	r0, sl
 800af8e:	f7f5 f91f 	bl	80001d0 <memchr>
 800af92:	b138      	cbz	r0, 800afa4 <_svfiprintf_r+0x150>
 800af94:	9b04      	ldr	r3, [sp, #16]
 800af96:	eba0 000a 	sub.w	r0, r0, sl
 800af9a:	2240      	movs	r2, #64	@ 0x40
 800af9c:	4082      	lsls	r2, r0
 800af9e:	4313      	orrs	r3, r2
 800afa0:	3401      	adds	r4, #1
 800afa2:	9304      	str	r3, [sp, #16]
 800afa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa8:	4824      	ldr	r0, [pc, #144]	@ (800b03c <_svfiprintf_r+0x1e8>)
 800afaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afae:	2206      	movs	r2, #6
 800afb0:	f7f5 f90e 	bl	80001d0 <memchr>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	d036      	beq.n	800b026 <_svfiprintf_r+0x1d2>
 800afb8:	4b21      	ldr	r3, [pc, #132]	@ (800b040 <_svfiprintf_r+0x1ec>)
 800afba:	bb1b      	cbnz	r3, 800b004 <_svfiprintf_r+0x1b0>
 800afbc:	9b03      	ldr	r3, [sp, #12]
 800afbe:	3307      	adds	r3, #7
 800afc0:	f023 0307 	bic.w	r3, r3, #7
 800afc4:	3308      	adds	r3, #8
 800afc6:	9303      	str	r3, [sp, #12]
 800afc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afca:	4433      	add	r3, r6
 800afcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800afce:	e76a      	b.n	800aea6 <_svfiprintf_r+0x52>
 800afd0:	fb0c 3202 	mla	r2, ip, r2, r3
 800afd4:	460c      	mov	r4, r1
 800afd6:	2001      	movs	r0, #1
 800afd8:	e7a8      	b.n	800af2c <_svfiprintf_r+0xd8>
 800afda:	2300      	movs	r3, #0
 800afdc:	3401      	adds	r4, #1
 800afde:	9305      	str	r3, [sp, #20]
 800afe0:	4619      	mov	r1, r3
 800afe2:	f04f 0c0a 	mov.w	ip, #10
 800afe6:	4620      	mov	r0, r4
 800afe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afec:	3a30      	subs	r2, #48	@ 0x30
 800afee:	2a09      	cmp	r2, #9
 800aff0:	d903      	bls.n	800affa <_svfiprintf_r+0x1a6>
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d0c6      	beq.n	800af84 <_svfiprintf_r+0x130>
 800aff6:	9105      	str	r1, [sp, #20]
 800aff8:	e7c4      	b.n	800af84 <_svfiprintf_r+0x130>
 800affa:	fb0c 2101 	mla	r1, ip, r1, r2
 800affe:	4604      	mov	r4, r0
 800b000:	2301      	movs	r3, #1
 800b002:	e7f0      	b.n	800afe6 <_svfiprintf_r+0x192>
 800b004:	ab03      	add	r3, sp, #12
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	462a      	mov	r2, r5
 800b00a:	4b0e      	ldr	r3, [pc, #56]	@ (800b044 <_svfiprintf_r+0x1f0>)
 800b00c:	a904      	add	r1, sp, #16
 800b00e:	4638      	mov	r0, r7
 800b010:	f7fd fe60 	bl	8008cd4 <_printf_float>
 800b014:	1c42      	adds	r2, r0, #1
 800b016:	4606      	mov	r6, r0
 800b018:	d1d6      	bne.n	800afc8 <_svfiprintf_r+0x174>
 800b01a:	89ab      	ldrh	r3, [r5, #12]
 800b01c:	065b      	lsls	r3, r3, #25
 800b01e:	f53f af2d 	bmi.w	800ae7c <_svfiprintf_r+0x28>
 800b022:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b024:	e72c      	b.n	800ae80 <_svfiprintf_r+0x2c>
 800b026:	ab03      	add	r3, sp, #12
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	462a      	mov	r2, r5
 800b02c:	4b05      	ldr	r3, [pc, #20]	@ (800b044 <_svfiprintf_r+0x1f0>)
 800b02e:	a904      	add	r1, sp, #16
 800b030:	4638      	mov	r0, r7
 800b032:	f7fe f8e7 	bl	8009204 <_printf_i>
 800b036:	e7ed      	b.n	800b014 <_svfiprintf_r+0x1c0>
 800b038:	0800e14a 	.word	0x0800e14a
 800b03c:	0800e154 	.word	0x0800e154
 800b040:	08008cd5 	.word	0x08008cd5
 800b044:	0800ad9d 	.word	0x0800ad9d
 800b048:	0800e150 	.word	0x0800e150

0800b04c <__sflush_r>:
 800b04c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b054:	0716      	lsls	r6, r2, #28
 800b056:	4605      	mov	r5, r0
 800b058:	460c      	mov	r4, r1
 800b05a:	d454      	bmi.n	800b106 <__sflush_r+0xba>
 800b05c:	684b      	ldr	r3, [r1, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	dc02      	bgt.n	800b068 <__sflush_r+0x1c>
 800b062:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b064:	2b00      	cmp	r3, #0
 800b066:	dd48      	ble.n	800b0fa <__sflush_r+0xae>
 800b068:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b06a:	2e00      	cmp	r6, #0
 800b06c:	d045      	beq.n	800b0fa <__sflush_r+0xae>
 800b06e:	2300      	movs	r3, #0
 800b070:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b074:	682f      	ldr	r7, [r5, #0]
 800b076:	6a21      	ldr	r1, [r4, #32]
 800b078:	602b      	str	r3, [r5, #0]
 800b07a:	d030      	beq.n	800b0de <__sflush_r+0x92>
 800b07c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b07e:	89a3      	ldrh	r3, [r4, #12]
 800b080:	0759      	lsls	r1, r3, #29
 800b082:	d505      	bpl.n	800b090 <__sflush_r+0x44>
 800b084:	6863      	ldr	r3, [r4, #4]
 800b086:	1ad2      	subs	r2, r2, r3
 800b088:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b08a:	b10b      	cbz	r3, 800b090 <__sflush_r+0x44>
 800b08c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b08e:	1ad2      	subs	r2, r2, r3
 800b090:	2300      	movs	r3, #0
 800b092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b094:	6a21      	ldr	r1, [r4, #32]
 800b096:	4628      	mov	r0, r5
 800b098:	47b0      	blx	r6
 800b09a:	1c43      	adds	r3, r0, #1
 800b09c:	89a3      	ldrh	r3, [r4, #12]
 800b09e:	d106      	bne.n	800b0ae <__sflush_r+0x62>
 800b0a0:	6829      	ldr	r1, [r5, #0]
 800b0a2:	291d      	cmp	r1, #29
 800b0a4:	d82b      	bhi.n	800b0fe <__sflush_r+0xb2>
 800b0a6:	4a2a      	ldr	r2, [pc, #168]	@ (800b150 <__sflush_r+0x104>)
 800b0a8:	40ca      	lsrs	r2, r1
 800b0aa:	07d6      	lsls	r6, r2, #31
 800b0ac:	d527      	bpl.n	800b0fe <__sflush_r+0xb2>
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	6062      	str	r2, [r4, #4]
 800b0b2:	04d9      	lsls	r1, r3, #19
 800b0b4:	6922      	ldr	r2, [r4, #16]
 800b0b6:	6022      	str	r2, [r4, #0]
 800b0b8:	d504      	bpl.n	800b0c4 <__sflush_r+0x78>
 800b0ba:	1c42      	adds	r2, r0, #1
 800b0bc:	d101      	bne.n	800b0c2 <__sflush_r+0x76>
 800b0be:	682b      	ldr	r3, [r5, #0]
 800b0c0:	b903      	cbnz	r3, 800b0c4 <__sflush_r+0x78>
 800b0c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0c6:	602f      	str	r7, [r5, #0]
 800b0c8:	b1b9      	cbz	r1, 800b0fa <__sflush_r+0xae>
 800b0ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0ce:	4299      	cmp	r1, r3
 800b0d0:	d002      	beq.n	800b0d8 <__sflush_r+0x8c>
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	f7ff f9e8 	bl	800a4a8 <_free_r>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0dc:	e00d      	b.n	800b0fa <__sflush_r+0xae>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	47b0      	blx	r6
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	1c50      	adds	r0, r2, #1
 800b0e8:	d1c9      	bne.n	800b07e <__sflush_r+0x32>
 800b0ea:	682b      	ldr	r3, [r5, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d0c6      	beq.n	800b07e <__sflush_r+0x32>
 800b0f0:	2b1d      	cmp	r3, #29
 800b0f2:	d001      	beq.n	800b0f8 <__sflush_r+0xac>
 800b0f4:	2b16      	cmp	r3, #22
 800b0f6:	d11e      	bne.n	800b136 <__sflush_r+0xea>
 800b0f8:	602f      	str	r7, [r5, #0]
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	e022      	b.n	800b144 <__sflush_r+0xf8>
 800b0fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b102:	b21b      	sxth	r3, r3
 800b104:	e01b      	b.n	800b13e <__sflush_r+0xf2>
 800b106:	690f      	ldr	r7, [r1, #16]
 800b108:	2f00      	cmp	r7, #0
 800b10a:	d0f6      	beq.n	800b0fa <__sflush_r+0xae>
 800b10c:	0793      	lsls	r3, r2, #30
 800b10e:	680e      	ldr	r6, [r1, #0]
 800b110:	bf08      	it	eq
 800b112:	694b      	ldreq	r3, [r1, #20]
 800b114:	600f      	str	r7, [r1, #0]
 800b116:	bf18      	it	ne
 800b118:	2300      	movne	r3, #0
 800b11a:	eba6 0807 	sub.w	r8, r6, r7
 800b11e:	608b      	str	r3, [r1, #8]
 800b120:	f1b8 0f00 	cmp.w	r8, #0
 800b124:	dde9      	ble.n	800b0fa <__sflush_r+0xae>
 800b126:	6a21      	ldr	r1, [r4, #32]
 800b128:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b12a:	4643      	mov	r3, r8
 800b12c:	463a      	mov	r2, r7
 800b12e:	4628      	mov	r0, r5
 800b130:	47b0      	blx	r6
 800b132:	2800      	cmp	r0, #0
 800b134:	dc08      	bgt.n	800b148 <__sflush_r+0xfc>
 800b136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b13a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b13e:	81a3      	strh	r3, [r4, #12]
 800b140:	f04f 30ff 	mov.w	r0, #4294967295
 800b144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b148:	4407      	add	r7, r0
 800b14a:	eba8 0800 	sub.w	r8, r8, r0
 800b14e:	e7e7      	b.n	800b120 <__sflush_r+0xd4>
 800b150:	20400001 	.word	0x20400001

0800b154 <_fflush_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	690b      	ldr	r3, [r1, #16]
 800b158:	4605      	mov	r5, r0
 800b15a:	460c      	mov	r4, r1
 800b15c:	b913      	cbnz	r3, 800b164 <_fflush_r+0x10>
 800b15e:	2500      	movs	r5, #0
 800b160:	4628      	mov	r0, r5
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	b118      	cbz	r0, 800b16e <_fflush_r+0x1a>
 800b166:	6a03      	ldr	r3, [r0, #32]
 800b168:	b90b      	cbnz	r3, 800b16e <_fflush_r+0x1a>
 800b16a:	f7fe f9f5 	bl	8009558 <__sinit>
 800b16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d0f3      	beq.n	800b15e <_fflush_r+0xa>
 800b176:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b178:	07d0      	lsls	r0, r2, #31
 800b17a:	d404      	bmi.n	800b186 <_fflush_r+0x32>
 800b17c:	0599      	lsls	r1, r3, #22
 800b17e:	d402      	bmi.n	800b186 <_fflush_r+0x32>
 800b180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b182:	f7fe fb28 	bl	80097d6 <__retarget_lock_acquire_recursive>
 800b186:	4628      	mov	r0, r5
 800b188:	4621      	mov	r1, r4
 800b18a:	f7ff ff5f 	bl	800b04c <__sflush_r>
 800b18e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b190:	07da      	lsls	r2, r3, #31
 800b192:	4605      	mov	r5, r0
 800b194:	d4e4      	bmi.n	800b160 <_fflush_r+0xc>
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	059b      	lsls	r3, r3, #22
 800b19a:	d4e1      	bmi.n	800b160 <_fflush_r+0xc>
 800b19c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b19e:	f7fe fb1b 	bl	80097d8 <__retarget_lock_release_recursive>
 800b1a2:	e7dd      	b.n	800b160 <_fflush_r+0xc>

0800b1a4 <memmove>:
 800b1a4:	4288      	cmp	r0, r1
 800b1a6:	b510      	push	{r4, lr}
 800b1a8:	eb01 0402 	add.w	r4, r1, r2
 800b1ac:	d902      	bls.n	800b1b4 <memmove+0x10>
 800b1ae:	4284      	cmp	r4, r0
 800b1b0:	4623      	mov	r3, r4
 800b1b2:	d807      	bhi.n	800b1c4 <memmove+0x20>
 800b1b4:	1e43      	subs	r3, r0, #1
 800b1b6:	42a1      	cmp	r1, r4
 800b1b8:	d008      	beq.n	800b1cc <memmove+0x28>
 800b1ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1c2:	e7f8      	b.n	800b1b6 <memmove+0x12>
 800b1c4:	4402      	add	r2, r0
 800b1c6:	4601      	mov	r1, r0
 800b1c8:	428a      	cmp	r2, r1
 800b1ca:	d100      	bne.n	800b1ce <memmove+0x2a>
 800b1cc:	bd10      	pop	{r4, pc}
 800b1ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1d6:	e7f7      	b.n	800b1c8 <memmove+0x24>

0800b1d8 <_sbrk_r>:
 800b1d8:	b538      	push	{r3, r4, r5, lr}
 800b1da:	4d06      	ldr	r5, [pc, #24]	@ (800b1f4 <_sbrk_r+0x1c>)
 800b1dc:	2300      	movs	r3, #0
 800b1de:	4604      	mov	r4, r0
 800b1e0:	4608      	mov	r0, r1
 800b1e2:	602b      	str	r3, [r5, #0]
 800b1e4:	f7f9 fa80 	bl	80046e8 <_sbrk>
 800b1e8:	1c43      	adds	r3, r0, #1
 800b1ea:	d102      	bne.n	800b1f2 <_sbrk_r+0x1a>
 800b1ec:	682b      	ldr	r3, [r5, #0]
 800b1ee:	b103      	cbz	r3, 800b1f2 <_sbrk_r+0x1a>
 800b1f0:	6023      	str	r3, [r4, #0]
 800b1f2:	bd38      	pop	{r3, r4, r5, pc}
 800b1f4:	2000092c 	.word	0x2000092c

0800b1f8 <__assert_func>:
 800b1f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1fa:	4614      	mov	r4, r2
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	4b09      	ldr	r3, [pc, #36]	@ (800b224 <__assert_func+0x2c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4605      	mov	r5, r0
 800b204:	68d8      	ldr	r0, [r3, #12]
 800b206:	b14c      	cbz	r4, 800b21c <__assert_func+0x24>
 800b208:	4b07      	ldr	r3, [pc, #28]	@ (800b228 <__assert_func+0x30>)
 800b20a:	9100      	str	r1, [sp, #0]
 800b20c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b210:	4906      	ldr	r1, [pc, #24]	@ (800b22c <__assert_func+0x34>)
 800b212:	462b      	mov	r3, r5
 800b214:	f000 f870 	bl	800b2f8 <fiprintf>
 800b218:	f000 f880 	bl	800b31c <abort>
 800b21c:	4b04      	ldr	r3, [pc, #16]	@ (800b230 <__assert_func+0x38>)
 800b21e:	461c      	mov	r4, r3
 800b220:	e7f3      	b.n	800b20a <__assert_func+0x12>
 800b222:	bf00      	nop
 800b224:	200000b4 	.word	0x200000b4
 800b228:	0800e165 	.word	0x0800e165
 800b22c:	0800e172 	.word	0x0800e172
 800b230:	0800e1a0 	.word	0x0800e1a0

0800b234 <_calloc_r>:
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	fba1 5402 	umull	r5, r4, r1, r2
 800b23a:	b934      	cbnz	r4, 800b24a <_calloc_r+0x16>
 800b23c:	4629      	mov	r1, r5
 800b23e:	f7ff f9a7 	bl	800a590 <_malloc_r>
 800b242:	4606      	mov	r6, r0
 800b244:	b928      	cbnz	r0, 800b252 <_calloc_r+0x1e>
 800b246:	4630      	mov	r0, r6
 800b248:	bd70      	pop	{r4, r5, r6, pc}
 800b24a:	220c      	movs	r2, #12
 800b24c:	6002      	str	r2, [r0, #0]
 800b24e:	2600      	movs	r6, #0
 800b250:	e7f9      	b.n	800b246 <_calloc_r+0x12>
 800b252:	462a      	mov	r2, r5
 800b254:	4621      	mov	r1, r4
 800b256:	f7fe fa2e 	bl	80096b6 <memset>
 800b25a:	e7f4      	b.n	800b246 <_calloc_r+0x12>

0800b25c <__ascii_mbtowc>:
 800b25c:	b082      	sub	sp, #8
 800b25e:	b901      	cbnz	r1, 800b262 <__ascii_mbtowc+0x6>
 800b260:	a901      	add	r1, sp, #4
 800b262:	b142      	cbz	r2, 800b276 <__ascii_mbtowc+0x1a>
 800b264:	b14b      	cbz	r3, 800b27a <__ascii_mbtowc+0x1e>
 800b266:	7813      	ldrb	r3, [r2, #0]
 800b268:	600b      	str	r3, [r1, #0]
 800b26a:	7812      	ldrb	r2, [r2, #0]
 800b26c:	1e10      	subs	r0, r2, #0
 800b26e:	bf18      	it	ne
 800b270:	2001      	movne	r0, #1
 800b272:	b002      	add	sp, #8
 800b274:	4770      	bx	lr
 800b276:	4610      	mov	r0, r2
 800b278:	e7fb      	b.n	800b272 <__ascii_mbtowc+0x16>
 800b27a:	f06f 0001 	mvn.w	r0, #1
 800b27e:	e7f8      	b.n	800b272 <__ascii_mbtowc+0x16>

0800b280 <_realloc_r>:
 800b280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b284:	4607      	mov	r7, r0
 800b286:	4614      	mov	r4, r2
 800b288:	460d      	mov	r5, r1
 800b28a:	b921      	cbnz	r1, 800b296 <_realloc_r+0x16>
 800b28c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b290:	4611      	mov	r1, r2
 800b292:	f7ff b97d 	b.w	800a590 <_malloc_r>
 800b296:	b92a      	cbnz	r2, 800b2a4 <_realloc_r+0x24>
 800b298:	f7ff f906 	bl	800a4a8 <_free_r>
 800b29c:	4625      	mov	r5, r4
 800b29e:	4628      	mov	r0, r5
 800b2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2a4:	f000 f841 	bl	800b32a <_malloc_usable_size_r>
 800b2a8:	4284      	cmp	r4, r0
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	d802      	bhi.n	800b2b4 <_realloc_r+0x34>
 800b2ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2b2:	d8f4      	bhi.n	800b29e <_realloc_r+0x1e>
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	4638      	mov	r0, r7
 800b2b8:	f7ff f96a 	bl	800a590 <_malloc_r>
 800b2bc:	4680      	mov	r8, r0
 800b2be:	b908      	cbnz	r0, 800b2c4 <_realloc_r+0x44>
 800b2c0:	4645      	mov	r5, r8
 800b2c2:	e7ec      	b.n	800b29e <_realloc_r+0x1e>
 800b2c4:	42b4      	cmp	r4, r6
 800b2c6:	4622      	mov	r2, r4
 800b2c8:	4629      	mov	r1, r5
 800b2ca:	bf28      	it	cs
 800b2cc:	4632      	movcs	r2, r6
 800b2ce:	f7fe fa84 	bl	80097da <memcpy>
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	f7ff f8e7 	bl	800a4a8 <_free_r>
 800b2da:	e7f1      	b.n	800b2c0 <_realloc_r+0x40>

0800b2dc <__ascii_wctomb>:
 800b2dc:	4603      	mov	r3, r0
 800b2de:	4608      	mov	r0, r1
 800b2e0:	b141      	cbz	r1, 800b2f4 <__ascii_wctomb+0x18>
 800b2e2:	2aff      	cmp	r2, #255	@ 0xff
 800b2e4:	d904      	bls.n	800b2f0 <__ascii_wctomb+0x14>
 800b2e6:	228a      	movs	r2, #138	@ 0x8a
 800b2e8:	601a      	str	r2, [r3, #0]
 800b2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ee:	4770      	bx	lr
 800b2f0:	700a      	strb	r2, [r1, #0]
 800b2f2:	2001      	movs	r0, #1
 800b2f4:	4770      	bx	lr
	...

0800b2f8 <fiprintf>:
 800b2f8:	b40e      	push	{r1, r2, r3}
 800b2fa:	b503      	push	{r0, r1, lr}
 800b2fc:	4601      	mov	r1, r0
 800b2fe:	ab03      	add	r3, sp, #12
 800b300:	4805      	ldr	r0, [pc, #20]	@ (800b318 <fiprintf+0x20>)
 800b302:	f853 2b04 	ldr.w	r2, [r3], #4
 800b306:	6800      	ldr	r0, [r0, #0]
 800b308:	9301      	str	r3, [sp, #4]
 800b30a:	f000 f83f 	bl	800b38c <_vfiprintf_r>
 800b30e:	b002      	add	sp, #8
 800b310:	f85d eb04 	ldr.w	lr, [sp], #4
 800b314:	b003      	add	sp, #12
 800b316:	4770      	bx	lr
 800b318:	200000b4 	.word	0x200000b4

0800b31c <abort>:
 800b31c:	b508      	push	{r3, lr}
 800b31e:	2006      	movs	r0, #6
 800b320:	f000 fa08 	bl	800b734 <raise>
 800b324:	2001      	movs	r0, #1
 800b326:	f7f9 f967 	bl	80045f8 <_exit>

0800b32a <_malloc_usable_size_r>:
 800b32a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b32e:	1f18      	subs	r0, r3, #4
 800b330:	2b00      	cmp	r3, #0
 800b332:	bfbc      	itt	lt
 800b334:	580b      	ldrlt	r3, [r1, r0]
 800b336:	18c0      	addlt	r0, r0, r3
 800b338:	4770      	bx	lr

0800b33a <__sfputc_r>:
 800b33a:	6893      	ldr	r3, [r2, #8]
 800b33c:	3b01      	subs	r3, #1
 800b33e:	2b00      	cmp	r3, #0
 800b340:	b410      	push	{r4}
 800b342:	6093      	str	r3, [r2, #8]
 800b344:	da08      	bge.n	800b358 <__sfputc_r+0x1e>
 800b346:	6994      	ldr	r4, [r2, #24]
 800b348:	42a3      	cmp	r3, r4
 800b34a:	db01      	blt.n	800b350 <__sfputc_r+0x16>
 800b34c:	290a      	cmp	r1, #10
 800b34e:	d103      	bne.n	800b358 <__sfputc_r+0x1e>
 800b350:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b354:	f000 b932 	b.w	800b5bc <__swbuf_r>
 800b358:	6813      	ldr	r3, [r2, #0]
 800b35a:	1c58      	adds	r0, r3, #1
 800b35c:	6010      	str	r0, [r2, #0]
 800b35e:	7019      	strb	r1, [r3, #0]
 800b360:	4608      	mov	r0, r1
 800b362:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <__sfputs_r>:
 800b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36a:	4606      	mov	r6, r0
 800b36c:	460f      	mov	r7, r1
 800b36e:	4614      	mov	r4, r2
 800b370:	18d5      	adds	r5, r2, r3
 800b372:	42ac      	cmp	r4, r5
 800b374:	d101      	bne.n	800b37a <__sfputs_r+0x12>
 800b376:	2000      	movs	r0, #0
 800b378:	e007      	b.n	800b38a <__sfputs_r+0x22>
 800b37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b37e:	463a      	mov	r2, r7
 800b380:	4630      	mov	r0, r6
 800b382:	f7ff ffda 	bl	800b33a <__sfputc_r>
 800b386:	1c43      	adds	r3, r0, #1
 800b388:	d1f3      	bne.n	800b372 <__sfputs_r+0xa>
 800b38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b38c <_vfiprintf_r>:
 800b38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b390:	460d      	mov	r5, r1
 800b392:	b09d      	sub	sp, #116	@ 0x74
 800b394:	4614      	mov	r4, r2
 800b396:	4698      	mov	r8, r3
 800b398:	4606      	mov	r6, r0
 800b39a:	b118      	cbz	r0, 800b3a4 <_vfiprintf_r+0x18>
 800b39c:	6a03      	ldr	r3, [r0, #32]
 800b39e:	b90b      	cbnz	r3, 800b3a4 <_vfiprintf_r+0x18>
 800b3a0:	f7fe f8da 	bl	8009558 <__sinit>
 800b3a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3a6:	07d9      	lsls	r1, r3, #31
 800b3a8:	d405      	bmi.n	800b3b6 <_vfiprintf_r+0x2a>
 800b3aa:	89ab      	ldrh	r3, [r5, #12]
 800b3ac:	059a      	lsls	r2, r3, #22
 800b3ae:	d402      	bmi.n	800b3b6 <_vfiprintf_r+0x2a>
 800b3b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3b2:	f7fe fa10 	bl	80097d6 <__retarget_lock_acquire_recursive>
 800b3b6:	89ab      	ldrh	r3, [r5, #12]
 800b3b8:	071b      	lsls	r3, r3, #28
 800b3ba:	d501      	bpl.n	800b3c0 <_vfiprintf_r+0x34>
 800b3bc:	692b      	ldr	r3, [r5, #16]
 800b3be:	b99b      	cbnz	r3, 800b3e8 <_vfiprintf_r+0x5c>
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f000 f938 	bl	800b638 <__swsetup_r>
 800b3c8:	b170      	cbz	r0, 800b3e8 <_vfiprintf_r+0x5c>
 800b3ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3cc:	07dc      	lsls	r4, r3, #31
 800b3ce:	d504      	bpl.n	800b3da <_vfiprintf_r+0x4e>
 800b3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d4:	b01d      	add	sp, #116	@ 0x74
 800b3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3da:	89ab      	ldrh	r3, [r5, #12]
 800b3dc:	0598      	lsls	r0, r3, #22
 800b3de:	d4f7      	bmi.n	800b3d0 <_vfiprintf_r+0x44>
 800b3e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3e2:	f7fe f9f9 	bl	80097d8 <__retarget_lock_release_recursive>
 800b3e6:	e7f3      	b.n	800b3d0 <_vfiprintf_r+0x44>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3ec:	2320      	movs	r3, #32
 800b3ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3f6:	2330      	movs	r3, #48	@ 0x30
 800b3f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b5a8 <_vfiprintf_r+0x21c>
 800b3fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b400:	f04f 0901 	mov.w	r9, #1
 800b404:	4623      	mov	r3, r4
 800b406:	469a      	mov	sl, r3
 800b408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b40c:	b10a      	cbz	r2, 800b412 <_vfiprintf_r+0x86>
 800b40e:	2a25      	cmp	r2, #37	@ 0x25
 800b410:	d1f9      	bne.n	800b406 <_vfiprintf_r+0x7a>
 800b412:	ebba 0b04 	subs.w	fp, sl, r4
 800b416:	d00b      	beq.n	800b430 <_vfiprintf_r+0xa4>
 800b418:	465b      	mov	r3, fp
 800b41a:	4622      	mov	r2, r4
 800b41c:	4629      	mov	r1, r5
 800b41e:	4630      	mov	r0, r6
 800b420:	f7ff ffa2 	bl	800b368 <__sfputs_r>
 800b424:	3001      	adds	r0, #1
 800b426:	f000 80a7 	beq.w	800b578 <_vfiprintf_r+0x1ec>
 800b42a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b42c:	445a      	add	r2, fp
 800b42e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b430:	f89a 3000 	ldrb.w	r3, [sl]
 800b434:	2b00      	cmp	r3, #0
 800b436:	f000 809f 	beq.w	800b578 <_vfiprintf_r+0x1ec>
 800b43a:	2300      	movs	r3, #0
 800b43c:	f04f 32ff 	mov.w	r2, #4294967295
 800b440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b444:	f10a 0a01 	add.w	sl, sl, #1
 800b448:	9304      	str	r3, [sp, #16]
 800b44a:	9307      	str	r3, [sp, #28]
 800b44c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b450:	931a      	str	r3, [sp, #104]	@ 0x68
 800b452:	4654      	mov	r4, sl
 800b454:	2205      	movs	r2, #5
 800b456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b45a:	4853      	ldr	r0, [pc, #332]	@ (800b5a8 <_vfiprintf_r+0x21c>)
 800b45c:	f7f4 feb8 	bl	80001d0 <memchr>
 800b460:	9a04      	ldr	r2, [sp, #16]
 800b462:	b9d8      	cbnz	r0, 800b49c <_vfiprintf_r+0x110>
 800b464:	06d1      	lsls	r1, r2, #27
 800b466:	bf44      	itt	mi
 800b468:	2320      	movmi	r3, #32
 800b46a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b46e:	0713      	lsls	r3, r2, #28
 800b470:	bf44      	itt	mi
 800b472:	232b      	movmi	r3, #43	@ 0x2b
 800b474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b478:	f89a 3000 	ldrb.w	r3, [sl]
 800b47c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b47e:	d015      	beq.n	800b4ac <_vfiprintf_r+0x120>
 800b480:	9a07      	ldr	r2, [sp, #28]
 800b482:	4654      	mov	r4, sl
 800b484:	2000      	movs	r0, #0
 800b486:	f04f 0c0a 	mov.w	ip, #10
 800b48a:	4621      	mov	r1, r4
 800b48c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b490:	3b30      	subs	r3, #48	@ 0x30
 800b492:	2b09      	cmp	r3, #9
 800b494:	d94b      	bls.n	800b52e <_vfiprintf_r+0x1a2>
 800b496:	b1b0      	cbz	r0, 800b4c6 <_vfiprintf_r+0x13a>
 800b498:	9207      	str	r2, [sp, #28]
 800b49a:	e014      	b.n	800b4c6 <_vfiprintf_r+0x13a>
 800b49c:	eba0 0308 	sub.w	r3, r0, r8
 800b4a0:	fa09 f303 	lsl.w	r3, r9, r3
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	9304      	str	r3, [sp, #16]
 800b4a8:	46a2      	mov	sl, r4
 800b4aa:	e7d2      	b.n	800b452 <_vfiprintf_r+0xc6>
 800b4ac:	9b03      	ldr	r3, [sp, #12]
 800b4ae:	1d19      	adds	r1, r3, #4
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	9103      	str	r1, [sp, #12]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	bfbb      	ittet	lt
 800b4b8:	425b      	neglt	r3, r3
 800b4ba:	f042 0202 	orrlt.w	r2, r2, #2
 800b4be:	9307      	strge	r3, [sp, #28]
 800b4c0:	9307      	strlt	r3, [sp, #28]
 800b4c2:	bfb8      	it	lt
 800b4c4:	9204      	strlt	r2, [sp, #16]
 800b4c6:	7823      	ldrb	r3, [r4, #0]
 800b4c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4ca:	d10a      	bne.n	800b4e2 <_vfiprintf_r+0x156>
 800b4cc:	7863      	ldrb	r3, [r4, #1]
 800b4ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4d0:	d132      	bne.n	800b538 <_vfiprintf_r+0x1ac>
 800b4d2:	9b03      	ldr	r3, [sp, #12]
 800b4d4:	1d1a      	adds	r2, r3, #4
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	9203      	str	r2, [sp, #12]
 800b4da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4de:	3402      	adds	r4, #2
 800b4e0:	9305      	str	r3, [sp, #20]
 800b4e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b5b8 <_vfiprintf_r+0x22c>
 800b4e6:	7821      	ldrb	r1, [r4, #0]
 800b4e8:	2203      	movs	r2, #3
 800b4ea:	4650      	mov	r0, sl
 800b4ec:	f7f4 fe70 	bl	80001d0 <memchr>
 800b4f0:	b138      	cbz	r0, 800b502 <_vfiprintf_r+0x176>
 800b4f2:	9b04      	ldr	r3, [sp, #16]
 800b4f4:	eba0 000a 	sub.w	r0, r0, sl
 800b4f8:	2240      	movs	r2, #64	@ 0x40
 800b4fa:	4082      	lsls	r2, r0
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	3401      	adds	r4, #1
 800b500:	9304      	str	r3, [sp, #16]
 800b502:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b506:	4829      	ldr	r0, [pc, #164]	@ (800b5ac <_vfiprintf_r+0x220>)
 800b508:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b50c:	2206      	movs	r2, #6
 800b50e:	f7f4 fe5f 	bl	80001d0 <memchr>
 800b512:	2800      	cmp	r0, #0
 800b514:	d03f      	beq.n	800b596 <_vfiprintf_r+0x20a>
 800b516:	4b26      	ldr	r3, [pc, #152]	@ (800b5b0 <_vfiprintf_r+0x224>)
 800b518:	bb1b      	cbnz	r3, 800b562 <_vfiprintf_r+0x1d6>
 800b51a:	9b03      	ldr	r3, [sp, #12]
 800b51c:	3307      	adds	r3, #7
 800b51e:	f023 0307 	bic.w	r3, r3, #7
 800b522:	3308      	adds	r3, #8
 800b524:	9303      	str	r3, [sp, #12]
 800b526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b528:	443b      	add	r3, r7
 800b52a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b52c:	e76a      	b.n	800b404 <_vfiprintf_r+0x78>
 800b52e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b532:	460c      	mov	r4, r1
 800b534:	2001      	movs	r0, #1
 800b536:	e7a8      	b.n	800b48a <_vfiprintf_r+0xfe>
 800b538:	2300      	movs	r3, #0
 800b53a:	3401      	adds	r4, #1
 800b53c:	9305      	str	r3, [sp, #20]
 800b53e:	4619      	mov	r1, r3
 800b540:	f04f 0c0a 	mov.w	ip, #10
 800b544:	4620      	mov	r0, r4
 800b546:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b54a:	3a30      	subs	r2, #48	@ 0x30
 800b54c:	2a09      	cmp	r2, #9
 800b54e:	d903      	bls.n	800b558 <_vfiprintf_r+0x1cc>
 800b550:	2b00      	cmp	r3, #0
 800b552:	d0c6      	beq.n	800b4e2 <_vfiprintf_r+0x156>
 800b554:	9105      	str	r1, [sp, #20]
 800b556:	e7c4      	b.n	800b4e2 <_vfiprintf_r+0x156>
 800b558:	fb0c 2101 	mla	r1, ip, r1, r2
 800b55c:	4604      	mov	r4, r0
 800b55e:	2301      	movs	r3, #1
 800b560:	e7f0      	b.n	800b544 <_vfiprintf_r+0x1b8>
 800b562:	ab03      	add	r3, sp, #12
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	462a      	mov	r2, r5
 800b568:	4b12      	ldr	r3, [pc, #72]	@ (800b5b4 <_vfiprintf_r+0x228>)
 800b56a:	a904      	add	r1, sp, #16
 800b56c:	4630      	mov	r0, r6
 800b56e:	f7fd fbb1 	bl	8008cd4 <_printf_float>
 800b572:	4607      	mov	r7, r0
 800b574:	1c78      	adds	r0, r7, #1
 800b576:	d1d6      	bne.n	800b526 <_vfiprintf_r+0x19a>
 800b578:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b57a:	07d9      	lsls	r1, r3, #31
 800b57c:	d405      	bmi.n	800b58a <_vfiprintf_r+0x1fe>
 800b57e:	89ab      	ldrh	r3, [r5, #12]
 800b580:	059a      	lsls	r2, r3, #22
 800b582:	d402      	bmi.n	800b58a <_vfiprintf_r+0x1fe>
 800b584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b586:	f7fe f927 	bl	80097d8 <__retarget_lock_release_recursive>
 800b58a:	89ab      	ldrh	r3, [r5, #12]
 800b58c:	065b      	lsls	r3, r3, #25
 800b58e:	f53f af1f 	bmi.w	800b3d0 <_vfiprintf_r+0x44>
 800b592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b594:	e71e      	b.n	800b3d4 <_vfiprintf_r+0x48>
 800b596:	ab03      	add	r3, sp, #12
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	462a      	mov	r2, r5
 800b59c:	4b05      	ldr	r3, [pc, #20]	@ (800b5b4 <_vfiprintf_r+0x228>)
 800b59e:	a904      	add	r1, sp, #16
 800b5a0:	4630      	mov	r0, r6
 800b5a2:	f7fd fe2f 	bl	8009204 <_printf_i>
 800b5a6:	e7e4      	b.n	800b572 <_vfiprintf_r+0x1e6>
 800b5a8:	0800e14a 	.word	0x0800e14a
 800b5ac:	0800e154 	.word	0x0800e154
 800b5b0:	08008cd5 	.word	0x08008cd5
 800b5b4:	0800b369 	.word	0x0800b369
 800b5b8:	0800e150 	.word	0x0800e150

0800b5bc <__swbuf_r>:
 800b5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5be:	460e      	mov	r6, r1
 800b5c0:	4614      	mov	r4, r2
 800b5c2:	4605      	mov	r5, r0
 800b5c4:	b118      	cbz	r0, 800b5ce <__swbuf_r+0x12>
 800b5c6:	6a03      	ldr	r3, [r0, #32]
 800b5c8:	b90b      	cbnz	r3, 800b5ce <__swbuf_r+0x12>
 800b5ca:	f7fd ffc5 	bl	8009558 <__sinit>
 800b5ce:	69a3      	ldr	r3, [r4, #24]
 800b5d0:	60a3      	str	r3, [r4, #8]
 800b5d2:	89a3      	ldrh	r3, [r4, #12]
 800b5d4:	071a      	lsls	r2, r3, #28
 800b5d6:	d501      	bpl.n	800b5dc <__swbuf_r+0x20>
 800b5d8:	6923      	ldr	r3, [r4, #16]
 800b5da:	b943      	cbnz	r3, 800b5ee <__swbuf_r+0x32>
 800b5dc:	4621      	mov	r1, r4
 800b5de:	4628      	mov	r0, r5
 800b5e0:	f000 f82a 	bl	800b638 <__swsetup_r>
 800b5e4:	b118      	cbz	r0, 800b5ee <__swbuf_r+0x32>
 800b5e6:	f04f 37ff 	mov.w	r7, #4294967295
 800b5ea:	4638      	mov	r0, r7
 800b5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	6922      	ldr	r2, [r4, #16]
 800b5f2:	1a98      	subs	r0, r3, r2
 800b5f4:	6963      	ldr	r3, [r4, #20]
 800b5f6:	b2f6      	uxtb	r6, r6
 800b5f8:	4283      	cmp	r3, r0
 800b5fa:	4637      	mov	r7, r6
 800b5fc:	dc05      	bgt.n	800b60a <__swbuf_r+0x4e>
 800b5fe:	4621      	mov	r1, r4
 800b600:	4628      	mov	r0, r5
 800b602:	f7ff fda7 	bl	800b154 <_fflush_r>
 800b606:	2800      	cmp	r0, #0
 800b608:	d1ed      	bne.n	800b5e6 <__swbuf_r+0x2a>
 800b60a:	68a3      	ldr	r3, [r4, #8]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	60a3      	str	r3, [r4, #8]
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	6022      	str	r2, [r4, #0]
 800b616:	701e      	strb	r6, [r3, #0]
 800b618:	6962      	ldr	r2, [r4, #20]
 800b61a:	1c43      	adds	r3, r0, #1
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d004      	beq.n	800b62a <__swbuf_r+0x6e>
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	07db      	lsls	r3, r3, #31
 800b624:	d5e1      	bpl.n	800b5ea <__swbuf_r+0x2e>
 800b626:	2e0a      	cmp	r6, #10
 800b628:	d1df      	bne.n	800b5ea <__swbuf_r+0x2e>
 800b62a:	4621      	mov	r1, r4
 800b62c:	4628      	mov	r0, r5
 800b62e:	f7ff fd91 	bl	800b154 <_fflush_r>
 800b632:	2800      	cmp	r0, #0
 800b634:	d0d9      	beq.n	800b5ea <__swbuf_r+0x2e>
 800b636:	e7d6      	b.n	800b5e6 <__swbuf_r+0x2a>

0800b638 <__swsetup_r>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	4b29      	ldr	r3, [pc, #164]	@ (800b6e0 <__swsetup_r+0xa8>)
 800b63c:	4605      	mov	r5, r0
 800b63e:	6818      	ldr	r0, [r3, #0]
 800b640:	460c      	mov	r4, r1
 800b642:	b118      	cbz	r0, 800b64c <__swsetup_r+0x14>
 800b644:	6a03      	ldr	r3, [r0, #32]
 800b646:	b90b      	cbnz	r3, 800b64c <__swsetup_r+0x14>
 800b648:	f7fd ff86 	bl	8009558 <__sinit>
 800b64c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b650:	0719      	lsls	r1, r3, #28
 800b652:	d422      	bmi.n	800b69a <__swsetup_r+0x62>
 800b654:	06da      	lsls	r2, r3, #27
 800b656:	d407      	bmi.n	800b668 <__swsetup_r+0x30>
 800b658:	2209      	movs	r2, #9
 800b65a:	602a      	str	r2, [r5, #0]
 800b65c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b660:	81a3      	strh	r3, [r4, #12]
 800b662:	f04f 30ff 	mov.w	r0, #4294967295
 800b666:	e033      	b.n	800b6d0 <__swsetup_r+0x98>
 800b668:	0758      	lsls	r0, r3, #29
 800b66a:	d512      	bpl.n	800b692 <__swsetup_r+0x5a>
 800b66c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b66e:	b141      	cbz	r1, 800b682 <__swsetup_r+0x4a>
 800b670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b674:	4299      	cmp	r1, r3
 800b676:	d002      	beq.n	800b67e <__swsetup_r+0x46>
 800b678:	4628      	mov	r0, r5
 800b67a:	f7fe ff15 	bl	800a4a8 <_free_r>
 800b67e:	2300      	movs	r3, #0
 800b680:	6363      	str	r3, [r4, #52]	@ 0x34
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b688:	81a3      	strh	r3, [r4, #12]
 800b68a:	2300      	movs	r3, #0
 800b68c:	6063      	str	r3, [r4, #4]
 800b68e:	6923      	ldr	r3, [r4, #16]
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	89a3      	ldrh	r3, [r4, #12]
 800b694:	f043 0308 	orr.w	r3, r3, #8
 800b698:	81a3      	strh	r3, [r4, #12]
 800b69a:	6923      	ldr	r3, [r4, #16]
 800b69c:	b94b      	cbnz	r3, 800b6b2 <__swsetup_r+0x7a>
 800b69e:	89a3      	ldrh	r3, [r4, #12]
 800b6a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6a8:	d003      	beq.n	800b6b2 <__swsetup_r+0x7a>
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	f000 f883 	bl	800b7b8 <__smakebuf_r>
 800b6b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b6:	f013 0201 	ands.w	r2, r3, #1
 800b6ba:	d00a      	beq.n	800b6d2 <__swsetup_r+0x9a>
 800b6bc:	2200      	movs	r2, #0
 800b6be:	60a2      	str	r2, [r4, #8]
 800b6c0:	6962      	ldr	r2, [r4, #20]
 800b6c2:	4252      	negs	r2, r2
 800b6c4:	61a2      	str	r2, [r4, #24]
 800b6c6:	6922      	ldr	r2, [r4, #16]
 800b6c8:	b942      	cbnz	r2, 800b6dc <__swsetup_r+0xa4>
 800b6ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6ce:	d1c5      	bne.n	800b65c <__swsetup_r+0x24>
 800b6d0:	bd38      	pop	{r3, r4, r5, pc}
 800b6d2:	0799      	lsls	r1, r3, #30
 800b6d4:	bf58      	it	pl
 800b6d6:	6962      	ldrpl	r2, [r4, #20]
 800b6d8:	60a2      	str	r2, [r4, #8]
 800b6da:	e7f4      	b.n	800b6c6 <__swsetup_r+0x8e>
 800b6dc:	2000      	movs	r0, #0
 800b6de:	e7f7      	b.n	800b6d0 <__swsetup_r+0x98>
 800b6e0:	200000b4 	.word	0x200000b4

0800b6e4 <_raise_r>:
 800b6e4:	291f      	cmp	r1, #31
 800b6e6:	b538      	push	{r3, r4, r5, lr}
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	460c      	mov	r4, r1
 800b6ec:	d904      	bls.n	800b6f8 <_raise_r+0x14>
 800b6ee:	2316      	movs	r3, #22
 800b6f0:	6003      	str	r3, [r0, #0]
 800b6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b6fa:	b112      	cbz	r2, 800b702 <_raise_r+0x1e>
 800b6fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b700:	b94b      	cbnz	r3, 800b716 <_raise_r+0x32>
 800b702:	4628      	mov	r0, r5
 800b704:	f000 f830 	bl	800b768 <_getpid_r>
 800b708:	4622      	mov	r2, r4
 800b70a:	4601      	mov	r1, r0
 800b70c:	4628      	mov	r0, r5
 800b70e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b712:	f000 b817 	b.w	800b744 <_kill_r>
 800b716:	2b01      	cmp	r3, #1
 800b718:	d00a      	beq.n	800b730 <_raise_r+0x4c>
 800b71a:	1c59      	adds	r1, r3, #1
 800b71c:	d103      	bne.n	800b726 <_raise_r+0x42>
 800b71e:	2316      	movs	r3, #22
 800b720:	6003      	str	r3, [r0, #0]
 800b722:	2001      	movs	r0, #1
 800b724:	e7e7      	b.n	800b6f6 <_raise_r+0x12>
 800b726:	2100      	movs	r1, #0
 800b728:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b72c:	4620      	mov	r0, r4
 800b72e:	4798      	blx	r3
 800b730:	2000      	movs	r0, #0
 800b732:	e7e0      	b.n	800b6f6 <_raise_r+0x12>

0800b734 <raise>:
 800b734:	4b02      	ldr	r3, [pc, #8]	@ (800b740 <raise+0xc>)
 800b736:	4601      	mov	r1, r0
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	f7ff bfd3 	b.w	800b6e4 <_raise_r>
 800b73e:	bf00      	nop
 800b740:	200000b4 	.word	0x200000b4

0800b744 <_kill_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4d07      	ldr	r5, [pc, #28]	@ (800b764 <_kill_r+0x20>)
 800b748:	2300      	movs	r3, #0
 800b74a:	4604      	mov	r4, r0
 800b74c:	4608      	mov	r0, r1
 800b74e:	4611      	mov	r1, r2
 800b750:	602b      	str	r3, [r5, #0]
 800b752:	f7f8 ff41 	bl	80045d8 <_kill>
 800b756:	1c43      	adds	r3, r0, #1
 800b758:	d102      	bne.n	800b760 <_kill_r+0x1c>
 800b75a:	682b      	ldr	r3, [r5, #0]
 800b75c:	b103      	cbz	r3, 800b760 <_kill_r+0x1c>
 800b75e:	6023      	str	r3, [r4, #0]
 800b760:	bd38      	pop	{r3, r4, r5, pc}
 800b762:	bf00      	nop
 800b764:	2000092c 	.word	0x2000092c

0800b768 <_getpid_r>:
 800b768:	f7f8 bf2e 	b.w	80045c8 <_getpid>

0800b76c <__swhatbuf_r>:
 800b76c:	b570      	push	{r4, r5, r6, lr}
 800b76e:	460c      	mov	r4, r1
 800b770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b774:	2900      	cmp	r1, #0
 800b776:	b096      	sub	sp, #88	@ 0x58
 800b778:	4615      	mov	r5, r2
 800b77a:	461e      	mov	r6, r3
 800b77c:	da0d      	bge.n	800b79a <__swhatbuf_r+0x2e>
 800b77e:	89a3      	ldrh	r3, [r4, #12]
 800b780:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b784:	f04f 0100 	mov.w	r1, #0
 800b788:	bf14      	ite	ne
 800b78a:	2340      	movne	r3, #64	@ 0x40
 800b78c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b790:	2000      	movs	r0, #0
 800b792:	6031      	str	r1, [r6, #0]
 800b794:	602b      	str	r3, [r5, #0]
 800b796:	b016      	add	sp, #88	@ 0x58
 800b798:	bd70      	pop	{r4, r5, r6, pc}
 800b79a:	466a      	mov	r2, sp
 800b79c:	f000 f848 	bl	800b830 <_fstat_r>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	dbec      	blt.n	800b77e <__swhatbuf_r+0x12>
 800b7a4:	9901      	ldr	r1, [sp, #4]
 800b7a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7ae:	4259      	negs	r1, r3
 800b7b0:	4159      	adcs	r1, r3
 800b7b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7b6:	e7eb      	b.n	800b790 <__swhatbuf_r+0x24>

0800b7b8 <__smakebuf_r>:
 800b7b8:	898b      	ldrh	r3, [r1, #12]
 800b7ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7bc:	079d      	lsls	r5, r3, #30
 800b7be:	4606      	mov	r6, r0
 800b7c0:	460c      	mov	r4, r1
 800b7c2:	d507      	bpl.n	800b7d4 <__smakebuf_r+0x1c>
 800b7c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7c8:	6023      	str	r3, [r4, #0]
 800b7ca:	6123      	str	r3, [r4, #16]
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	6163      	str	r3, [r4, #20]
 800b7d0:	b003      	add	sp, #12
 800b7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7d4:	ab01      	add	r3, sp, #4
 800b7d6:	466a      	mov	r2, sp
 800b7d8:	f7ff ffc8 	bl	800b76c <__swhatbuf_r>
 800b7dc:	9f00      	ldr	r7, [sp, #0]
 800b7de:	4605      	mov	r5, r0
 800b7e0:	4639      	mov	r1, r7
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	f7fe fed4 	bl	800a590 <_malloc_r>
 800b7e8:	b948      	cbnz	r0, 800b7fe <__smakebuf_r+0x46>
 800b7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ee:	059a      	lsls	r2, r3, #22
 800b7f0:	d4ee      	bmi.n	800b7d0 <__smakebuf_r+0x18>
 800b7f2:	f023 0303 	bic.w	r3, r3, #3
 800b7f6:	f043 0302 	orr.w	r3, r3, #2
 800b7fa:	81a3      	strh	r3, [r4, #12]
 800b7fc:	e7e2      	b.n	800b7c4 <__smakebuf_r+0xc>
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	6020      	str	r0, [r4, #0]
 800b802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b806:	81a3      	strh	r3, [r4, #12]
 800b808:	9b01      	ldr	r3, [sp, #4]
 800b80a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b80e:	b15b      	cbz	r3, 800b828 <__smakebuf_r+0x70>
 800b810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b814:	4630      	mov	r0, r6
 800b816:	f000 f81d 	bl	800b854 <_isatty_r>
 800b81a:	b128      	cbz	r0, 800b828 <__smakebuf_r+0x70>
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	f023 0303 	bic.w	r3, r3, #3
 800b822:	f043 0301 	orr.w	r3, r3, #1
 800b826:	81a3      	strh	r3, [r4, #12]
 800b828:	89a3      	ldrh	r3, [r4, #12]
 800b82a:	431d      	orrs	r5, r3
 800b82c:	81a5      	strh	r5, [r4, #12]
 800b82e:	e7cf      	b.n	800b7d0 <__smakebuf_r+0x18>

0800b830 <_fstat_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d07      	ldr	r5, [pc, #28]	@ (800b850 <_fstat_r+0x20>)
 800b834:	2300      	movs	r3, #0
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	4611      	mov	r1, r2
 800b83c:	602b      	str	r3, [r5, #0]
 800b83e:	f7f8 ff2b 	bl	8004698 <_fstat>
 800b842:	1c43      	adds	r3, r0, #1
 800b844:	d102      	bne.n	800b84c <_fstat_r+0x1c>
 800b846:	682b      	ldr	r3, [r5, #0]
 800b848:	b103      	cbz	r3, 800b84c <_fstat_r+0x1c>
 800b84a:	6023      	str	r3, [r4, #0]
 800b84c:	bd38      	pop	{r3, r4, r5, pc}
 800b84e:	bf00      	nop
 800b850:	2000092c 	.word	0x2000092c

0800b854 <_isatty_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	4d06      	ldr	r5, [pc, #24]	@ (800b870 <_isatty_r+0x1c>)
 800b858:	2300      	movs	r3, #0
 800b85a:	4604      	mov	r4, r0
 800b85c:	4608      	mov	r0, r1
 800b85e:	602b      	str	r3, [r5, #0]
 800b860:	f7f8 ff2a 	bl	80046b8 <_isatty>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_isatty_r+0x1a>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_isatty_r+0x1a>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	2000092c 	.word	0x2000092c

0800b874 <atan2>:
 800b874:	f000 bd70 	b.w	800c358 <__ieee754_atan2>

0800b878 <pow>:
 800b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b87a:	ed2d 8b02 	vpush	{d8}
 800b87e:	eeb0 8a40 	vmov.f32	s16, s0
 800b882:	eef0 8a60 	vmov.f32	s17, s1
 800b886:	ec55 4b11 	vmov	r4, r5, d1
 800b88a:	f000 fe2d 	bl	800c4e8 <__ieee754_pow>
 800b88e:	4622      	mov	r2, r4
 800b890:	462b      	mov	r3, r5
 800b892:	4620      	mov	r0, r4
 800b894:	4629      	mov	r1, r5
 800b896:	ec57 6b10 	vmov	r6, r7, d0
 800b89a:	f7f5 f947 	bl	8000b2c <__aeabi_dcmpun>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	d13b      	bne.n	800b91a <pow+0xa2>
 800b8a2:	ec51 0b18 	vmov	r0, r1, d8
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	f7f5 f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8ae:	b1b8      	cbz	r0, 800b8e0 <pow+0x68>
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	f7f5 f906 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d146      	bne.n	800b94e <pow+0xd6>
 800b8c0:	ec45 4b10 	vmov	d0, r4, r5
 800b8c4:	f000 fadc 	bl	800be80 <finite>
 800b8c8:	b338      	cbz	r0, 800b91a <pow+0xa2>
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	f7f5 f903 	bl	8000adc <__aeabi_dcmplt>
 800b8d6:	b300      	cbz	r0, 800b91a <pow+0xa2>
 800b8d8:	f7fd ff52 	bl	8009780 <__errno>
 800b8dc:	2322      	movs	r3, #34	@ 0x22
 800b8de:	e01b      	b.n	800b918 <pow+0xa0>
 800b8e0:	ec47 6b10 	vmov	d0, r6, r7
 800b8e4:	f000 facc 	bl	800be80 <finite>
 800b8e8:	b9e0      	cbnz	r0, 800b924 <pow+0xac>
 800b8ea:	eeb0 0a48 	vmov.f32	s0, s16
 800b8ee:	eef0 0a68 	vmov.f32	s1, s17
 800b8f2:	f000 fac5 	bl	800be80 <finite>
 800b8f6:	b1a8      	cbz	r0, 800b924 <pow+0xac>
 800b8f8:	ec45 4b10 	vmov	d0, r4, r5
 800b8fc:	f000 fac0 	bl	800be80 <finite>
 800b900:	b180      	cbz	r0, 800b924 <pow+0xac>
 800b902:	4632      	mov	r2, r6
 800b904:	463b      	mov	r3, r7
 800b906:	4630      	mov	r0, r6
 800b908:	4639      	mov	r1, r7
 800b90a:	f7f5 f90f 	bl	8000b2c <__aeabi_dcmpun>
 800b90e:	2800      	cmp	r0, #0
 800b910:	d0e2      	beq.n	800b8d8 <pow+0x60>
 800b912:	f7fd ff35 	bl	8009780 <__errno>
 800b916:	2321      	movs	r3, #33	@ 0x21
 800b918:	6003      	str	r3, [r0, #0]
 800b91a:	ecbd 8b02 	vpop	{d8}
 800b91e:	ec47 6b10 	vmov	d0, r6, r7
 800b922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b924:	2200      	movs	r2, #0
 800b926:	2300      	movs	r3, #0
 800b928:	4630      	mov	r0, r6
 800b92a:	4639      	mov	r1, r7
 800b92c:	f7f5 f8cc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b930:	2800      	cmp	r0, #0
 800b932:	d0f2      	beq.n	800b91a <pow+0xa2>
 800b934:	eeb0 0a48 	vmov.f32	s0, s16
 800b938:	eef0 0a68 	vmov.f32	s1, s17
 800b93c:	f000 faa0 	bl	800be80 <finite>
 800b940:	2800      	cmp	r0, #0
 800b942:	d0ea      	beq.n	800b91a <pow+0xa2>
 800b944:	ec45 4b10 	vmov	d0, r4, r5
 800b948:	f000 fa9a 	bl	800be80 <finite>
 800b94c:	e7c3      	b.n	800b8d6 <pow+0x5e>
 800b94e:	4f01      	ldr	r7, [pc, #4]	@ (800b954 <pow+0xdc>)
 800b950:	2600      	movs	r6, #0
 800b952:	e7e2      	b.n	800b91a <pow+0xa2>
 800b954:	3ff00000 	.word	0x3ff00000

0800b958 <sqrt>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	ed2d 8b02 	vpush	{d8}
 800b95e:	ec55 4b10 	vmov	r4, r5, d0
 800b962:	f000 fa99 	bl	800be98 <__ieee754_sqrt>
 800b966:	4622      	mov	r2, r4
 800b968:	462b      	mov	r3, r5
 800b96a:	4620      	mov	r0, r4
 800b96c:	4629      	mov	r1, r5
 800b96e:	eeb0 8a40 	vmov.f32	s16, s0
 800b972:	eef0 8a60 	vmov.f32	s17, s1
 800b976:	f7f5 f8d9 	bl	8000b2c <__aeabi_dcmpun>
 800b97a:	b990      	cbnz	r0, 800b9a2 <sqrt+0x4a>
 800b97c:	2200      	movs	r2, #0
 800b97e:	2300      	movs	r3, #0
 800b980:	4620      	mov	r0, r4
 800b982:	4629      	mov	r1, r5
 800b984:	f7f5 f8aa 	bl	8000adc <__aeabi_dcmplt>
 800b988:	b158      	cbz	r0, 800b9a2 <sqrt+0x4a>
 800b98a:	f7fd fef9 	bl	8009780 <__errno>
 800b98e:	2321      	movs	r3, #33	@ 0x21
 800b990:	6003      	str	r3, [r0, #0]
 800b992:	2200      	movs	r2, #0
 800b994:	2300      	movs	r3, #0
 800b996:	4610      	mov	r0, r2
 800b998:	4619      	mov	r1, r3
 800b99a:	f7f4 ff57 	bl	800084c <__aeabi_ddiv>
 800b99e:	ec41 0b18 	vmov	d8, r0, r1
 800b9a2:	eeb0 0a48 	vmov.f32	s0, s16
 800b9a6:	eef0 0a68 	vmov.f32	s1, s17
 800b9aa:	ecbd 8b02 	vpop	{d8}
 800b9ae:	bd38      	pop	{r3, r4, r5, pc}

0800b9b0 <atan>:
 800b9b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b4:	ec55 4b10 	vmov	r4, r5, d0
 800b9b8:	4bbf      	ldr	r3, [pc, #764]	@ (800bcb8 <atan+0x308>)
 800b9ba:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b9be:	429e      	cmp	r6, r3
 800b9c0:	46ab      	mov	fp, r5
 800b9c2:	d918      	bls.n	800b9f6 <atan+0x46>
 800b9c4:	4bbd      	ldr	r3, [pc, #756]	@ (800bcbc <atan+0x30c>)
 800b9c6:	429e      	cmp	r6, r3
 800b9c8:	d801      	bhi.n	800b9ce <atan+0x1e>
 800b9ca:	d109      	bne.n	800b9e0 <atan+0x30>
 800b9cc:	b144      	cbz	r4, 800b9e0 <atan+0x30>
 800b9ce:	4622      	mov	r2, r4
 800b9d0:	462b      	mov	r3, r5
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	f7f4 fc59 	bl	800028c <__adddf3>
 800b9da:	4604      	mov	r4, r0
 800b9dc:	460d      	mov	r5, r1
 800b9de:	e006      	b.n	800b9ee <atan+0x3e>
 800b9e0:	f1bb 0f00 	cmp.w	fp, #0
 800b9e4:	f340 812b 	ble.w	800bc3e <atan+0x28e>
 800b9e8:	a597      	add	r5, pc, #604	@ (adr r5, 800bc48 <atan+0x298>)
 800b9ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b9ee:	ec45 4b10 	vmov	d0, r4, r5
 800b9f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9f6:	4bb2      	ldr	r3, [pc, #712]	@ (800bcc0 <atan+0x310>)
 800b9f8:	429e      	cmp	r6, r3
 800b9fa:	d813      	bhi.n	800ba24 <atan+0x74>
 800b9fc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ba00:	429e      	cmp	r6, r3
 800ba02:	d80c      	bhi.n	800ba1e <atan+0x6e>
 800ba04:	a392      	add	r3, pc, #584	@ (adr r3, 800bc50 <atan+0x2a0>)
 800ba06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	f7f4 fc3d 	bl	800028c <__adddf3>
 800ba12:	4bac      	ldr	r3, [pc, #688]	@ (800bcc4 <atan+0x314>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	f7f5 f87f 	bl	8000b18 <__aeabi_dcmpgt>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d1e7      	bne.n	800b9ee <atan+0x3e>
 800ba1e:	f04f 3aff 	mov.w	sl, #4294967295
 800ba22:	e029      	b.n	800ba78 <atan+0xc8>
 800ba24:	f000 f9b0 	bl	800bd88 <fabs>
 800ba28:	4ba7      	ldr	r3, [pc, #668]	@ (800bcc8 <atan+0x318>)
 800ba2a:	429e      	cmp	r6, r3
 800ba2c:	ec55 4b10 	vmov	r4, r5, d0
 800ba30:	f200 80bc 	bhi.w	800bbac <atan+0x1fc>
 800ba34:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800ba38:	429e      	cmp	r6, r3
 800ba3a:	f200 809e 	bhi.w	800bb7a <atan+0x1ca>
 800ba3e:	4622      	mov	r2, r4
 800ba40:	462b      	mov	r3, r5
 800ba42:	4620      	mov	r0, r4
 800ba44:	4629      	mov	r1, r5
 800ba46:	f7f4 fc21 	bl	800028c <__adddf3>
 800ba4a:	4b9e      	ldr	r3, [pc, #632]	@ (800bcc4 <atan+0x314>)
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f7f4 fc1b 	bl	8000288 <__aeabi_dsub>
 800ba52:	2200      	movs	r2, #0
 800ba54:	4606      	mov	r6, r0
 800ba56:	460f      	mov	r7, r1
 800ba58:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	4629      	mov	r1, r5
 800ba60:	f7f4 fc14 	bl	800028c <__adddf3>
 800ba64:	4602      	mov	r2, r0
 800ba66:	460b      	mov	r3, r1
 800ba68:	4630      	mov	r0, r6
 800ba6a:	4639      	mov	r1, r7
 800ba6c:	f7f4 feee 	bl	800084c <__aeabi_ddiv>
 800ba70:	f04f 0a00 	mov.w	sl, #0
 800ba74:	4604      	mov	r4, r0
 800ba76:	460d      	mov	r5, r1
 800ba78:	4622      	mov	r2, r4
 800ba7a:	462b      	mov	r3, r5
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	4629      	mov	r1, r5
 800ba80:	f7f4 fdba 	bl	80005f8 <__aeabi_dmul>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	4680      	mov	r8, r0
 800ba8a:	4689      	mov	r9, r1
 800ba8c:	f7f4 fdb4 	bl	80005f8 <__aeabi_dmul>
 800ba90:	a371      	add	r3, pc, #452	@ (adr r3, 800bc58 <atan+0x2a8>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	4606      	mov	r6, r0
 800ba98:	460f      	mov	r7, r1
 800ba9a:	f7f4 fdad 	bl	80005f8 <__aeabi_dmul>
 800ba9e:	a370      	add	r3, pc, #448	@ (adr r3, 800bc60 <atan+0x2b0>)
 800baa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa4:	f7f4 fbf2 	bl	800028c <__adddf3>
 800baa8:	4632      	mov	r2, r6
 800baaa:	463b      	mov	r3, r7
 800baac:	f7f4 fda4 	bl	80005f8 <__aeabi_dmul>
 800bab0:	a36d      	add	r3, pc, #436	@ (adr r3, 800bc68 <atan+0x2b8>)
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f7f4 fbe9 	bl	800028c <__adddf3>
 800baba:	4632      	mov	r2, r6
 800babc:	463b      	mov	r3, r7
 800babe:	f7f4 fd9b 	bl	80005f8 <__aeabi_dmul>
 800bac2:	a36b      	add	r3, pc, #428	@ (adr r3, 800bc70 <atan+0x2c0>)
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	f7f4 fbe0 	bl	800028c <__adddf3>
 800bacc:	4632      	mov	r2, r6
 800bace:	463b      	mov	r3, r7
 800bad0:	f7f4 fd92 	bl	80005f8 <__aeabi_dmul>
 800bad4:	a368      	add	r3, pc, #416	@ (adr r3, 800bc78 <atan+0x2c8>)
 800bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bada:	f7f4 fbd7 	bl	800028c <__adddf3>
 800bade:	4632      	mov	r2, r6
 800bae0:	463b      	mov	r3, r7
 800bae2:	f7f4 fd89 	bl	80005f8 <__aeabi_dmul>
 800bae6:	a366      	add	r3, pc, #408	@ (adr r3, 800bc80 <atan+0x2d0>)
 800bae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baec:	f7f4 fbce 	bl	800028c <__adddf3>
 800baf0:	4642      	mov	r2, r8
 800baf2:	464b      	mov	r3, r9
 800baf4:	f7f4 fd80 	bl	80005f8 <__aeabi_dmul>
 800baf8:	a363      	add	r3, pc, #396	@ (adr r3, 800bc88 <atan+0x2d8>)
 800bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafe:	4680      	mov	r8, r0
 800bb00:	4689      	mov	r9, r1
 800bb02:	4630      	mov	r0, r6
 800bb04:	4639      	mov	r1, r7
 800bb06:	f7f4 fd77 	bl	80005f8 <__aeabi_dmul>
 800bb0a:	a361      	add	r3, pc, #388	@ (adr r3, 800bc90 <atan+0x2e0>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	f7f4 fbba 	bl	8000288 <__aeabi_dsub>
 800bb14:	4632      	mov	r2, r6
 800bb16:	463b      	mov	r3, r7
 800bb18:	f7f4 fd6e 	bl	80005f8 <__aeabi_dmul>
 800bb1c:	a35e      	add	r3, pc, #376	@ (adr r3, 800bc98 <atan+0x2e8>)
 800bb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb22:	f7f4 fbb1 	bl	8000288 <__aeabi_dsub>
 800bb26:	4632      	mov	r2, r6
 800bb28:	463b      	mov	r3, r7
 800bb2a:	f7f4 fd65 	bl	80005f8 <__aeabi_dmul>
 800bb2e:	a35c      	add	r3, pc, #368	@ (adr r3, 800bca0 <atan+0x2f0>)
 800bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb34:	f7f4 fba8 	bl	8000288 <__aeabi_dsub>
 800bb38:	4632      	mov	r2, r6
 800bb3a:	463b      	mov	r3, r7
 800bb3c:	f7f4 fd5c 	bl	80005f8 <__aeabi_dmul>
 800bb40:	a359      	add	r3, pc, #356	@ (adr r3, 800bca8 <atan+0x2f8>)
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	f7f4 fb9f 	bl	8000288 <__aeabi_dsub>
 800bb4a:	4632      	mov	r2, r6
 800bb4c:	463b      	mov	r3, r7
 800bb4e:	f7f4 fd53 	bl	80005f8 <__aeabi_dmul>
 800bb52:	4602      	mov	r2, r0
 800bb54:	460b      	mov	r3, r1
 800bb56:	4640      	mov	r0, r8
 800bb58:	4649      	mov	r1, r9
 800bb5a:	f7f4 fb97 	bl	800028c <__adddf3>
 800bb5e:	4622      	mov	r2, r4
 800bb60:	462b      	mov	r3, r5
 800bb62:	f7f4 fd49 	bl	80005f8 <__aeabi_dmul>
 800bb66:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	d148      	bne.n	800bc02 <atan+0x252>
 800bb70:	4620      	mov	r0, r4
 800bb72:	4629      	mov	r1, r5
 800bb74:	f7f4 fb88 	bl	8000288 <__aeabi_dsub>
 800bb78:	e72f      	b.n	800b9da <atan+0x2a>
 800bb7a:	4b52      	ldr	r3, [pc, #328]	@ (800bcc4 <atan+0x314>)
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	4620      	mov	r0, r4
 800bb80:	4629      	mov	r1, r5
 800bb82:	f7f4 fb81 	bl	8000288 <__aeabi_dsub>
 800bb86:	4b4f      	ldr	r3, [pc, #316]	@ (800bcc4 <atan+0x314>)
 800bb88:	4606      	mov	r6, r0
 800bb8a:	460f      	mov	r7, r1
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	4620      	mov	r0, r4
 800bb90:	4629      	mov	r1, r5
 800bb92:	f7f4 fb7b 	bl	800028c <__adddf3>
 800bb96:	4602      	mov	r2, r0
 800bb98:	460b      	mov	r3, r1
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	4639      	mov	r1, r7
 800bb9e:	f7f4 fe55 	bl	800084c <__aeabi_ddiv>
 800bba2:	f04f 0a01 	mov.w	sl, #1
 800bba6:	4604      	mov	r4, r0
 800bba8:	460d      	mov	r5, r1
 800bbaa:	e765      	b.n	800ba78 <atan+0xc8>
 800bbac:	4b47      	ldr	r3, [pc, #284]	@ (800bccc <atan+0x31c>)
 800bbae:	429e      	cmp	r6, r3
 800bbb0:	d21c      	bcs.n	800bbec <atan+0x23c>
 800bbb2:	4b47      	ldr	r3, [pc, #284]	@ (800bcd0 <atan+0x320>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	4629      	mov	r1, r5
 800bbba:	f7f4 fb65 	bl	8000288 <__aeabi_dsub>
 800bbbe:	4b44      	ldr	r3, [pc, #272]	@ (800bcd0 <atan+0x320>)
 800bbc0:	4606      	mov	r6, r0
 800bbc2:	460f      	mov	r7, r1
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	4629      	mov	r1, r5
 800bbca:	f7f4 fd15 	bl	80005f8 <__aeabi_dmul>
 800bbce:	4b3d      	ldr	r3, [pc, #244]	@ (800bcc4 <atan+0x314>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f7f4 fb5b 	bl	800028c <__adddf3>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	460b      	mov	r3, r1
 800bbda:	4630      	mov	r0, r6
 800bbdc:	4639      	mov	r1, r7
 800bbde:	f7f4 fe35 	bl	800084c <__aeabi_ddiv>
 800bbe2:	f04f 0a02 	mov.w	sl, #2
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	460d      	mov	r5, r1
 800bbea:	e745      	b.n	800ba78 <atan+0xc8>
 800bbec:	4622      	mov	r2, r4
 800bbee:	462b      	mov	r3, r5
 800bbf0:	4938      	ldr	r1, [pc, #224]	@ (800bcd4 <atan+0x324>)
 800bbf2:	2000      	movs	r0, #0
 800bbf4:	f7f4 fe2a 	bl	800084c <__aeabi_ddiv>
 800bbf8:	f04f 0a03 	mov.w	sl, #3
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	460d      	mov	r5, r1
 800bc00:	e73a      	b.n	800ba78 <atan+0xc8>
 800bc02:	4b35      	ldr	r3, [pc, #212]	@ (800bcd8 <atan+0x328>)
 800bc04:	4e35      	ldr	r6, [pc, #212]	@ (800bcdc <atan+0x32c>)
 800bc06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	f7f4 fb3b 	bl	8000288 <__aeabi_dsub>
 800bc12:	4622      	mov	r2, r4
 800bc14:	462b      	mov	r3, r5
 800bc16:	f7f4 fb37 	bl	8000288 <__aeabi_dsub>
 800bc1a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bc1e:	4602      	mov	r2, r0
 800bc20:	460b      	mov	r3, r1
 800bc22:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bc26:	f7f4 fb2f 	bl	8000288 <__aeabi_dsub>
 800bc2a:	f1bb 0f00 	cmp.w	fp, #0
 800bc2e:	4604      	mov	r4, r0
 800bc30:	460d      	mov	r5, r1
 800bc32:	f6bf aedc 	bge.w	800b9ee <atan+0x3e>
 800bc36:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc3a:	461d      	mov	r5, r3
 800bc3c:	e6d7      	b.n	800b9ee <atan+0x3e>
 800bc3e:	a51c      	add	r5, pc, #112	@ (adr r5, 800bcb0 <atan+0x300>)
 800bc40:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc44:	e6d3      	b.n	800b9ee <atan+0x3e>
 800bc46:	bf00      	nop
 800bc48:	54442d18 	.word	0x54442d18
 800bc4c:	3ff921fb 	.word	0x3ff921fb
 800bc50:	8800759c 	.word	0x8800759c
 800bc54:	7e37e43c 	.word	0x7e37e43c
 800bc58:	e322da11 	.word	0xe322da11
 800bc5c:	3f90ad3a 	.word	0x3f90ad3a
 800bc60:	24760deb 	.word	0x24760deb
 800bc64:	3fa97b4b 	.word	0x3fa97b4b
 800bc68:	a0d03d51 	.word	0xa0d03d51
 800bc6c:	3fb10d66 	.word	0x3fb10d66
 800bc70:	c54c206e 	.word	0xc54c206e
 800bc74:	3fb745cd 	.word	0x3fb745cd
 800bc78:	920083ff 	.word	0x920083ff
 800bc7c:	3fc24924 	.word	0x3fc24924
 800bc80:	5555550d 	.word	0x5555550d
 800bc84:	3fd55555 	.word	0x3fd55555
 800bc88:	2c6a6c2f 	.word	0x2c6a6c2f
 800bc8c:	bfa2b444 	.word	0xbfa2b444
 800bc90:	52defd9a 	.word	0x52defd9a
 800bc94:	3fadde2d 	.word	0x3fadde2d
 800bc98:	af749a6d 	.word	0xaf749a6d
 800bc9c:	3fb3b0f2 	.word	0x3fb3b0f2
 800bca0:	fe231671 	.word	0xfe231671
 800bca4:	3fbc71c6 	.word	0x3fbc71c6
 800bca8:	9998ebc4 	.word	0x9998ebc4
 800bcac:	3fc99999 	.word	0x3fc99999
 800bcb0:	54442d18 	.word	0x54442d18
 800bcb4:	bff921fb 	.word	0xbff921fb
 800bcb8:	440fffff 	.word	0x440fffff
 800bcbc:	7ff00000 	.word	0x7ff00000
 800bcc0:	3fdbffff 	.word	0x3fdbffff
 800bcc4:	3ff00000 	.word	0x3ff00000
 800bcc8:	3ff2ffff 	.word	0x3ff2ffff
 800bccc:	40038000 	.word	0x40038000
 800bcd0:	3ff80000 	.word	0x3ff80000
 800bcd4:	bff00000 	.word	0xbff00000
 800bcd8:	0800e3a8 	.word	0x0800e3a8
 800bcdc:	0800e3c8 	.word	0x0800e3c8

0800bce0 <cos>:
 800bce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bce2:	ec53 2b10 	vmov	r2, r3, d0
 800bce6:	4826      	ldr	r0, [pc, #152]	@ (800bd80 <cos+0xa0>)
 800bce8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bcec:	4281      	cmp	r1, r0
 800bcee:	d806      	bhi.n	800bcfe <cos+0x1e>
 800bcf0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800bd78 <cos+0x98>
 800bcf4:	b005      	add	sp, #20
 800bcf6:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcfa:	f000 b9a9 	b.w	800c050 <__kernel_cos>
 800bcfe:	4821      	ldr	r0, [pc, #132]	@ (800bd84 <cos+0xa4>)
 800bd00:	4281      	cmp	r1, r0
 800bd02:	d908      	bls.n	800bd16 <cos+0x36>
 800bd04:	4610      	mov	r0, r2
 800bd06:	4619      	mov	r1, r3
 800bd08:	f7f4 fabe 	bl	8000288 <__aeabi_dsub>
 800bd0c:	ec41 0b10 	vmov	d0, r0, r1
 800bd10:	b005      	add	sp, #20
 800bd12:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd16:	4668      	mov	r0, sp
 800bd18:	f001 f932 	bl	800cf80 <__ieee754_rem_pio2>
 800bd1c:	f000 0003 	and.w	r0, r0, #3
 800bd20:	2801      	cmp	r0, #1
 800bd22:	d00b      	beq.n	800bd3c <cos+0x5c>
 800bd24:	2802      	cmp	r0, #2
 800bd26:	d015      	beq.n	800bd54 <cos+0x74>
 800bd28:	b9d8      	cbnz	r0, 800bd62 <cos+0x82>
 800bd2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd2e:	ed9d 0b00 	vldr	d0, [sp]
 800bd32:	f000 f98d 	bl	800c050 <__kernel_cos>
 800bd36:	ec51 0b10 	vmov	r0, r1, d0
 800bd3a:	e7e7      	b.n	800bd0c <cos+0x2c>
 800bd3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd40:	ed9d 0b00 	vldr	d0, [sp]
 800bd44:	f000 fa4c 	bl	800c1e0 <__kernel_sin>
 800bd48:	ec53 2b10 	vmov	r2, r3, d0
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bd52:	e7db      	b.n	800bd0c <cos+0x2c>
 800bd54:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd58:	ed9d 0b00 	vldr	d0, [sp]
 800bd5c:	f000 f978 	bl	800c050 <__kernel_cos>
 800bd60:	e7f2      	b.n	800bd48 <cos+0x68>
 800bd62:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd66:	ed9d 0b00 	vldr	d0, [sp]
 800bd6a:	2001      	movs	r0, #1
 800bd6c:	f000 fa38 	bl	800c1e0 <__kernel_sin>
 800bd70:	e7e1      	b.n	800bd36 <cos+0x56>
 800bd72:	bf00      	nop
 800bd74:	f3af 8000 	nop.w
	...
 800bd80:	3fe921fb 	.word	0x3fe921fb
 800bd84:	7fefffff 	.word	0x7fefffff

0800bd88 <fabs>:
 800bd88:	ec51 0b10 	vmov	r0, r1, d0
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bd92:	ec43 2b10 	vmov	d0, r2, r3
 800bd96:	4770      	bx	lr

0800bd98 <sin>:
 800bd98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd9a:	ec53 2b10 	vmov	r2, r3, d0
 800bd9e:	4826      	ldr	r0, [pc, #152]	@ (800be38 <sin+0xa0>)
 800bda0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bda4:	4281      	cmp	r1, r0
 800bda6:	d807      	bhi.n	800bdb8 <sin+0x20>
 800bda8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800be30 <sin+0x98>
 800bdac:	2000      	movs	r0, #0
 800bdae:	b005      	add	sp, #20
 800bdb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdb4:	f000 ba14 	b.w	800c1e0 <__kernel_sin>
 800bdb8:	4820      	ldr	r0, [pc, #128]	@ (800be3c <sin+0xa4>)
 800bdba:	4281      	cmp	r1, r0
 800bdbc:	d908      	bls.n	800bdd0 <sin+0x38>
 800bdbe:	4610      	mov	r0, r2
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	f7f4 fa61 	bl	8000288 <__aeabi_dsub>
 800bdc6:	ec41 0b10 	vmov	d0, r0, r1
 800bdca:	b005      	add	sp, #20
 800bdcc:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdd0:	4668      	mov	r0, sp
 800bdd2:	f001 f8d5 	bl	800cf80 <__ieee754_rem_pio2>
 800bdd6:	f000 0003 	and.w	r0, r0, #3
 800bdda:	2801      	cmp	r0, #1
 800bddc:	d00c      	beq.n	800bdf8 <sin+0x60>
 800bdde:	2802      	cmp	r0, #2
 800bde0:	d011      	beq.n	800be06 <sin+0x6e>
 800bde2:	b9e8      	cbnz	r0, 800be20 <sin+0x88>
 800bde4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bde8:	ed9d 0b00 	vldr	d0, [sp]
 800bdec:	2001      	movs	r0, #1
 800bdee:	f000 f9f7 	bl	800c1e0 <__kernel_sin>
 800bdf2:	ec51 0b10 	vmov	r0, r1, d0
 800bdf6:	e7e6      	b.n	800bdc6 <sin+0x2e>
 800bdf8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdfc:	ed9d 0b00 	vldr	d0, [sp]
 800be00:	f000 f926 	bl	800c050 <__kernel_cos>
 800be04:	e7f5      	b.n	800bdf2 <sin+0x5a>
 800be06:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be0a:	ed9d 0b00 	vldr	d0, [sp]
 800be0e:	2001      	movs	r0, #1
 800be10:	f000 f9e6 	bl	800c1e0 <__kernel_sin>
 800be14:	ec53 2b10 	vmov	r2, r3, d0
 800be18:	4610      	mov	r0, r2
 800be1a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800be1e:	e7d2      	b.n	800bdc6 <sin+0x2e>
 800be20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800be24:	ed9d 0b00 	vldr	d0, [sp]
 800be28:	f000 f912 	bl	800c050 <__kernel_cos>
 800be2c:	e7f2      	b.n	800be14 <sin+0x7c>
 800be2e:	bf00      	nop
	...
 800be38:	3fe921fb 	.word	0x3fe921fb
 800be3c:	7fefffff 	.word	0x7fefffff

0800be40 <atan2f>:
 800be40:	f001 ba9a 	b.w	800d378 <__ieee754_atan2f>

0800be44 <sqrtf>:
 800be44:	b508      	push	{r3, lr}
 800be46:	ed2d 8b02 	vpush	{d8}
 800be4a:	eeb0 8a40 	vmov.f32	s16, s0
 800be4e:	f000 f8f9 	bl	800c044 <__ieee754_sqrtf>
 800be52:	eeb4 8a48 	vcmp.f32	s16, s16
 800be56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be5a:	d60c      	bvs.n	800be76 <sqrtf+0x32>
 800be5c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800be7c <sqrtf+0x38>
 800be60:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800be64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be68:	d505      	bpl.n	800be76 <sqrtf+0x32>
 800be6a:	f7fd fc89 	bl	8009780 <__errno>
 800be6e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800be72:	2321      	movs	r3, #33	@ 0x21
 800be74:	6003      	str	r3, [r0, #0]
 800be76:	ecbd 8b02 	vpop	{d8}
 800be7a:	bd08      	pop	{r3, pc}
 800be7c:	00000000 	.word	0x00000000

0800be80 <finite>:
 800be80:	b082      	sub	sp, #8
 800be82:	ed8d 0b00 	vstr	d0, [sp]
 800be86:	9801      	ldr	r0, [sp, #4]
 800be88:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800be8c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800be90:	0fc0      	lsrs	r0, r0, #31
 800be92:	b002      	add	sp, #8
 800be94:	4770      	bx	lr
	...

0800be98 <__ieee754_sqrt>:
 800be98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	4a66      	ldr	r2, [pc, #408]	@ (800c038 <__ieee754_sqrt+0x1a0>)
 800be9e:	ec55 4b10 	vmov	r4, r5, d0
 800bea2:	43aa      	bics	r2, r5
 800bea4:	462b      	mov	r3, r5
 800bea6:	4621      	mov	r1, r4
 800bea8:	d110      	bne.n	800becc <__ieee754_sqrt+0x34>
 800beaa:	4622      	mov	r2, r4
 800beac:	4620      	mov	r0, r4
 800beae:	4629      	mov	r1, r5
 800beb0:	f7f4 fba2 	bl	80005f8 <__aeabi_dmul>
 800beb4:	4602      	mov	r2, r0
 800beb6:	460b      	mov	r3, r1
 800beb8:	4620      	mov	r0, r4
 800beba:	4629      	mov	r1, r5
 800bebc:	f7f4 f9e6 	bl	800028c <__adddf3>
 800bec0:	4604      	mov	r4, r0
 800bec2:	460d      	mov	r5, r1
 800bec4:	ec45 4b10 	vmov	d0, r4, r5
 800bec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800becc:	2d00      	cmp	r5, #0
 800bece:	dc0e      	bgt.n	800beee <__ieee754_sqrt+0x56>
 800bed0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bed4:	4322      	orrs	r2, r4
 800bed6:	d0f5      	beq.n	800bec4 <__ieee754_sqrt+0x2c>
 800bed8:	b19d      	cbz	r5, 800bf02 <__ieee754_sqrt+0x6a>
 800beda:	4622      	mov	r2, r4
 800bedc:	4620      	mov	r0, r4
 800bede:	4629      	mov	r1, r5
 800bee0:	f7f4 f9d2 	bl	8000288 <__aeabi_dsub>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	f7f4 fcb0 	bl	800084c <__aeabi_ddiv>
 800beec:	e7e8      	b.n	800bec0 <__ieee754_sqrt+0x28>
 800beee:	152a      	asrs	r2, r5, #20
 800bef0:	d115      	bne.n	800bf1e <__ieee754_sqrt+0x86>
 800bef2:	2000      	movs	r0, #0
 800bef4:	e009      	b.n	800bf0a <__ieee754_sqrt+0x72>
 800bef6:	0acb      	lsrs	r3, r1, #11
 800bef8:	3a15      	subs	r2, #21
 800befa:	0549      	lsls	r1, r1, #21
 800befc:	2b00      	cmp	r3, #0
 800befe:	d0fa      	beq.n	800bef6 <__ieee754_sqrt+0x5e>
 800bf00:	e7f7      	b.n	800bef2 <__ieee754_sqrt+0x5a>
 800bf02:	462a      	mov	r2, r5
 800bf04:	e7fa      	b.n	800befc <__ieee754_sqrt+0x64>
 800bf06:	005b      	lsls	r3, r3, #1
 800bf08:	3001      	adds	r0, #1
 800bf0a:	02dc      	lsls	r4, r3, #11
 800bf0c:	d5fb      	bpl.n	800bf06 <__ieee754_sqrt+0x6e>
 800bf0e:	1e44      	subs	r4, r0, #1
 800bf10:	1b12      	subs	r2, r2, r4
 800bf12:	f1c0 0420 	rsb	r4, r0, #32
 800bf16:	fa21 f404 	lsr.w	r4, r1, r4
 800bf1a:	4323      	orrs	r3, r4
 800bf1c:	4081      	lsls	r1, r0
 800bf1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf22:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800bf26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf2a:	07d2      	lsls	r2, r2, #31
 800bf2c:	bf5c      	itt	pl
 800bf2e:	005b      	lslpl	r3, r3, #1
 800bf30:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bf34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bf38:	bf58      	it	pl
 800bf3a:	0049      	lslpl	r1, r1, #1
 800bf3c:	2600      	movs	r6, #0
 800bf3e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bf42:	107f      	asrs	r7, r7, #1
 800bf44:	0049      	lsls	r1, r1, #1
 800bf46:	2016      	movs	r0, #22
 800bf48:	4632      	mov	r2, r6
 800bf4a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bf4e:	1915      	adds	r5, r2, r4
 800bf50:	429d      	cmp	r5, r3
 800bf52:	bfde      	ittt	le
 800bf54:	192a      	addle	r2, r5, r4
 800bf56:	1b5b      	suble	r3, r3, r5
 800bf58:	1936      	addle	r6, r6, r4
 800bf5a:	0fcd      	lsrs	r5, r1, #31
 800bf5c:	3801      	subs	r0, #1
 800bf5e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800bf62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bf66:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bf6a:	d1f0      	bne.n	800bf4e <__ieee754_sqrt+0xb6>
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	2420      	movs	r4, #32
 800bf70:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bf74:	4293      	cmp	r3, r2
 800bf76:	eb0c 0e00 	add.w	lr, ip, r0
 800bf7a:	dc02      	bgt.n	800bf82 <__ieee754_sqrt+0xea>
 800bf7c:	d113      	bne.n	800bfa6 <__ieee754_sqrt+0x10e>
 800bf7e:	458e      	cmp	lr, r1
 800bf80:	d811      	bhi.n	800bfa6 <__ieee754_sqrt+0x10e>
 800bf82:	f1be 0f00 	cmp.w	lr, #0
 800bf86:	eb0e 000c 	add.w	r0, lr, ip
 800bf8a:	da3f      	bge.n	800c00c <__ieee754_sqrt+0x174>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	db3d      	blt.n	800c00c <__ieee754_sqrt+0x174>
 800bf90:	f102 0801 	add.w	r8, r2, #1
 800bf94:	1a9b      	subs	r3, r3, r2
 800bf96:	458e      	cmp	lr, r1
 800bf98:	bf88      	it	hi
 800bf9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bf9e:	eba1 010e 	sub.w	r1, r1, lr
 800bfa2:	4465      	add	r5, ip
 800bfa4:	4642      	mov	r2, r8
 800bfa6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bfaa:	3c01      	subs	r4, #1
 800bfac:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bfb0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bfb4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bfb8:	d1dc      	bne.n	800bf74 <__ieee754_sqrt+0xdc>
 800bfba:	4319      	orrs	r1, r3
 800bfbc:	d01b      	beq.n	800bff6 <__ieee754_sqrt+0x15e>
 800bfbe:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800c03c <__ieee754_sqrt+0x1a4>
 800bfc2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800c040 <__ieee754_sqrt+0x1a8>
 800bfc6:	e9da 0100 	ldrd	r0, r1, [sl]
 800bfca:	e9db 2300 	ldrd	r2, r3, [fp]
 800bfce:	f7f4 f95b 	bl	8000288 <__aeabi_dsub>
 800bfd2:	e9da 8900 	ldrd	r8, r9, [sl]
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	460b      	mov	r3, r1
 800bfda:	4640      	mov	r0, r8
 800bfdc:	4649      	mov	r1, r9
 800bfde:	f7f4 fd87 	bl	8000af0 <__aeabi_dcmple>
 800bfe2:	b140      	cbz	r0, 800bff6 <__ieee754_sqrt+0x15e>
 800bfe4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800bfe8:	e9da 0100 	ldrd	r0, r1, [sl]
 800bfec:	e9db 2300 	ldrd	r2, r3, [fp]
 800bff0:	d10e      	bne.n	800c010 <__ieee754_sqrt+0x178>
 800bff2:	3601      	adds	r6, #1
 800bff4:	4625      	mov	r5, r4
 800bff6:	1073      	asrs	r3, r6, #1
 800bff8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800bffc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800c000:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800c004:	086b      	lsrs	r3, r5, #1
 800c006:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800c00a:	e759      	b.n	800bec0 <__ieee754_sqrt+0x28>
 800c00c:	4690      	mov	r8, r2
 800c00e:	e7c1      	b.n	800bf94 <__ieee754_sqrt+0xfc>
 800c010:	f7f4 f93c 	bl	800028c <__adddf3>
 800c014:	e9da 8900 	ldrd	r8, r9, [sl]
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	4640      	mov	r0, r8
 800c01e:	4649      	mov	r1, r9
 800c020:	f7f4 fd5c 	bl	8000adc <__aeabi_dcmplt>
 800c024:	b120      	cbz	r0, 800c030 <__ieee754_sqrt+0x198>
 800c026:	1cab      	adds	r3, r5, #2
 800c028:	bf08      	it	eq
 800c02a:	3601      	addeq	r6, #1
 800c02c:	3502      	adds	r5, #2
 800c02e:	e7e2      	b.n	800bff6 <__ieee754_sqrt+0x15e>
 800c030:	1c6b      	adds	r3, r5, #1
 800c032:	f023 0501 	bic.w	r5, r3, #1
 800c036:	e7de      	b.n	800bff6 <__ieee754_sqrt+0x15e>
 800c038:	7ff00000 	.word	0x7ff00000
 800c03c:	0800e3f0 	.word	0x0800e3f0
 800c040:	0800e3e8 	.word	0x0800e3e8

0800c044 <__ieee754_sqrtf>:
 800c044:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c048:	4770      	bx	lr
 800c04a:	0000      	movs	r0, r0
 800c04c:	0000      	movs	r0, r0
	...

0800c050 <__kernel_cos>:
 800c050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c054:	ec57 6b10 	vmov	r6, r7, d0
 800c058:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c05c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c060:	ed8d 1b00 	vstr	d1, [sp]
 800c064:	d206      	bcs.n	800c074 <__kernel_cos+0x24>
 800c066:	4630      	mov	r0, r6
 800c068:	4639      	mov	r1, r7
 800c06a:	f7f4 fd75 	bl	8000b58 <__aeabi_d2iz>
 800c06e:	2800      	cmp	r0, #0
 800c070:	f000 8088 	beq.w	800c184 <__kernel_cos+0x134>
 800c074:	4632      	mov	r2, r6
 800c076:	463b      	mov	r3, r7
 800c078:	4630      	mov	r0, r6
 800c07a:	4639      	mov	r1, r7
 800c07c:	f7f4 fabc 	bl	80005f8 <__aeabi_dmul>
 800c080:	4b51      	ldr	r3, [pc, #324]	@ (800c1c8 <__kernel_cos+0x178>)
 800c082:	2200      	movs	r2, #0
 800c084:	4604      	mov	r4, r0
 800c086:	460d      	mov	r5, r1
 800c088:	f7f4 fab6 	bl	80005f8 <__aeabi_dmul>
 800c08c:	a340      	add	r3, pc, #256	@ (adr r3, 800c190 <__kernel_cos+0x140>)
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	4682      	mov	sl, r0
 800c094:	468b      	mov	fp, r1
 800c096:	4620      	mov	r0, r4
 800c098:	4629      	mov	r1, r5
 800c09a:	f7f4 faad 	bl	80005f8 <__aeabi_dmul>
 800c09e:	a33e      	add	r3, pc, #248	@ (adr r3, 800c198 <__kernel_cos+0x148>)
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	f7f4 f8f2 	bl	800028c <__adddf3>
 800c0a8:	4622      	mov	r2, r4
 800c0aa:	462b      	mov	r3, r5
 800c0ac:	f7f4 faa4 	bl	80005f8 <__aeabi_dmul>
 800c0b0:	a33b      	add	r3, pc, #236	@ (adr r3, 800c1a0 <__kernel_cos+0x150>)
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f7f4 f8e7 	bl	8000288 <__aeabi_dsub>
 800c0ba:	4622      	mov	r2, r4
 800c0bc:	462b      	mov	r3, r5
 800c0be:	f7f4 fa9b 	bl	80005f8 <__aeabi_dmul>
 800c0c2:	a339      	add	r3, pc, #228	@ (adr r3, 800c1a8 <__kernel_cos+0x158>)
 800c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c8:	f7f4 f8e0 	bl	800028c <__adddf3>
 800c0cc:	4622      	mov	r2, r4
 800c0ce:	462b      	mov	r3, r5
 800c0d0:	f7f4 fa92 	bl	80005f8 <__aeabi_dmul>
 800c0d4:	a336      	add	r3, pc, #216	@ (adr r3, 800c1b0 <__kernel_cos+0x160>)
 800c0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0da:	f7f4 f8d5 	bl	8000288 <__aeabi_dsub>
 800c0de:	4622      	mov	r2, r4
 800c0e0:	462b      	mov	r3, r5
 800c0e2:	f7f4 fa89 	bl	80005f8 <__aeabi_dmul>
 800c0e6:	a334      	add	r3, pc, #208	@ (adr r3, 800c1b8 <__kernel_cos+0x168>)
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	f7f4 f8ce 	bl	800028c <__adddf3>
 800c0f0:	4622      	mov	r2, r4
 800c0f2:	462b      	mov	r3, r5
 800c0f4:	f7f4 fa80 	bl	80005f8 <__aeabi_dmul>
 800c0f8:	4622      	mov	r2, r4
 800c0fa:	462b      	mov	r3, r5
 800c0fc:	f7f4 fa7c 	bl	80005f8 <__aeabi_dmul>
 800c100:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c104:	4604      	mov	r4, r0
 800c106:	460d      	mov	r5, r1
 800c108:	4630      	mov	r0, r6
 800c10a:	4639      	mov	r1, r7
 800c10c:	f7f4 fa74 	bl	80005f8 <__aeabi_dmul>
 800c110:	460b      	mov	r3, r1
 800c112:	4602      	mov	r2, r0
 800c114:	4629      	mov	r1, r5
 800c116:	4620      	mov	r0, r4
 800c118:	f7f4 f8b6 	bl	8000288 <__aeabi_dsub>
 800c11c:	4b2b      	ldr	r3, [pc, #172]	@ (800c1cc <__kernel_cos+0x17c>)
 800c11e:	4598      	cmp	r8, r3
 800c120:	4606      	mov	r6, r0
 800c122:	460f      	mov	r7, r1
 800c124:	d810      	bhi.n	800c148 <__kernel_cos+0xf8>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	4650      	mov	r0, sl
 800c12c:	4659      	mov	r1, fp
 800c12e:	f7f4 f8ab 	bl	8000288 <__aeabi_dsub>
 800c132:	460b      	mov	r3, r1
 800c134:	4926      	ldr	r1, [pc, #152]	@ (800c1d0 <__kernel_cos+0x180>)
 800c136:	4602      	mov	r2, r0
 800c138:	2000      	movs	r0, #0
 800c13a:	f7f4 f8a5 	bl	8000288 <__aeabi_dsub>
 800c13e:	ec41 0b10 	vmov	d0, r0, r1
 800c142:	b003      	add	sp, #12
 800c144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c148:	4b22      	ldr	r3, [pc, #136]	@ (800c1d4 <__kernel_cos+0x184>)
 800c14a:	4921      	ldr	r1, [pc, #132]	@ (800c1d0 <__kernel_cos+0x180>)
 800c14c:	4598      	cmp	r8, r3
 800c14e:	bf8c      	ite	hi
 800c150:	4d21      	ldrhi	r5, [pc, #132]	@ (800c1d8 <__kernel_cos+0x188>)
 800c152:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c156:	2400      	movs	r4, #0
 800c158:	4622      	mov	r2, r4
 800c15a:	462b      	mov	r3, r5
 800c15c:	2000      	movs	r0, #0
 800c15e:	f7f4 f893 	bl	8000288 <__aeabi_dsub>
 800c162:	4622      	mov	r2, r4
 800c164:	4680      	mov	r8, r0
 800c166:	4689      	mov	r9, r1
 800c168:	462b      	mov	r3, r5
 800c16a:	4650      	mov	r0, sl
 800c16c:	4659      	mov	r1, fp
 800c16e:	f7f4 f88b 	bl	8000288 <__aeabi_dsub>
 800c172:	4632      	mov	r2, r6
 800c174:	463b      	mov	r3, r7
 800c176:	f7f4 f887 	bl	8000288 <__aeabi_dsub>
 800c17a:	4602      	mov	r2, r0
 800c17c:	460b      	mov	r3, r1
 800c17e:	4640      	mov	r0, r8
 800c180:	4649      	mov	r1, r9
 800c182:	e7da      	b.n	800c13a <__kernel_cos+0xea>
 800c184:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c1c0 <__kernel_cos+0x170>
 800c188:	e7db      	b.n	800c142 <__kernel_cos+0xf2>
 800c18a:	bf00      	nop
 800c18c:	f3af 8000 	nop.w
 800c190:	be8838d4 	.word	0xbe8838d4
 800c194:	bda8fae9 	.word	0xbda8fae9
 800c198:	bdb4b1c4 	.word	0xbdb4b1c4
 800c19c:	3e21ee9e 	.word	0x3e21ee9e
 800c1a0:	809c52ad 	.word	0x809c52ad
 800c1a4:	3e927e4f 	.word	0x3e927e4f
 800c1a8:	19cb1590 	.word	0x19cb1590
 800c1ac:	3efa01a0 	.word	0x3efa01a0
 800c1b0:	16c15177 	.word	0x16c15177
 800c1b4:	3f56c16c 	.word	0x3f56c16c
 800c1b8:	5555554c 	.word	0x5555554c
 800c1bc:	3fa55555 	.word	0x3fa55555
 800c1c0:	00000000 	.word	0x00000000
 800c1c4:	3ff00000 	.word	0x3ff00000
 800c1c8:	3fe00000 	.word	0x3fe00000
 800c1cc:	3fd33332 	.word	0x3fd33332
 800c1d0:	3ff00000 	.word	0x3ff00000
 800c1d4:	3fe90000 	.word	0x3fe90000
 800c1d8:	3fd20000 	.word	0x3fd20000
 800c1dc:	00000000 	.word	0x00000000

0800c1e0 <__kernel_sin>:
 800c1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e4:	ec55 4b10 	vmov	r4, r5, d0
 800c1e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c1ec:	b085      	sub	sp, #20
 800c1ee:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c1f2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c1f6:	4680      	mov	r8, r0
 800c1f8:	d205      	bcs.n	800c206 <__kernel_sin+0x26>
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	f7f4 fcab 	bl	8000b58 <__aeabi_d2iz>
 800c202:	2800      	cmp	r0, #0
 800c204:	d052      	beq.n	800c2ac <__kernel_sin+0xcc>
 800c206:	4622      	mov	r2, r4
 800c208:	462b      	mov	r3, r5
 800c20a:	4620      	mov	r0, r4
 800c20c:	4629      	mov	r1, r5
 800c20e:	f7f4 f9f3 	bl	80005f8 <__aeabi_dmul>
 800c212:	4682      	mov	sl, r0
 800c214:	468b      	mov	fp, r1
 800c216:	4602      	mov	r2, r0
 800c218:	460b      	mov	r3, r1
 800c21a:	4620      	mov	r0, r4
 800c21c:	4629      	mov	r1, r5
 800c21e:	f7f4 f9eb 	bl	80005f8 <__aeabi_dmul>
 800c222:	a342      	add	r3, pc, #264	@ (adr r3, 800c32c <__kernel_sin+0x14c>)
 800c224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c228:	e9cd 0100 	strd	r0, r1, [sp]
 800c22c:	4650      	mov	r0, sl
 800c22e:	4659      	mov	r1, fp
 800c230:	f7f4 f9e2 	bl	80005f8 <__aeabi_dmul>
 800c234:	a33f      	add	r3, pc, #252	@ (adr r3, 800c334 <__kernel_sin+0x154>)
 800c236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23a:	f7f4 f825 	bl	8000288 <__aeabi_dsub>
 800c23e:	4652      	mov	r2, sl
 800c240:	465b      	mov	r3, fp
 800c242:	f7f4 f9d9 	bl	80005f8 <__aeabi_dmul>
 800c246:	a33d      	add	r3, pc, #244	@ (adr r3, 800c33c <__kernel_sin+0x15c>)
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	f7f4 f81e 	bl	800028c <__adddf3>
 800c250:	4652      	mov	r2, sl
 800c252:	465b      	mov	r3, fp
 800c254:	f7f4 f9d0 	bl	80005f8 <__aeabi_dmul>
 800c258:	a33a      	add	r3, pc, #232	@ (adr r3, 800c344 <__kernel_sin+0x164>)
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	f7f4 f813 	bl	8000288 <__aeabi_dsub>
 800c262:	4652      	mov	r2, sl
 800c264:	465b      	mov	r3, fp
 800c266:	f7f4 f9c7 	bl	80005f8 <__aeabi_dmul>
 800c26a:	a338      	add	r3, pc, #224	@ (adr r3, 800c34c <__kernel_sin+0x16c>)
 800c26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c270:	f7f4 f80c 	bl	800028c <__adddf3>
 800c274:	4606      	mov	r6, r0
 800c276:	460f      	mov	r7, r1
 800c278:	f1b8 0f00 	cmp.w	r8, #0
 800c27c:	d11b      	bne.n	800c2b6 <__kernel_sin+0xd6>
 800c27e:	4602      	mov	r2, r0
 800c280:	460b      	mov	r3, r1
 800c282:	4650      	mov	r0, sl
 800c284:	4659      	mov	r1, fp
 800c286:	f7f4 f9b7 	bl	80005f8 <__aeabi_dmul>
 800c28a:	a325      	add	r3, pc, #148	@ (adr r3, 800c320 <__kernel_sin+0x140>)
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	f7f3 fffa 	bl	8000288 <__aeabi_dsub>
 800c294:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c298:	f7f4 f9ae 	bl	80005f8 <__aeabi_dmul>
 800c29c:	4602      	mov	r2, r0
 800c29e:	460b      	mov	r3, r1
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	f7f3 fff2 	bl	800028c <__adddf3>
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	460d      	mov	r5, r1
 800c2ac:	ec45 4b10 	vmov	d0, r4, r5
 800c2b0:	b005      	add	sp, #20
 800c2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2ba:	4b1b      	ldr	r3, [pc, #108]	@ (800c328 <__kernel_sin+0x148>)
 800c2bc:	2200      	movs	r2, #0
 800c2be:	f7f4 f99b 	bl	80005f8 <__aeabi_dmul>
 800c2c2:	4632      	mov	r2, r6
 800c2c4:	4680      	mov	r8, r0
 800c2c6:	4689      	mov	r9, r1
 800c2c8:	463b      	mov	r3, r7
 800c2ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2ce:	f7f4 f993 	bl	80005f8 <__aeabi_dmul>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	4640      	mov	r0, r8
 800c2d8:	4649      	mov	r1, r9
 800c2da:	f7f3 ffd5 	bl	8000288 <__aeabi_dsub>
 800c2de:	4652      	mov	r2, sl
 800c2e0:	465b      	mov	r3, fp
 800c2e2:	f7f4 f989 	bl	80005f8 <__aeabi_dmul>
 800c2e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2ea:	f7f3 ffcd 	bl	8000288 <__aeabi_dsub>
 800c2ee:	a30c      	add	r3, pc, #48	@ (adr r3, 800c320 <__kernel_sin+0x140>)
 800c2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f4:	4606      	mov	r6, r0
 800c2f6:	460f      	mov	r7, r1
 800c2f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2fc:	f7f4 f97c 	bl	80005f8 <__aeabi_dmul>
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	4630      	mov	r0, r6
 800c306:	4639      	mov	r1, r7
 800c308:	f7f3 ffc0 	bl	800028c <__adddf3>
 800c30c:	4602      	mov	r2, r0
 800c30e:	460b      	mov	r3, r1
 800c310:	4620      	mov	r0, r4
 800c312:	4629      	mov	r1, r5
 800c314:	f7f3 ffb8 	bl	8000288 <__aeabi_dsub>
 800c318:	e7c6      	b.n	800c2a8 <__kernel_sin+0xc8>
 800c31a:	bf00      	nop
 800c31c:	f3af 8000 	nop.w
 800c320:	55555549 	.word	0x55555549
 800c324:	3fc55555 	.word	0x3fc55555
 800c328:	3fe00000 	.word	0x3fe00000
 800c32c:	5acfd57c 	.word	0x5acfd57c
 800c330:	3de5d93a 	.word	0x3de5d93a
 800c334:	8a2b9ceb 	.word	0x8a2b9ceb
 800c338:	3e5ae5e6 	.word	0x3e5ae5e6
 800c33c:	57b1fe7d 	.word	0x57b1fe7d
 800c340:	3ec71de3 	.word	0x3ec71de3
 800c344:	19c161d5 	.word	0x19c161d5
 800c348:	3f2a01a0 	.word	0x3f2a01a0
 800c34c:	1110f8a6 	.word	0x1110f8a6
 800c350:	3f811111 	.word	0x3f811111
 800c354:	00000000 	.word	0x00000000

0800c358 <__ieee754_atan2>:
 800c358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c35c:	ec57 6b11 	vmov	r6, r7, d1
 800c360:	4273      	negs	r3, r6
 800c362:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800c4e0 <__ieee754_atan2+0x188>
 800c366:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800c36a:	4333      	orrs	r3, r6
 800c36c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c370:	4543      	cmp	r3, r8
 800c372:	ec51 0b10 	vmov	r0, r1, d0
 800c376:	4635      	mov	r5, r6
 800c378:	d809      	bhi.n	800c38e <__ieee754_atan2+0x36>
 800c37a:	4244      	negs	r4, r0
 800c37c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c380:	4304      	orrs	r4, r0
 800c382:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c386:	4544      	cmp	r4, r8
 800c388:	468e      	mov	lr, r1
 800c38a:	4681      	mov	r9, r0
 800c38c:	d907      	bls.n	800c39e <__ieee754_atan2+0x46>
 800c38e:	4632      	mov	r2, r6
 800c390:	463b      	mov	r3, r7
 800c392:	f7f3 ff7b 	bl	800028c <__adddf3>
 800c396:	ec41 0b10 	vmov	d0, r0, r1
 800c39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c39e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800c3a2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800c3a6:	4334      	orrs	r4, r6
 800c3a8:	d103      	bne.n	800c3b2 <__ieee754_atan2+0x5a>
 800c3aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3ae:	f7ff baff 	b.w	800b9b0 <atan>
 800c3b2:	17bc      	asrs	r4, r7, #30
 800c3b4:	f004 0402 	and.w	r4, r4, #2
 800c3b8:	ea53 0909 	orrs.w	r9, r3, r9
 800c3bc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c3c0:	d107      	bne.n	800c3d2 <__ieee754_atan2+0x7a>
 800c3c2:	2c02      	cmp	r4, #2
 800c3c4:	d05f      	beq.n	800c486 <__ieee754_atan2+0x12e>
 800c3c6:	2c03      	cmp	r4, #3
 800c3c8:	d1e5      	bne.n	800c396 <__ieee754_atan2+0x3e>
 800c3ca:	a143      	add	r1, pc, #268	@ (adr r1, 800c4d8 <__ieee754_atan2+0x180>)
 800c3cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3d0:	e7e1      	b.n	800c396 <__ieee754_atan2+0x3e>
 800c3d2:	4315      	orrs	r5, r2
 800c3d4:	d106      	bne.n	800c3e4 <__ieee754_atan2+0x8c>
 800c3d6:	f1be 0f00 	cmp.w	lr, #0
 800c3da:	db5f      	blt.n	800c49c <__ieee754_atan2+0x144>
 800c3dc:	a136      	add	r1, pc, #216	@ (adr r1, 800c4b8 <__ieee754_atan2+0x160>)
 800c3de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3e2:	e7d8      	b.n	800c396 <__ieee754_atan2+0x3e>
 800c3e4:	4542      	cmp	r2, r8
 800c3e6:	d10f      	bne.n	800c408 <__ieee754_atan2+0xb0>
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	f104 34ff 	add.w	r4, r4, #4294967295
 800c3ee:	d107      	bne.n	800c400 <__ieee754_atan2+0xa8>
 800c3f0:	2c02      	cmp	r4, #2
 800c3f2:	d84c      	bhi.n	800c48e <__ieee754_atan2+0x136>
 800c3f4:	4b36      	ldr	r3, [pc, #216]	@ (800c4d0 <__ieee754_atan2+0x178>)
 800c3f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c3fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3fe:	e7ca      	b.n	800c396 <__ieee754_atan2+0x3e>
 800c400:	2c02      	cmp	r4, #2
 800c402:	d848      	bhi.n	800c496 <__ieee754_atan2+0x13e>
 800c404:	4b33      	ldr	r3, [pc, #204]	@ (800c4d4 <__ieee754_atan2+0x17c>)
 800c406:	e7f6      	b.n	800c3f6 <__ieee754_atan2+0x9e>
 800c408:	4543      	cmp	r3, r8
 800c40a:	d0e4      	beq.n	800c3d6 <__ieee754_atan2+0x7e>
 800c40c:	1a9b      	subs	r3, r3, r2
 800c40e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800c412:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c416:	da1e      	bge.n	800c456 <__ieee754_atan2+0xfe>
 800c418:	2f00      	cmp	r7, #0
 800c41a:	da01      	bge.n	800c420 <__ieee754_atan2+0xc8>
 800c41c:	323c      	adds	r2, #60	@ 0x3c
 800c41e:	db1e      	blt.n	800c45e <__ieee754_atan2+0x106>
 800c420:	4632      	mov	r2, r6
 800c422:	463b      	mov	r3, r7
 800c424:	f7f4 fa12 	bl	800084c <__aeabi_ddiv>
 800c428:	ec41 0b10 	vmov	d0, r0, r1
 800c42c:	f7ff fcac 	bl	800bd88 <fabs>
 800c430:	f7ff fabe 	bl	800b9b0 <atan>
 800c434:	ec51 0b10 	vmov	r0, r1, d0
 800c438:	2c01      	cmp	r4, #1
 800c43a:	d013      	beq.n	800c464 <__ieee754_atan2+0x10c>
 800c43c:	2c02      	cmp	r4, #2
 800c43e:	d015      	beq.n	800c46c <__ieee754_atan2+0x114>
 800c440:	2c00      	cmp	r4, #0
 800c442:	d0a8      	beq.n	800c396 <__ieee754_atan2+0x3e>
 800c444:	a318      	add	r3, pc, #96	@ (adr r3, 800c4a8 <__ieee754_atan2+0x150>)
 800c446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44a:	f7f3 ff1d 	bl	8000288 <__aeabi_dsub>
 800c44e:	a318      	add	r3, pc, #96	@ (adr r3, 800c4b0 <__ieee754_atan2+0x158>)
 800c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c454:	e014      	b.n	800c480 <__ieee754_atan2+0x128>
 800c456:	a118      	add	r1, pc, #96	@ (adr r1, 800c4b8 <__ieee754_atan2+0x160>)
 800c458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c45c:	e7ec      	b.n	800c438 <__ieee754_atan2+0xe0>
 800c45e:	2000      	movs	r0, #0
 800c460:	2100      	movs	r1, #0
 800c462:	e7e9      	b.n	800c438 <__ieee754_atan2+0xe0>
 800c464:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c468:	4619      	mov	r1, r3
 800c46a:	e794      	b.n	800c396 <__ieee754_atan2+0x3e>
 800c46c:	a30e      	add	r3, pc, #56	@ (adr r3, 800c4a8 <__ieee754_atan2+0x150>)
 800c46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c472:	f7f3 ff09 	bl	8000288 <__aeabi_dsub>
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	a10d      	add	r1, pc, #52	@ (adr r1, 800c4b0 <__ieee754_atan2+0x158>)
 800c47c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c480:	f7f3 ff02 	bl	8000288 <__aeabi_dsub>
 800c484:	e787      	b.n	800c396 <__ieee754_atan2+0x3e>
 800c486:	a10a      	add	r1, pc, #40	@ (adr r1, 800c4b0 <__ieee754_atan2+0x158>)
 800c488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c48c:	e783      	b.n	800c396 <__ieee754_atan2+0x3e>
 800c48e:	a10c      	add	r1, pc, #48	@ (adr r1, 800c4c0 <__ieee754_atan2+0x168>)
 800c490:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c494:	e77f      	b.n	800c396 <__ieee754_atan2+0x3e>
 800c496:	2000      	movs	r0, #0
 800c498:	2100      	movs	r1, #0
 800c49a:	e77c      	b.n	800c396 <__ieee754_atan2+0x3e>
 800c49c:	a10a      	add	r1, pc, #40	@ (adr r1, 800c4c8 <__ieee754_atan2+0x170>)
 800c49e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4a2:	e778      	b.n	800c396 <__ieee754_atan2+0x3e>
 800c4a4:	f3af 8000 	nop.w
 800c4a8:	33145c07 	.word	0x33145c07
 800c4ac:	3ca1a626 	.word	0x3ca1a626
 800c4b0:	54442d18 	.word	0x54442d18
 800c4b4:	400921fb 	.word	0x400921fb
 800c4b8:	54442d18 	.word	0x54442d18
 800c4bc:	3ff921fb 	.word	0x3ff921fb
 800c4c0:	54442d18 	.word	0x54442d18
 800c4c4:	3fe921fb 	.word	0x3fe921fb
 800c4c8:	54442d18 	.word	0x54442d18
 800c4cc:	bff921fb 	.word	0xbff921fb
 800c4d0:	0800e410 	.word	0x0800e410
 800c4d4:	0800e3f8 	.word	0x0800e3f8
 800c4d8:	54442d18 	.word	0x54442d18
 800c4dc:	c00921fb 	.word	0xc00921fb
 800c4e0:	7ff00000 	.word	0x7ff00000
 800c4e4:	00000000 	.word	0x00000000

0800c4e8 <__ieee754_pow>:
 800c4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ec:	b091      	sub	sp, #68	@ 0x44
 800c4ee:	ed8d 1b00 	vstr	d1, [sp]
 800c4f2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800c4f6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800c4fa:	ea5a 0001 	orrs.w	r0, sl, r1
 800c4fe:	ec57 6b10 	vmov	r6, r7, d0
 800c502:	d113      	bne.n	800c52c <__ieee754_pow+0x44>
 800c504:	19b3      	adds	r3, r6, r6
 800c506:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800c50a:	4152      	adcs	r2, r2
 800c50c:	4298      	cmp	r0, r3
 800c50e:	4b9a      	ldr	r3, [pc, #616]	@ (800c778 <__ieee754_pow+0x290>)
 800c510:	4193      	sbcs	r3, r2
 800c512:	f080 84ee 	bcs.w	800cef2 <__ieee754_pow+0xa0a>
 800c516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c51a:	4630      	mov	r0, r6
 800c51c:	4639      	mov	r1, r7
 800c51e:	f7f3 feb5 	bl	800028c <__adddf3>
 800c522:	ec41 0b10 	vmov	d0, r0, r1
 800c526:	b011      	add	sp, #68	@ 0x44
 800c528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c52c:	4a93      	ldr	r2, [pc, #588]	@ (800c77c <__ieee754_pow+0x294>)
 800c52e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800c532:	4295      	cmp	r5, r2
 800c534:	46b8      	mov	r8, r7
 800c536:	4633      	mov	r3, r6
 800c538:	d80a      	bhi.n	800c550 <__ieee754_pow+0x68>
 800c53a:	d104      	bne.n	800c546 <__ieee754_pow+0x5e>
 800c53c:	2e00      	cmp	r6, #0
 800c53e:	d1ea      	bne.n	800c516 <__ieee754_pow+0x2e>
 800c540:	45aa      	cmp	sl, r5
 800c542:	d8e8      	bhi.n	800c516 <__ieee754_pow+0x2e>
 800c544:	e001      	b.n	800c54a <__ieee754_pow+0x62>
 800c546:	4592      	cmp	sl, r2
 800c548:	d802      	bhi.n	800c550 <__ieee754_pow+0x68>
 800c54a:	4592      	cmp	sl, r2
 800c54c:	d10f      	bne.n	800c56e <__ieee754_pow+0x86>
 800c54e:	b171      	cbz	r1, 800c56e <__ieee754_pow+0x86>
 800c550:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800c554:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800c558:	ea58 0803 	orrs.w	r8, r8, r3
 800c55c:	d1db      	bne.n	800c516 <__ieee754_pow+0x2e>
 800c55e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c562:	18db      	adds	r3, r3, r3
 800c564:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800c568:	4152      	adcs	r2, r2
 800c56a:	4598      	cmp	r8, r3
 800c56c:	e7cf      	b.n	800c50e <__ieee754_pow+0x26>
 800c56e:	f1b8 0f00 	cmp.w	r8, #0
 800c572:	46ab      	mov	fp, r5
 800c574:	da43      	bge.n	800c5fe <__ieee754_pow+0x116>
 800c576:	4a82      	ldr	r2, [pc, #520]	@ (800c780 <__ieee754_pow+0x298>)
 800c578:	4592      	cmp	sl, r2
 800c57a:	d856      	bhi.n	800c62a <__ieee754_pow+0x142>
 800c57c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800c580:	4592      	cmp	sl, r2
 800c582:	f240 84c5 	bls.w	800cf10 <__ieee754_pow+0xa28>
 800c586:	ea4f 522a 	mov.w	r2, sl, asr #20
 800c58a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c58e:	2a14      	cmp	r2, #20
 800c590:	dd18      	ble.n	800c5c4 <__ieee754_pow+0xdc>
 800c592:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800c596:	fa21 f402 	lsr.w	r4, r1, r2
 800c59a:	fa04 f202 	lsl.w	r2, r4, r2
 800c59e:	428a      	cmp	r2, r1
 800c5a0:	f040 84b6 	bne.w	800cf10 <__ieee754_pow+0xa28>
 800c5a4:	f004 0401 	and.w	r4, r4, #1
 800c5a8:	f1c4 0402 	rsb	r4, r4, #2
 800c5ac:	2900      	cmp	r1, #0
 800c5ae:	d159      	bne.n	800c664 <__ieee754_pow+0x17c>
 800c5b0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800c5b4:	d148      	bne.n	800c648 <__ieee754_pow+0x160>
 800c5b6:	4632      	mov	r2, r6
 800c5b8:	463b      	mov	r3, r7
 800c5ba:	4630      	mov	r0, r6
 800c5bc:	4639      	mov	r1, r7
 800c5be:	f7f4 f81b 	bl	80005f8 <__aeabi_dmul>
 800c5c2:	e7ae      	b.n	800c522 <__ieee754_pow+0x3a>
 800c5c4:	2900      	cmp	r1, #0
 800c5c6:	d14c      	bne.n	800c662 <__ieee754_pow+0x17a>
 800c5c8:	f1c2 0214 	rsb	r2, r2, #20
 800c5cc:	fa4a f402 	asr.w	r4, sl, r2
 800c5d0:	fa04 f202 	lsl.w	r2, r4, r2
 800c5d4:	4552      	cmp	r2, sl
 800c5d6:	f040 8498 	bne.w	800cf0a <__ieee754_pow+0xa22>
 800c5da:	f004 0401 	and.w	r4, r4, #1
 800c5de:	f1c4 0402 	rsb	r4, r4, #2
 800c5e2:	4a68      	ldr	r2, [pc, #416]	@ (800c784 <__ieee754_pow+0x29c>)
 800c5e4:	4592      	cmp	sl, r2
 800c5e6:	d1e3      	bne.n	800c5b0 <__ieee754_pow+0xc8>
 800c5e8:	f1b9 0f00 	cmp.w	r9, #0
 800c5ec:	f280 8489 	bge.w	800cf02 <__ieee754_pow+0xa1a>
 800c5f0:	4964      	ldr	r1, [pc, #400]	@ (800c784 <__ieee754_pow+0x29c>)
 800c5f2:	4632      	mov	r2, r6
 800c5f4:	463b      	mov	r3, r7
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	f7f4 f928 	bl	800084c <__aeabi_ddiv>
 800c5fc:	e791      	b.n	800c522 <__ieee754_pow+0x3a>
 800c5fe:	2400      	movs	r4, #0
 800c600:	bb81      	cbnz	r1, 800c664 <__ieee754_pow+0x17c>
 800c602:	4a5e      	ldr	r2, [pc, #376]	@ (800c77c <__ieee754_pow+0x294>)
 800c604:	4592      	cmp	sl, r2
 800c606:	d1ec      	bne.n	800c5e2 <__ieee754_pow+0xfa>
 800c608:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800c60c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800c610:	431a      	orrs	r2, r3
 800c612:	f000 846e 	beq.w	800cef2 <__ieee754_pow+0xa0a>
 800c616:	4b5c      	ldr	r3, [pc, #368]	@ (800c788 <__ieee754_pow+0x2a0>)
 800c618:	429d      	cmp	r5, r3
 800c61a:	d908      	bls.n	800c62e <__ieee754_pow+0x146>
 800c61c:	f1b9 0f00 	cmp.w	r9, #0
 800c620:	f280 846b 	bge.w	800cefa <__ieee754_pow+0xa12>
 800c624:	2000      	movs	r0, #0
 800c626:	2100      	movs	r1, #0
 800c628:	e77b      	b.n	800c522 <__ieee754_pow+0x3a>
 800c62a:	2402      	movs	r4, #2
 800c62c:	e7e8      	b.n	800c600 <__ieee754_pow+0x118>
 800c62e:	f1b9 0f00 	cmp.w	r9, #0
 800c632:	f04f 0000 	mov.w	r0, #0
 800c636:	f04f 0100 	mov.w	r1, #0
 800c63a:	f6bf af72 	bge.w	800c522 <__ieee754_pow+0x3a>
 800c63e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c642:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c646:	e76c      	b.n	800c522 <__ieee754_pow+0x3a>
 800c648:	4a50      	ldr	r2, [pc, #320]	@ (800c78c <__ieee754_pow+0x2a4>)
 800c64a:	4591      	cmp	r9, r2
 800c64c:	d10a      	bne.n	800c664 <__ieee754_pow+0x17c>
 800c64e:	f1b8 0f00 	cmp.w	r8, #0
 800c652:	db07      	blt.n	800c664 <__ieee754_pow+0x17c>
 800c654:	ec47 6b10 	vmov	d0, r6, r7
 800c658:	b011      	add	sp, #68	@ 0x44
 800c65a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65e:	f7ff bc1b 	b.w	800be98 <__ieee754_sqrt>
 800c662:	2400      	movs	r4, #0
 800c664:	ec47 6b10 	vmov	d0, r6, r7
 800c668:	9302      	str	r3, [sp, #8]
 800c66a:	f7ff fb8d 	bl	800bd88 <fabs>
 800c66e:	9b02      	ldr	r3, [sp, #8]
 800c670:	ec51 0b10 	vmov	r0, r1, d0
 800c674:	bb43      	cbnz	r3, 800c6c8 <__ieee754_pow+0x1e0>
 800c676:	4b43      	ldr	r3, [pc, #268]	@ (800c784 <__ieee754_pow+0x29c>)
 800c678:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d000      	beq.n	800c682 <__ieee754_pow+0x19a>
 800c680:	bb15      	cbnz	r5, 800c6c8 <__ieee754_pow+0x1e0>
 800c682:	f1b9 0f00 	cmp.w	r9, #0
 800c686:	da05      	bge.n	800c694 <__ieee754_pow+0x1ac>
 800c688:	4602      	mov	r2, r0
 800c68a:	460b      	mov	r3, r1
 800c68c:	2000      	movs	r0, #0
 800c68e:	493d      	ldr	r1, [pc, #244]	@ (800c784 <__ieee754_pow+0x29c>)
 800c690:	f7f4 f8dc 	bl	800084c <__aeabi_ddiv>
 800c694:	f1b8 0f00 	cmp.w	r8, #0
 800c698:	f6bf af43 	bge.w	800c522 <__ieee754_pow+0x3a>
 800c69c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800c6a0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800c6a4:	4325      	orrs	r5, r4
 800c6a6:	d108      	bne.n	800c6ba <__ieee754_pow+0x1d2>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	4610      	mov	r0, r2
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	f7f3 fdea 	bl	8000288 <__aeabi_dsub>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	e79e      	b.n	800c5f8 <__ieee754_pow+0x110>
 800c6ba:	2c01      	cmp	r4, #1
 800c6bc:	f47f af31 	bne.w	800c522 <__ieee754_pow+0x3a>
 800c6c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	e72c      	b.n	800c522 <__ieee754_pow+0x3a>
 800c6c8:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800c6cc:	3b01      	subs	r3, #1
 800c6ce:	ea53 0204 	orrs.w	r2, r3, r4
 800c6d2:	d102      	bne.n	800c6da <__ieee754_pow+0x1f2>
 800c6d4:	4632      	mov	r2, r6
 800c6d6:	463b      	mov	r3, r7
 800c6d8:	e7e8      	b.n	800c6ac <__ieee754_pow+0x1c4>
 800c6da:	3c01      	subs	r4, #1
 800c6dc:	431c      	orrs	r4, r3
 800c6de:	d016      	beq.n	800c70e <__ieee754_pow+0x226>
 800c6e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c768 <__ieee754_pow+0x280>
 800c6e4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800c6e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c6ec:	f240 8110 	bls.w	800c910 <__ieee754_pow+0x428>
 800c6f0:	4b27      	ldr	r3, [pc, #156]	@ (800c790 <__ieee754_pow+0x2a8>)
 800c6f2:	459a      	cmp	sl, r3
 800c6f4:	4b24      	ldr	r3, [pc, #144]	@ (800c788 <__ieee754_pow+0x2a0>)
 800c6f6:	d916      	bls.n	800c726 <__ieee754_pow+0x23e>
 800c6f8:	429d      	cmp	r5, r3
 800c6fa:	d80b      	bhi.n	800c714 <__ieee754_pow+0x22c>
 800c6fc:	f1b9 0f00 	cmp.w	r9, #0
 800c700:	da0b      	bge.n	800c71a <__ieee754_pow+0x232>
 800c702:	2000      	movs	r0, #0
 800c704:	b011      	add	sp, #68	@ 0x44
 800c706:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70a:	f001 b861 	b.w	800d7d0 <__math_oflow>
 800c70e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800c770 <__ieee754_pow+0x288>
 800c712:	e7e7      	b.n	800c6e4 <__ieee754_pow+0x1fc>
 800c714:	f1b9 0f00 	cmp.w	r9, #0
 800c718:	dcf3      	bgt.n	800c702 <__ieee754_pow+0x21a>
 800c71a:	2000      	movs	r0, #0
 800c71c:	b011      	add	sp, #68	@ 0x44
 800c71e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c722:	f001 b84d 	b.w	800d7c0 <__math_uflow>
 800c726:	429d      	cmp	r5, r3
 800c728:	d20c      	bcs.n	800c744 <__ieee754_pow+0x25c>
 800c72a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c72e:	2200      	movs	r2, #0
 800c730:	2300      	movs	r3, #0
 800c732:	f7f4 f9d3 	bl	8000adc <__aeabi_dcmplt>
 800c736:	3800      	subs	r0, #0
 800c738:	bf18      	it	ne
 800c73a:	2001      	movne	r0, #1
 800c73c:	f1b9 0f00 	cmp.w	r9, #0
 800c740:	daec      	bge.n	800c71c <__ieee754_pow+0x234>
 800c742:	e7df      	b.n	800c704 <__ieee754_pow+0x21c>
 800c744:	4b0f      	ldr	r3, [pc, #60]	@ (800c784 <__ieee754_pow+0x29c>)
 800c746:	429d      	cmp	r5, r3
 800c748:	f04f 0200 	mov.w	r2, #0
 800c74c:	d922      	bls.n	800c794 <__ieee754_pow+0x2ac>
 800c74e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c752:	2300      	movs	r3, #0
 800c754:	f7f4 f9c2 	bl	8000adc <__aeabi_dcmplt>
 800c758:	3800      	subs	r0, #0
 800c75a:	bf18      	it	ne
 800c75c:	2001      	movne	r0, #1
 800c75e:	f1b9 0f00 	cmp.w	r9, #0
 800c762:	dccf      	bgt.n	800c704 <__ieee754_pow+0x21c>
 800c764:	e7da      	b.n	800c71c <__ieee754_pow+0x234>
 800c766:	bf00      	nop
 800c768:	00000000 	.word	0x00000000
 800c76c:	3ff00000 	.word	0x3ff00000
 800c770:	00000000 	.word	0x00000000
 800c774:	bff00000 	.word	0xbff00000
 800c778:	fff00000 	.word	0xfff00000
 800c77c:	7ff00000 	.word	0x7ff00000
 800c780:	433fffff 	.word	0x433fffff
 800c784:	3ff00000 	.word	0x3ff00000
 800c788:	3fefffff 	.word	0x3fefffff
 800c78c:	3fe00000 	.word	0x3fe00000
 800c790:	43f00000 	.word	0x43f00000
 800c794:	4b5a      	ldr	r3, [pc, #360]	@ (800c900 <__ieee754_pow+0x418>)
 800c796:	f7f3 fd77 	bl	8000288 <__aeabi_dsub>
 800c79a:	a351      	add	r3, pc, #324	@ (adr r3, 800c8e0 <__ieee754_pow+0x3f8>)
 800c79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	460d      	mov	r5, r1
 800c7a4:	f7f3 ff28 	bl	80005f8 <__aeabi_dmul>
 800c7a8:	a34f      	add	r3, pc, #316	@ (adr r3, 800c8e8 <__ieee754_pow+0x400>)
 800c7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	460f      	mov	r7, r1
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	4629      	mov	r1, r5
 800c7b6:	f7f3 ff1f 	bl	80005f8 <__aeabi_dmul>
 800c7ba:	4b52      	ldr	r3, [pc, #328]	@ (800c904 <__ieee754_pow+0x41c>)
 800c7bc:	4682      	mov	sl, r0
 800c7be:	468b      	mov	fp, r1
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	f7f3 ff17 	bl	80005f8 <__aeabi_dmul>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	a148      	add	r1, pc, #288	@ (adr r1, 800c8f0 <__ieee754_pow+0x408>)
 800c7d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7d4:	f7f3 fd58 	bl	8000288 <__aeabi_dsub>
 800c7d8:	4622      	mov	r2, r4
 800c7da:	462b      	mov	r3, r5
 800c7dc:	f7f3 ff0c 	bl	80005f8 <__aeabi_dmul>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	4948      	ldr	r1, [pc, #288]	@ (800c908 <__ieee754_pow+0x420>)
 800c7e8:	f7f3 fd4e 	bl	8000288 <__aeabi_dsub>
 800c7ec:	4622      	mov	r2, r4
 800c7ee:	4680      	mov	r8, r0
 800c7f0:	4689      	mov	r9, r1
 800c7f2:	462b      	mov	r3, r5
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	f7f3 fefe 	bl	80005f8 <__aeabi_dmul>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
 800c800:	4640      	mov	r0, r8
 800c802:	4649      	mov	r1, r9
 800c804:	f7f3 fef8 	bl	80005f8 <__aeabi_dmul>
 800c808:	a33b      	add	r3, pc, #236	@ (adr r3, 800c8f8 <__ieee754_pow+0x410>)
 800c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80e:	f7f3 fef3 	bl	80005f8 <__aeabi_dmul>
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	4650      	mov	r0, sl
 800c818:	4659      	mov	r1, fp
 800c81a:	f7f3 fd35 	bl	8000288 <__aeabi_dsub>
 800c81e:	4602      	mov	r2, r0
 800c820:	460b      	mov	r3, r1
 800c822:	4680      	mov	r8, r0
 800c824:	4689      	mov	r9, r1
 800c826:	4630      	mov	r0, r6
 800c828:	4639      	mov	r1, r7
 800c82a:	f7f3 fd2f 	bl	800028c <__adddf3>
 800c82e:	2400      	movs	r4, #0
 800c830:	4632      	mov	r2, r6
 800c832:	463b      	mov	r3, r7
 800c834:	4620      	mov	r0, r4
 800c836:	460d      	mov	r5, r1
 800c838:	f7f3 fd26 	bl	8000288 <__aeabi_dsub>
 800c83c:	4602      	mov	r2, r0
 800c83e:	460b      	mov	r3, r1
 800c840:	4640      	mov	r0, r8
 800c842:	4649      	mov	r1, r9
 800c844:	f7f3 fd20 	bl	8000288 <__aeabi_dsub>
 800c848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c84c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c850:	2300      	movs	r3, #0
 800c852:	9304      	str	r3, [sp, #16]
 800c854:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c858:	4606      	mov	r6, r0
 800c85a:	460f      	mov	r7, r1
 800c85c:	465b      	mov	r3, fp
 800c85e:	4652      	mov	r2, sl
 800c860:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c864:	f7f3 fd10 	bl	8000288 <__aeabi_dsub>
 800c868:	4622      	mov	r2, r4
 800c86a:	462b      	mov	r3, r5
 800c86c:	f7f3 fec4 	bl	80005f8 <__aeabi_dmul>
 800c870:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c874:	4680      	mov	r8, r0
 800c876:	4689      	mov	r9, r1
 800c878:	4630      	mov	r0, r6
 800c87a:	4639      	mov	r1, r7
 800c87c:	f7f3 febc 	bl	80005f8 <__aeabi_dmul>
 800c880:	4602      	mov	r2, r0
 800c882:	460b      	mov	r3, r1
 800c884:	4640      	mov	r0, r8
 800c886:	4649      	mov	r1, r9
 800c888:	f7f3 fd00 	bl	800028c <__adddf3>
 800c88c:	465b      	mov	r3, fp
 800c88e:	4606      	mov	r6, r0
 800c890:	460f      	mov	r7, r1
 800c892:	4652      	mov	r2, sl
 800c894:	4620      	mov	r0, r4
 800c896:	4629      	mov	r1, r5
 800c898:	f7f3 feae 	bl	80005f8 <__aeabi_dmul>
 800c89c:	460b      	mov	r3, r1
 800c89e:	4602      	mov	r2, r0
 800c8a0:	4680      	mov	r8, r0
 800c8a2:	4689      	mov	r9, r1
 800c8a4:	4630      	mov	r0, r6
 800c8a6:	4639      	mov	r1, r7
 800c8a8:	f7f3 fcf0 	bl	800028c <__adddf3>
 800c8ac:	4b17      	ldr	r3, [pc, #92]	@ (800c90c <__ieee754_pow+0x424>)
 800c8ae:	4299      	cmp	r1, r3
 800c8b0:	4604      	mov	r4, r0
 800c8b2:	460d      	mov	r5, r1
 800c8b4:	468b      	mov	fp, r1
 800c8b6:	f340 820b 	ble.w	800ccd0 <__ieee754_pow+0x7e8>
 800c8ba:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800c8be:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800c8c2:	4303      	orrs	r3, r0
 800c8c4:	f000 81ea 	beq.w	800cc9c <__ieee754_pow+0x7b4>
 800c8c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	f7f4 f904 	bl	8000adc <__aeabi_dcmplt>
 800c8d4:	3800      	subs	r0, #0
 800c8d6:	bf18      	it	ne
 800c8d8:	2001      	movne	r0, #1
 800c8da:	e713      	b.n	800c704 <__ieee754_pow+0x21c>
 800c8dc:	f3af 8000 	nop.w
 800c8e0:	60000000 	.word	0x60000000
 800c8e4:	3ff71547 	.word	0x3ff71547
 800c8e8:	f85ddf44 	.word	0xf85ddf44
 800c8ec:	3e54ae0b 	.word	0x3e54ae0b
 800c8f0:	55555555 	.word	0x55555555
 800c8f4:	3fd55555 	.word	0x3fd55555
 800c8f8:	652b82fe 	.word	0x652b82fe
 800c8fc:	3ff71547 	.word	0x3ff71547
 800c900:	3ff00000 	.word	0x3ff00000
 800c904:	3fd00000 	.word	0x3fd00000
 800c908:	3fe00000 	.word	0x3fe00000
 800c90c:	408fffff 	.word	0x408fffff
 800c910:	4bd5      	ldr	r3, [pc, #852]	@ (800cc68 <__ieee754_pow+0x780>)
 800c912:	ea08 0303 	and.w	r3, r8, r3
 800c916:	2200      	movs	r2, #0
 800c918:	b92b      	cbnz	r3, 800c926 <__ieee754_pow+0x43e>
 800c91a:	4bd4      	ldr	r3, [pc, #848]	@ (800cc6c <__ieee754_pow+0x784>)
 800c91c:	f7f3 fe6c 	bl	80005f8 <__aeabi_dmul>
 800c920:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800c924:	468b      	mov	fp, r1
 800c926:	ea4f 532b 	mov.w	r3, fp, asr #20
 800c92a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c92e:	4413      	add	r3, r2
 800c930:	930a      	str	r3, [sp, #40]	@ 0x28
 800c932:	4bcf      	ldr	r3, [pc, #828]	@ (800cc70 <__ieee754_pow+0x788>)
 800c934:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800c938:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800c93c:	459b      	cmp	fp, r3
 800c93e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c942:	dd08      	ble.n	800c956 <__ieee754_pow+0x46e>
 800c944:	4bcb      	ldr	r3, [pc, #812]	@ (800cc74 <__ieee754_pow+0x78c>)
 800c946:	459b      	cmp	fp, r3
 800c948:	f340 81a5 	ble.w	800cc96 <__ieee754_pow+0x7ae>
 800c94c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c94e:	3301      	adds	r3, #1
 800c950:	930a      	str	r3, [sp, #40]	@ 0x28
 800c952:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c956:	f04f 0a00 	mov.w	sl, #0
 800c95a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c95e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c960:	4bc5      	ldr	r3, [pc, #788]	@ (800cc78 <__ieee754_pow+0x790>)
 800c962:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c966:	ed93 7b00 	vldr	d7, [r3]
 800c96a:	4629      	mov	r1, r5
 800c96c:	ec53 2b17 	vmov	r2, r3, d7
 800c970:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c974:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c978:	f7f3 fc86 	bl	8000288 <__aeabi_dsub>
 800c97c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c980:	4606      	mov	r6, r0
 800c982:	460f      	mov	r7, r1
 800c984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c988:	f7f3 fc80 	bl	800028c <__adddf3>
 800c98c:	4602      	mov	r2, r0
 800c98e:	460b      	mov	r3, r1
 800c990:	2000      	movs	r0, #0
 800c992:	49ba      	ldr	r1, [pc, #744]	@ (800cc7c <__ieee754_pow+0x794>)
 800c994:	f7f3 ff5a 	bl	800084c <__aeabi_ddiv>
 800c998:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c99c:	4602      	mov	r2, r0
 800c99e:	460b      	mov	r3, r1
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	4639      	mov	r1, r7
 800c9a4:	f7f3 fe28 	bl	80005f8 <__aeabi_dmul>
 800c9a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9ac:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800c9b0:	106d      	asrs	r5, r5, #1
 800c9b2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800c9b6:	f04f 0b00 	mov.w	fp, #0
 800c9ba:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800c9be:	4661      	mov	r1, ip
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c9c6:	4658      	mov	r0, fp
 800c9c8:	46e1      	mov	r9, ip
 800c9ca:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800c9ce:	4614      	mov	r4, r2
 800c9d0:	461d      	mov	r5, r3
 800c9d2:	f7f3 fe11 	bl	80005f8 <__aeabi_dmul>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	460b      	mov	r3, r1
 800c9da:	4630      	mov	r0, r6
 800c9dc:	4639      	mov	r1, r7
 800c9de:	f7f3 fc53 	bl	8000288 <__aeabi_dsub>
 800c9e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9e6:	4606      	mov	r6, r0
 800c9e8:	460f      	mov	r7, r1
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	f7f3 fc4b 	bl	8000288 <__aeabi_dsub>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c9fa:	f7f3 fc45 	bl	8000288 <__aeabi_dsub>
 800c9fe:	465a      	mov	r2, fp
 800ca00:	464b      	mov	r3, r9
 800ca02:	f7f3 fdf9 	bl	80005f8 <__aeabi_dmul>
 800ca06:	4602      	mov	r2, r0
 800ca08:	460b      	mov	r3, r1
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	4639      	mov	r1, r7
 800ca0e:	f7f3 fc3b 	bl	8000288 <__aeabi_dsub>
 800ca12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ca16:	f7f3 fdef 	bl	80005f8 <__aeabi_dmul>
 800ca1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ca22:	4610      	mov	r0, r2
 800ca24:	4619      	mov	r1, r3
 800ca26:	f7f3 fde7 	bl	80005f8 <__aeabi_dmul>
 800ca2a:	a37d      	add	r3, pc, #500	@ (adr r3, 800cc20 <__ieee754_pow+0x738>)
 800ca2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca30:	4604      	mov	r4, r0
 800ca32:	460d      	mov	r5, r1
 800ca34:	f7f3 fde0 	bl	80005f8 <__aeabi_dmul>
 800ca38:	a37b      	add	r3, pc, #492	@ (adr r3, 800cc28 <__ieee754_pow+0x740>)
 800ca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3e:	f7f3 fc25 	bl	800028c <__adddf3>
 800ca42:	4622      	mov	r2, r4
 800ca44:	462b      	mov	r3, r5
 800ca46:	f7f3 fdd7 	bl	80005f8 <__aeabi_dmul>
 800ca4a:	a379      	add	r3, pc, #484	@ (adr r3, 800cc30 <__ieee754_pow+0x748>)
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	f7f3 fc1c 	bl	800028c <__adddf3>
 800ca54:	4622      	mov	r2, r4
 800ca56:	462b      	mov	r3, r5
 800ca58:	f7f3 fdce 	bl	80005f8 <__aeabi_dmul>
 800ca5c:	a376      	add	r3, pc, #472	@ (adr r3, 800cc38 <__ieee754_pow+0x750>)
 800ca5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca62:	f7f3 fc13 	bl	800028c <__adddf3>
 800ca66:	4622      	mov	r2, r4
 800ca68:	462b      	mov	r3, r5
 800ca6a:	f7f3 fdc5 	bl	80005f8 <__aeabi_dmul>
 800ca6e:	a374      	add	r3, pc, #464	@ (adr r3, 800cc40 <__ieee754_pow+0x758>)
 800ca70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca74:	f7f3 fc0a 	bl	800028c <__adddf3>
 800ca78:	4622      	mov	r2, r4
 800ca7a:	462b      	mov	r3, r5
 800ca7c:	f7f3 fdbc 	bl	80005f8 <__aeabi_dmul>
 800ca80:	a371      	add	r3, pc, #452	@ (adr r3, 800cc48 <__ieee754_pow+0x760>)
 800ca82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca86:	f7f3 fc01 	bl	800028c <__adddf3>
 800ca8a:	4622      	mov	r2, r4
 800ca8c:	4606      	mov	r6, r0
 800ca8e:	460f      	mov	r7, r1
 800ca90:	462b      	mov	r3, r5
 800ca92:	4620      	mov	r0, r4
 800ca94:	4629      	mov	r1, r5
 800ca96:	f7f3 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	4630      	mov	r0, r6
 800caa0:	4639      	mov	r1, r7
 800caa2:	f7f3 fda9 	bl	80005f8 <__aeabi_dmul>
 800caa6:	465a      	mov	r2, fp
 800caa8:	4604      	mov	r4, r0
 800caaa:	460d      	mov	r5, r1
 800caac:	464b      	mov	r3, r9
 800caae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cab2:	f7f3 fbeb 	bl	800028c <__adddf3>
 800cab6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800caba:	f7f3 fd9d 	bl	80005f8 <__aeabi_dmul>
 800cabe:	4622      	mov	r2, r4
 800cac0:	462b      	mov	r3, r5
 800cac2:	f7f3 fbe3 	bl	800028c <__adddf3>
 800cac6:	465a      	mov	r2, fp
 800cac8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cacc:	464b      	mov	r3, r9
 800cace:	4658      	mov	r0, fp
 800cad0:	4649      	mov	r1, r9
 800cad2:	f7f3 fd91 	bl	80005f8 <__aeabi_dmul>
 800cad6:	4b6a      	ldr	r3, [pc, #424]	@ (800cc80 <__ieee754_pow+0x798>)
 800cad8:	2200      	movs	r2, #0
 800cada:	4606      	mov	r6, r0
 800cadc:	460f      	mov	r7, r1
 800cade:	f7f3 fbd5 	bl	800028c <__adddf3>
 800cae2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cae6:	f7f3 fbd1 	bl	800028c <__adddf3>
 800caea:	46d8      	mov	r8, fp
 800caec:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800caf0:	460d      	mov	r5, r1
 800caf2:	465a      	mov	r2, fp
 800caf4:	460b      	mov	r3, r1
 800caf6:	4640      	mov	r0, r8
 800caf8:	4649      	mov	r1, r9
 800cafa:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800cafe:	f7f3 fd7b 	bl	80005f8 <__aeabi_dmul>
 800cb02:	465c      	mov	r4, fp
 800cb04:	4680      	mov	r8, r0
 800cb06:	4689      	mov	r9, r1
 800cb08:	4b5d      	ldr	r3, [pc, #372]	@ (800cc80 <__ieee754_pow+0x798>)
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	4620      	mov	r0, r4
 800cb0e:	4629      	mov	r1, r5
 800cb10:	f7f3 fbba 	bl	8000288 <__aeabi_dsub>
 800cb14:	4632      	mov	r2, r6
 800cb16:	463b      	mov	r3, r7
 800cb18:	f7f3 fbb6 	bl	8000288 <__aeabi_dsub>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb24:	f7f3 fbb0 	bl	8000288 <__aeabi_dsub>
 800cb28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb2c:	f7f3 fd64 	bl	80005f8 <__aeabi_dmul>
 800cb30:	4622      	mov	r2, r4
 800cb32:	4606      	mov	r6, r0
 800cb34:	460f      	mov	r7, r1
 800cb36:	462b      	mov	r3, r5
 800cb38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb3c:	f7f3 fd5c 	bl	80005f8 <__aeabi_dmul>
 800cb40:	4602      	mov	r2, r0
 800cb42:	460b      	mov	r3, r1
 800cb44:	4630      	mov	r0, r6
 800cb46:	4639      	mov	r1, r7
 800cb48:	f7f3 fba0 	bl	800028c <__adddf3>
 800cb4c:	4606      	mov	r6, r0
 800cb4e:	460f      	mov	r7, r1
 800cb50:	4602      	mov	r2, r0
 800cb52:	460b      	mov	r3, r1
 800cb54:	4640      	mov	r0, r8
 800cb56:	4649      	mov	r1, r9
 800cb58:	f7f3 fb98 	bl	800028c <__adddf3>
 800cb5c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800cb60:	a33b      	add	r3, pc, #236	@ (adr r3, 800cc50 <__ieee754_pow+0x768>)
 800cb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb66:	4658      	mov	r0, fp
 800cb68:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800cb6c:	460d      	mov	r5, r1
 800cb6e:	f7f3 fd43 	bl	80005f8 <__aeabi_dmul>
 800cb72:	465c      	mov	r4, fp
 800cb74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb78:	4642      	mov	r2, r8
 800cb7a:	464b      	mov	r3, r9
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	4629      	mov	r1, r5
 800cb80:	f7f3 fb82 	bl	8000288 <__aeabi_dsub>
 800cb84:	4602      	mov	r2, r0
 800cb86:	460b      	mov	r3, r1
 800cb88:	4630      	mov	r0, r6
 800cb8a:	4639      	mov	r1, r7
 800cb8c:	f7f3 fb7c 	bl	8000288 <__aeabi_dsub>
 800cb90:	a331      	add	r3, pc, #196	@ (adr r3, 800cc58 <__ieee754_pow+0x770>)
 800cb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb96:	f7f3 fd2f 	bl	80005f8 <__aeabi_dmul>
 800cb9a:	a331      	add	r3, pc, #196	@ (adr r3, 800cc60 <__ieee754_pow+0x778>)
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	4606      	mov	r6, r0
 800cba2:	460f      	mov	r7, r1
 800cba4:	4620      	mov	r0, r4
 800cba6:	4629      	mov	r1, r5
 800cba8:	f7f3 fd26 	bl	80005f8 <__aeabi_dmul>
 800cbac:	4602      	mov	r2, r0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	4630      	mov	r0, r6
 800cbb2:	4639      	mov	r1, r7
 800cbb4:	f7f3 fb6a 	bl	800028c <__adddf3>
 800cbb8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cbba:	4b32      	ldr	r3, [pc, #200]	@ (800cc84 <__ieee754_pow+0x79c>)
 800cbbc:	4413      	add	r3, r2
 800cbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc2:	f7f3 fb63 	bl	800028c <__adddf3>
 800cbc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cbca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cbcc:	f7f3 fcaa 	bl	8000524 <__aeabi_i2d>
 800cbd0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cbd2:	4b2d      	ldr	r3, [pc, #180]	@ (800cc88 <__ieee754_pow+0x7a0>)
 800cbd4:	4413      	add	r3, r2
 800cbd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cbda:	4606      	mov	r6, r0
 800cbdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cbe0:	460f      	mov	r7, r1
 800cbe2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cbe6:	f7f3 fb51 	bl	800028c <__adddf3>
 800cbea:	4642      	mov	r2, r8
 800cbec:	464b      	mov	r3, r9
 800cbee:	f7f3 fb4d 	bl	800028c <__adddf3>
 800cbf2:	4632      	mov	r2, r6
 800cbf4:	463b      	mov	r3, r7
 800cbf6:	f7f3 fb49 	bl	800028c <__adddf3>
 800cbfa:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800cbfe:	4632      	mov	r2, r6
 800cc00:	463b      	mov	r3, r7
 800cc02:	4658      	mov	r0, fp
 800cc04:	460d      	mov	r5, r1
 800cc06:	f7f3 fb3f 	bl	8000288 <__aeabi_dsub>
 800cc0a:	4642      	mov	r2, r8
 800cc0c:	464b      	mov	r3, r9
 800cc0e:	f7f3 fb3b 	bl	8000288 <__aeabi_dsub>
 800cc12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc16:	f7f3 fb37 	bl	8000288 <__aeabi_dsub>
 800cc1a:	465c      	mov	r4, fp
 800cc1c:	e036      	b.n	800cc8c <__ieee754_pow+0x7a4>
 800cc1e:	bf00      	nop
 800cc20:	4a454eef 	.word	0x4a454eef
 800cc24:	3fca7e28 	.word	0x3fca7e28
 800cc28:	93c9db65 	.word	0x93c9db65
 800cc2c:	3fcd864a 	.word	0x3fcd864a
 800cc30:	a91d4101 	.word	0xa91d4101
 800cc34:	3fd17460 	.word	0x3fd17460
 800cc38:	518f264d 	.word	0x518f264d
 800cc3c:	3fd55555 	.word	0x3fd55555
 800cc40:	db6fabff 	.word	0xdb6fabff
 800cc44:	3fdb6db6 	.word	0x3fdb6db6
 800cc48:	33333303 	.word	0x33333303
 800cc4c:	3fe33333 	.word	0x3fe33333
 800cc50:	e0000000 	.word	0xe0000000
 800cc54:	3feec709 	.word	0x3feec709
 800cc58:	dc3a03fd 	.word	0xdc3a03fd
 800cc5c:	3feec709 	.word	0x3feec709
 800cc60:	145b01f5 	.word	0x145b01f5
 800cc64:	be3e2fe0 	.word	0xbe3e2fe0
 800cc68:	7ff00000 	.word	0x7ff00000
 800cc6c:	43400000 	.word	0x43400000
 800cc70:	0003988e 	.word	0x0003988e
 800cc74:	000bb679 	.word	0x000bb679
 800cc78:	0800e448 	.word	0x0800e448
 800cc7c:	3ff00000 	.word	0x3ff00000
 800cc80:	40080000 	.word	0x40080000
 800cc84:	0800e428 	.word	0x0800e428
 800cc88:	0800e438 	.word	0x0800e438
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc94:	e5d6      	b.n	800c844 <__ieee754_pow+0x35c>
 800cc96:	f04f 0a01 	mov.w	sl, #1
 800cc9a:	e65e      	b.n	800c95a <__ieee754_pow+0x472>
 800cc9c:	a3b5      	add	r3, pc, #724	@ (adr r3, 800cf74 <__ieee754_pow+0xa8c>)
 800cc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca2:	4630      	mov	r0, r6
 800cca4:	4639      	mov	r1, r7
 800cca6:	f7f3 faf1 	bl	800028c <__adddf3>
 800ccaa:	4642      	mov	r2, r8
 800ccac:	e9cd 0100 	strd	r0, r1, [sp]
 800ccb0:	464b      	mov	r3, r9
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	f7f3 fae7 	bl	8000288 <__aeabi_dsub>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccc2:	f7f3 ff29 	bl	8000b18 <__aeabi_dcmpgt>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	f47f adfe 	bne.w	800c8c8 <__ieee754_pow+0x3e0>
 800cccc:	4ba2      	ldr	r3, [pc, #648]	@ (800cf58 <__ieee754_pow+0xa70>)
 800ccce:	e022      	b.n	800cd16 <__ieee754_pow+0x82e>
 800ccd0:	4ca2      	ldr	r4, [pc, #648]	@ (800cf5c <__ieee754_pow+0xa74>)
 800ccd2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ccd6:	42a3      	cmp	r3, r4
 800ccd8:	d919      	bls.n	800cd0e <__ieee754_pow+0x826>
 800ccda:	4ba1      	ldr	r3, [pc, #644]	@ (800cf60 <__ieee754_pow+0xa78>)
 800ccdc:	440b      	add	r3, r1
 800ccde:	4303      	orrs	r3, r0
 800cce0:	d009      	beq.n	800ccf6 <__ieee754_pow+0x80e>
 800cce2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cce6:	2200      	movs	r2, #0
 800cce8:	2300      	movs	r3, #0
 800ccea:	f7f3 fef7 	bl	8000adc <__aeabi_dcmplt>
 800ccee:	3800      	subs	r0, #0
 800ccf0:	bf18      	it	ne
 800ccf2:	2001      	movne	r0, #1
 800ccf4:	e512      	b.n	800c71c <__ieee754_pow+0x234>
 800ccf6:	4642      	mov	r2, r8
 800ccf8:	464b      	mov	r3, r9
 800ccfa:	f7f3 fac5 	bl	8000288 <__aeabi_dsub>
 800ccfe:	4632      	mov	r2, r6
 800cd00:	463b      	mov	r3, r7
 800cd02:	f7f3 feff 	bl	8000b04 <__aeabi_dcmpge>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d1eb      	bne.n	800cce2 <__ieee754_pow+0x7fa>
 800cd0a:	4b96      	ldr	r3, [pc, #600]	@ (800cf64 <__ieee754_pow+0xa7c>)
 800cd0c:	e003      	b.n	800cd16 <__ieee754_pow+0x82e>
 800cd0e:	4a96      	ldr	r2, [pc, #600]	@ (800cf68 <__ieee754_pow+0xa80>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	f240 80e7 	bls.w	800cee4 <__ieee754_pow+0x9fc>
 800cd16:	151b      	asrs	r3, r3, #20
 800cd18:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800cd1c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800cd20:	fa4a fa03 	asr.w	sl, sl, r3
 800cd24:	44da      	add	sl, fp
 800cd26:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cd2a:	4890      	ldr	r0, [pc, #576]	@ (800cf6c <__ieee754_pow+0xa84>)
 800cd2c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800cd30:	4108      	asrs	r0, r1
 800cd32:	ea00 030a 	and.w	r3, r0, sl
 800cd36:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cd3a:	f1c1 0114 	rsb	r1, r1, #20
 800cd3e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800cd42:	fa4a fa01 	asr.w	sl, sl, r1
 800cd46:	f1bb 0f00 	cmp.w	fp, #0
 800cd4a:	4640      	mov	r0, r8
 800cd4c:	4649      	mov	r1, r9
 800cd4e:	f04f 0200 	mov.w	r2, #0
 800cd52:	bfb8      	it	lt
 800cd54:	f1ca 0a00 	rsblt	sl, sl, #0
 800cd58:	f7f3 fa96 	bl	8000288 <__aeabi_dsub>
 800cd5c:	4680      	mov	r8, r0
 800cd5e:	4689      	mov	r9, r1
 800cd60:	4632      	mov	r2, r6
 800cd62:	463b      	mov	r3, r7
 800cd64:	4640      	mov	r0, r8
 800cd66:	4649      	mov	r1, r9
 800cd68:	f7f3 fa90 	bl	800028c <__adddf3>
 800cd6c:	2400      	movs	r4, #0
 800cd6e:	a36a      	add	r3, pc, #424	@ (adr r3, 800cf18 <__ieee754_pow+0xa30>)
 800cd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd74:	4620      	mov	r0, r4
 800cd76:	460d      	mov	r5, r1
 800cd78:	f7f3 fc3e 	bl	80005f8 <__aeabi_dmul>
 800cd7c:	4642      	mov	r2, r8
 800cd7e:	e9cd 0100 	strd	r0, r1, [sp]
 800cd82:	464b      	mov	r3, r9
 800cd84:	4620      	mov	r0, r4
 800cd86:	4629      	mov	r1, r5
 800cd88:	f7f3 fa7e 	bl	8000288 <__aeabi_dsub>
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	460b      	mov	r3, r1
 800cd90:	4630      	mov	r0, r6
 800cd92:	4639      	mov	r1, r7
 800cd94:	f7f3 fa78 	bl	8000288 <__aeabi_dsub>
 800cd98:	a361      	add	r3, pc, #388	@ (adr r3, 800cf20 <__ieee754_pow+0xa38>)
 800cd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9e:	f7f3 fc2b 	bl	80005f8 <__aeabi_dmul>
 800cda2:	a361      	add	r3, pc, #388	@ (adr r3, 800cf28 <__ieee754_pow+0xa40>)
 800cda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda8:	4680      	mov	r8, r0
 800cdaa:	4689      	mov	r9, r1
 800cdac:	4620      	mov	r0, r4
 800cdae:	4629      	mov	r1, r5
 800cdb0:	f7f3 fc22 	bl	80005f8 <__aeabi_dmul>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	4640      	mov	r0, r8
 800cdba:	4649      	mov	r1, r9
 800cdbc:	f7f3 fa66 	bl	800028c <__adddf3>
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	460d      	mov	r5, r1
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdcc:	f7f3 fa5e 	bl	800028c <__adddf3>
 800cdd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdd4:	4680      	mov	r8, r0
 800cdd6:	4689      	mov	r9, r1
 800cdd8:	f7f3 fa56 	bl	8000288 <__aeabi_dsub>
 800cddc:	4602      	mov	r2, r0
 800cdde:	460b      	mov	r3, r1
 800cde0:	4620      	mov	r0, r4
 800cde2:	4629      	mov	r1, r5
 800cde4:	f7f3 fa50 	bl	8000288 <__aeabi_dsub>
 800cde8:	4642      	mov	r2, r8
 800cdea:	4606      	mov	r6, r0
 800cdec:	460f      	mov	r7, r1
 800cdee:	464b      	mov	r3, r9
 800cdf0:	4640      	mov	r0, r8
 800cdf2:	4649      	mov	r1, r9
 800cdf4:	f7f3 fc00 	bl	80005f8 <__aeabi_dmul>
 800cdf8:	a34d      	add	r3, pc, #308	@ (adr r3, 800cf30 <__ieee754_pow+0xa48>)
 800cdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfe:	4604      	mov	r4, r0
 800ce00:	460d      	mov	r5, r1
 800ce02:	f7f3 fbf9 	bl	80005f8 <__aeabi_dmul>
 800ce06:	a34c      	add	r3, pc, #304	@ (adr r3, 800cf38 <__ieee754_pow+0xa50>)
 800ce08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0c:	f7f3 fa3c 	bl	8000288 <__aeabi_dsub>
 800ce10:	4622      	mov	r2, r4
 800ce12:	462b      	mov	r3, r5
 800ce14:	f7f3 fbf0 	bl	80005f8 <__aeabi_dmul>
 800ce18:	a349      	add	r3, pc, #292	@ (adr r3, 800cf40 <__ieee754_pow+0xa58>)
 800ce1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1e:	f7f3 fa35 	bl	800028c <__adddf3>
 800ce22:	4622      	mov	r2, r4
 800ce24:	462b      	mov	r3, r5
 800ce26:	f7f3 fbe7 	bl	80005f8 <__aeabi_dmul>
 800ce2a:	a347      	add	r3, pc, #284	@ (adr r3, 800cf48 <__ieee754_pow+0xa60>)
 800ce2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce30:	f7f3 fa2a 	bl	8000288 <__aeabi_dsub>
 800ce34:	4622      	mov	r2, r4
 800ce36:	462b      	mov	r3, r5
 800ce38:	f7f3 fbde 	bl	80005f8 <__aeabi_dmul>
 800ce3c:	a344      	add	r3, pc, #272	@ (adr r3, 800cf50 <__ieee754_pow+0xa68>)
 800ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce42:	f7f3 fa23 	bl	800028c <__adddf3>
 800ce46:	4622      	mov	r2, r4
 800ce48:	462b      	mov	r3, r5
 800ce4a:	f7f3 fbd5 	bl	80005f8 <__aeabi_dmul>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	460b      	mov	r3, r1
 800ce52:	4640      	mov	r0, r8
 800ce54:	4649      	mov	r1, r9
 800ce56:	f7f3 fa17 	bl	8000288 <__aeabi_dsub>
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	460d      	mov	r5, r1
 800ce5e:	4602      	mov	r2, r0
 800ce60:	460b      	mov	r3, r1
 800ce62:	4640      	mov	r0, r8
 800ce64:	4649      	mov	r1, r9
 800ce66:	f7f3 fbc7 	bl	80005f8 <__aeabi_dmul>
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	e9cd 0100 	strd	r0, r1, [sp]
 800ce70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ce74:	4620      	mov	r0, r4
 800ce76:	4629      	mov	r1, r5
 800ce78:	f7f3 fa06 	bl	8000288 <__aeabi_dsub>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	460b      	mov	r3, r1
 800ce80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce84:	f7f3 fce2 	bl	800084c <__aeabi_ddiv>
 800ce88:	4632      	mov	r2, r6
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	460d      	mov	r5, r1
 800ce8e:	463b      	mov	r3, r7
 800ce90:	4640      	mov	r0, r8
 800ce92:	4649      	mov	r1, r9
 800ce94:	f7f3 fbb0 	bl	80005f8 <__aeabi_dmul>
 800ce98:	4632      	mov	r2, r6
 800ce9a:	463b      	mov	r3, r7
 800ce9c:	f7f3 f9f6 	bl	800028c <__adddf3>
 800cea0:	4602      	mov	r2, r0
 800cea2:	460b      	mov	r3, r1
 800cea4:	4620      	mov	r0, r4
 800cea6:	4629      	mov	r1, r5
 800cea8:	f7f3 f9ee 	bl	8000288 <__aeabi_dsub>
 800ceac:	4642      	mov	r2, r8
 800ceae:	464b      	mov	r3, r9
 800ceb0:	f7f3 f9ea 	bl	8000288 <__aeabi_dsub>
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	492d      	ldr	r1, [pc, #180]	@ (800cf70 <__ieee754_pow+0xa88>)
 800ceba:	2000      	movs	r0, #0
 800cebc:	f7f3 f9e4 	bl	8000288 <__aeabi_dsub>
 800cec0:	ec41 0b10 	vmov	d0, r0, r1
 800cec4:	ee10 3a90 	vmov	r3, s1
 800cec8:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cecc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ced0:	da0b      	bge.n	800ceea <__ieee754_pow+0xa02>
 800ced2:	4650      	mov	r0, sl
 800ced4:	f000 fbcc 	bl	800d670 <scalbn>
 800ced8:	ec51 0b10 	vmov	r0, r1, d0
 800cedc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cee0:	f7ff bb6d 	b.w	800c5be <__ieee754_pow+0xd6>
 800cee4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800cee8:	e73a      	b.n	800cd60 <__ieee754_pow+0x878>
 800ceea:	ec51 0b10 	vmov	r0, r1, d0
 800ceee:	4619      	mov	r1, r3
 800cef0:	e7f4      	b.n	800cedc <__ieee754_pow+0x9f4>
 800cef2:	491f      	ldr	r1, [pc, #124]	@ (800cf70 <__ieee754_pow+0xa88>)
 800cef4:	2000      	movs	r0, #0
 800cef6:	f7ff bb14 	b.w	800c522 <__ieee754_pow+0x3a>
 800cefa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cefe:	f7ff bb10 	b.w	800c522 <__ieee754_pow+0x3a>
 800cf02:	4630      	mov	r0, r6
 800cf04:	4639      	mov	r1, r7
 800cf06:	f7ff bb0c 	b.w	800c522 <__ieee754_pow+0x3a>
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	f7ff bb69 	b.w	800c5e2 <__ieee754_pow+0xfa>
 800cf10:	2400      	movs	r4, #0
 800cf12:	f7ff bb4b 	b.w	800c5ac <__ieee754_pow+0xc4>
 800cf16:	bf00      	nop
 800cf18:	00000000 	.word	0x00000000
 800cf1c:	3fe62e43 	.word	0x3fe62e43
 800cf20:	fefa39ef 	.word	0xfefa39ef
 800cf24:	3fe62e42 	.word	0x3fe62e42
 800cf28:	0ca86c39 	.word	0x0ca86c39
 800cf2c:	be205c61 	.word	0xbe205c61
 800cf30:	72bea4d0 	.word	0x72bea4d0
 800cf34:	3e663769 	.word	0x3e663769
 800cf38:	c5d26bf1 	.word	0xc5d26bf1
 800cf3c:	3ebbbd41 	.word	0x3ebbbd41
 800cf40:	af25de2c 	.word	0xaf25de2c
 800cf44:	3f11566a 	.word	0x3f11566a
 800cf48:	16bebd93 	.word	0x16bebd93
 800cf4c:	3f66c16c 	.word	0x3f66c16c
 800cf50:	5555553e 	.word	0x5555553e
 800cf54:	3fc55555 	.word	0x3fc55555
 800cf58:	40900000 	.word	0x40900000
 800cf5c:	4090cbff 	.word	0x4090cbff
 800cf60:	3f6f3400 	.word	0x3f6f3400
 800cf64:	4090cc00 	.word	0x4090cc00
 800cf68:	3fe00000 	.word	0x3fe00000
 800cf6c:	fff00000 	.word	0xfff00000
 800cf70:	3ff00000 	.word	0x3ff00000
 800cf74:	652b82fe 	.word	0x652b82fe
 800cf78:	3c971547 	.word	0x3c971547
 800cf7c:	00000000 	.word	0x00000000

0800cf80 <__ieee754_rem_pio2>:
 800cf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf84:	ec57 6b10 	vmov	r6, r7, d0
 800cf88:	4bc5      	ldr	r3, [pc, #788]	@ (800d2a0 <__ieee754_rem_pio2+0x320>)
 800cf8a:	b08d      	sub	sp, #52	@ 0x34
 800cf8c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800cf90:	4598      	cmp	r8, r3
 800cf92:	4604      	mov	r4, r0
 800cf94:	9704      	str	r7, [sp, #16]
 800cf96:	d807      	bhi.n	800cfa8 <__ieee754_rem_pio2+0x28>
 800cf98:	2200      	movs	r2, #0
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	ed80 0b00 	vstr	d0, [r0]
 800cfa0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cfa4:	2500      	movs	r5, #0
 800cfa6:	e028      	b.n	800cffa <__ieee754_rem_pio2+0x7a>
 800cfa8:	4bbe      	ldr	r3, [pc, #760]	@ (800d2a4 <__ieee754_rem_pio2+0x324>)
 800cfaa:	4598      	cmp	r8, r3
 800cfac:	d878      	bhi.n	800d0a0 <__ieee754_rem_pio2+0x120>
 800cfae:	9b04      	ldr	r3, [sp, #16]
 800cfb0:	4dbd      	ldr	r5, [pc, #756]	@ (800d2a8 <__ieee754_rem_pio2+0x328>)
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	4630      	mov	r0, r6
 800cfb6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800d268 <__ieee754_rem_pio2+0x2e8>)
 800cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbc:	4639      	mov	r1, r7
 800cfbe:	dd38      	ble.n	800d032 <__ieee754_rem_pio2+0xb2>
 800cfc0:	f7f3 f962 	bl	8000288 <__aeabi_dsub>
 800cfc4:	45a8      	cmp	r8, r5
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	460f      	mov	r7, r1
 800cfca:	d01a      	beq.n	800d002 <__ieee754_rem_pio2+0x82>
 800cfcc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800d270 <__ieee754_rem_pio2+0x2f0>)
 800cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd2:	f7f3 f959 	bl	8000288 <__aeabi_dsub>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	460b      	mov	r3, r1
 800cfda:	4680      	mov	r8, r0
 800cfdc:	4689      	mov	r9, r1
 800cfde:	4630      	mov	r0, r6
 800cfe0:	4639      	mov	r1, r7
 800cfe2:	f7f3 f951 	bl	8000288 <__aeabi_dsub>
 800cfe6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800d270 <__ieee754_rem_pio2+0x2f0>)
 800cfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfec:	f7f3 f94c 	bl	8000288 <__aeabi_dsub>
 800cff0:	e9c4 8900 	strd	r8, r9, [r4]
 800cff4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cff8:	2501      	movs	r5, #1
 800cffa:	4628      	mov	r0, r5
 800cffc:	b00d      	add	sp, #52	@ 0x34
 800cffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d002:	a39d      	add	r3, pc, #628	@ (adr r3, 800d278 <__ieee754_rem_pio2+0x2f8>)
 800d004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d008:	f7f3 f93e 	bl	8000288 <__aeabi_dsub>
 800d00c:	a39c      	add	r3, pc, #624	@ (adr r3, 800d280 <__ieee754_rem_pio2+0x300>)
 800d00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d012:	4606      	mov	r6, r0
 800d014:	460f      	mov	r7, r1
 800d016:	f7f3 f937 	bl	8000288 <__aeabi_dsub>
 800d01a:	4602      	mov	r2, r0
 800d01c:	460b      	mov	r3, r1
 800d01e:	4680      	mov	r8, r0
 800d020:	4689      	mov	r9, r1
 800d022:	4630      	mov	r0, r6
 800d024:	4639      	mov	r1, r7
 800d026:	f7f3 f92f 	bl	8000288 <__aeabi_dsub>
 800d02a:	a395      	add	r3, pc, #596	@ (adr r3, 800d280 <__ieee754_rem_pio2+0x300>)
 800d02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d030:	e7dc      	b.n	800cfec <__ieee754_rem_pio2+0x6c>
 800d032:	f7f3 f92b 	bl	800028c <__adddf3>
 800d036:	45a8      	cmp	r8, r5
 800d038:	4606      	mov	r6, r0
 800d03a:	460f      	mov	r7, r1
 800d03c:	d018      	beq.n	800d070 <__ieee754_rem_pio2+0xf0>
 800d03e:	a38c      	add	r3, pc, #560	@ (adr r3, 800d270 <__ieee754_rem_pio2+0x2f0>)
 800d040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d044:	f7f3 f922 	bl	800028c <__adddf3>
 800d048:	4602      	mov	r2, r0
 800d04a:	460b      	mov	r3, r1
 800d04c:	4680      	mov	r8, r0
 800d04e:	4689      	mov	r9, r1
 800d050:	4630      	mov	r0, r6
 800d052:	4639      	mov	r1, r7
 800d054:	f7f3 f918 	bl	8000288 <__aeabi_dsub>
 800d058:	a385      	add	r3, pc, #532	@ (adr r3, 800d270 <__ieee754_rem_pio2+0x2f0>)
 800d05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05e:	f7f3 f915 	bl	800028c <__adddf3>
 800d062:	f04f 35ff 	mov.w	r5, #4294967295
 800d066:	e9c4 8900 	strd	r8, r9, [r4]
 800d06a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d06e:	e7c4      	b.n	800cffa <__ieee754_rem_pio2+0x7a>
 800d070:	a381      	add	r3, pc, #516	@ (adr r3, 800d278 <__ieee754_rem_pio2+0x2f8>)
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	f7f3 f909 	bl	800028c <__adddf3>
 800d07a:	a381      	add	r3, pc, #516	@ (adr r3, 800d280 <__ieee754_rem_pio2+0x300>)
 800d07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d080:	4606      	mov	r6, r0
 800d082:	460f      	mov	r7, r1
 800d084:	f7f3 f902 	bl	800028c <__adddf3>
 800d088:	4602      	mov	r2, r0
 800d08a:	460b      	mov	r3, r1
 800d08c:	4680      	mov	r8, r0
 800d08e:	4689      	mov	r9, r1
 800d090:	4630      	mov	r0, r6
 800d092:	4639      	mov	r1, r7
 800d094:	f7f3 f8f8 	bl	8000288 <__aeabi_dsub>
 800d098:	a379      	add	r3, pc, #484	@ (adr r3, 800d280 <__ieee754_rem_pio2+0x300>)
 800d09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09e:	e7de      	b.n	800d05e <__ieee754_rem_pio2+0xde>
 800d0a0:	4b82      	ldr	r3, [pc, #520]	@ (800d2ac <__ieee754_rem_pio2+0x32c>)
 800d0a2:	4598      	cmp	r8, r3
 800d0a4:	f200 80d1 	bhi.w	800d24a <__ieee754_rem_pio2+0x2ca>
 800d0a8:	f7fe fe6e 	bl	800bd88 <fabs>
 800d0ac:	ec57 6b10 	vmov	r6, r7, d0
 800d0b0:	a375      	add	r3, pc, #468	@ (adr r3, 800d288 <__ieee754_rem_pio2+0x308>)
 800d0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	4639      	mov	r1, r7
 800d0ba:	f7f3 fa9d 	bl	80005f8 <__aeabi_dmul>
 800d0be:	4b7c      	ldr	r3, [pc, #496]	@ (800d2b0 <__ieee754_rem_pio2+0x330>)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f7f3 f8e3 	bl	800028c <__adddf3>
 800d0c6:	f7f3 fd47 	bl	8000b58 <__aeabi_d2iz>
 800d0ca:	4605      	mov	r5, r0
 800d0cc:	f7f3 fa2a 	bl	8000524 <__aeabi_i2d>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0d8:	a363      	add	r3, pc, #396	@ (adr r3, 800d268 <__ieee754_rem_pio2+0x2e8>)
 800d0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0de:	f7f3 fa8b 	bl	80005f8 <__aeabi_dmul>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	460b      	mov	r3, r1
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	4639      	mov	r1, r7
 800d0ea:	f7f3 f8cd 	bl	8000288 <__aeabi_dsub>
 800d0ee:	a360      	add	r3, pc, #384	@ (adr r3, 800d270 <__ieee754_rem_pio2+0x2f0>)
 800d0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f4:	4682      	mov	sl, r0
 800d0f6:	468b      	mov	fp, r1
 800d0f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0fc:	f7f3 fa7c 	bl	80005f8 <__aeabi_dmul>
 800d100:	2d1f      	cmp	r5, #31
 800d102:	4606      	mov	r6, r0
 800d104:	460f      	mov	r7, r1
 800d106:	dc0c      	bgt.n	800d122 <__ieee754_rem_pio2+0x1a2>
 800d108:	4b6a      	ldr	r3, [pc, #424]	@ (800d2b4 <__ieee754_rem_pio2+0x334>)
 800d10a:	1e6a      	subs	r2, r5, #1
 800d10c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d110:	4543      	cmp	r3, r8
 800d112:	d006      	beq.n	800d122 <__ieee754_rem_pio2+0x1a2>
 800d114:	4632      	mov	r2, r6
 800d116:	463b      	mov	r3, r7
 800d118:	4650      	mov	r0, sl
 800d11a:	4659      	mov	r1, fp
 800d11c:	f7f3 f8b4 	bl	8000288 <__aeabi_dsub>
 800d120:	e00e      	b.n	800d140 <__ieee754_rem_pio2+0x1c0>
 800d122:	463b      	mov	r3, r7
 800d124:	4632      	mov	r2, r6
 800d126:	4650      	mov	r0, sl
 800d128:	4659      	mov	r1, fp
 800d12a:	f7f3 f8ad 	bl	8000288 <__aeabi_dsub>
 800d12e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d132:	9305      	str	r3, [sp, #20]
 800d134:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d138:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d13c:	2b10      	cmp	r3, #16
 800d13e:	dc02      	bgt.n	800d146 <__ieee754_rem_pio2+0x1c6>
 800d140:	e9c4 0100 	strd	r0, r1, [r4]
 800d144:	e039      	b.n	800d1ba <__ieee754_rem_pio2+0x23a>
 800d146:	a34c      	add	r3, pc, #304	@ (adr r3, 800d278 <__ieee754_rem_pio2+0x2f8>)
 800d148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d150:	f7f3 fa52 	bl	80005f8 <__aeabi_dmul>
 800d154:	4606      	mov	r6, r0
 800d156:	460f      	mov	r7, r1
 800d158:	4602      	mov	r2, r0
 800d15a:	460b      	mov	r3, r1
 800d15c:	4650      	mov	r0, sl
 800d15e:	4659      	mov	r1, fp
 800d160:	f7f3 f892 	bl	8000288 <__aeabi_dsub>
 800d164:	4602      	mov	r2, r0
 800d166:	460b      	mov	r3, r1
 800d168:	4680      	mov	r8, r0
 800d16a:	4689      	mov	r9, r1
 800d16c:	4650      	mov	r0, sl
 800d16e:	4659      	mov	r1, fp
 800d170:	f7f3 f88a 	bl	8000288 <__aeabi_dsub>
 800d174:	4632      	mov	r2, r6
 800d176:	463b      	mov	r3, r7
 800d178:	f7f3 f886 	bl	8000288 <__aeabi_dsub>
 800d17c:	a340      	add	r3, pc, #256	@ (adr r3, 800d280 <__ieee754_rem_pio2+0x300>)
 800d17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d182:	4606      	mov	r6, r0
 800d184:	460f      	mov	r7, r1
 800d186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d18a:	f7f3 fa35 	bl	80005f8 <__aeabi_dmul>
 800d18e:	4632      	mov	r2, r6
 800d190:	463b      	mov	r3, r7
 800d192:	f7f3 f879 	bl	8000288 <__aeabi_dsub>
 800d196:	4602      	mov	r2, r0
 800d198:	460b      	mov	r3, r1
 800d19a:	4606      	mov	r6, r0
 800d19c:	460f      	mov	r7, r1
 800d19e:	4640      	mov	r0, r8
 800d1a0:	4649      	mov	r1, r9
 800d1a2:	f7f3 f871 	bl	8000288 <__aeabi_dsub>
 800d1a6:	9a05      	ldr	r2, [sp, #20]
 800d1a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d1ac:	1ad3      	subs	r3, r2, r3
 800d1ae:	2b31      	cmp	r3, #49	@ 0x31
 800d1b0:	dc20      	bgt.n	800d1f4 <__ieee754_rem_pio2+0x274>
 800d1b2:	e9c4 0100 	strd	r0, r1, [r4]
 800d1b6:	46c2      	mov	sl, r8
 800d1b8:	46cb      	mov	fp, r9
 800d1ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d1be:	4650      	mov	r0, sl
 800d1c0:	4642      	mov	r2, r8
 800d1c2:	464b      	mov	r3, r9
 800d1c4:	4659      	mov	r1, fp
 800d1c6:	f7f3 f85f 	bl	8000288 <__aeabi_dsub>
 800d1ca:	463b      	mov	r3, r7
 800d1cc:	4632      	mov	r2, r6
 800d1ce:	f7f3 f85b 	bl	8000288 <__aeabi_dsub>
 800d1d2:	9b04      	ldr	r3, [sp, #16]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d1da:	f6bf af0e 	bge.w	800cffa <__ieee754_rem_pio2+0x7a>
 800d1de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d1e2:	6063      	str	r3, [r4, #4]
 800d1e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d1e8:	f8c4 8000 	str.w	r8, [r4]
 800d1ec:	60a0      	str	r0, [r4, #8]
 800d1ee:	60e3      	str	r3, [r4, #12]
 800d1f0:	426d      	negs	r5, r5
 800d1f2:	e702      	b.n	800cffa <__ieee754_rem_pio2+0x7a>
 800d1f4:	a326      	add	r3, pc, #152	@ (adr r3, 800d290 <__ieee754_rem_pio2+0x310>)
 800d1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1fe:	f7f3 f9fb 	bl	80005f8 <__aeabi_dmul>
 800d202:	4606      	mov	r6, r0
 800d204:	460f      	mov	r7, r1
 800d206:	4602      	mov	r2, r0
 800d208:	460b      	mov	r3, r1
 800d20a:	4640      	mov	r0, r8
 800d20c:	4649      	mov	r1, r9
 800d20e:	f7f3 f83b 	bl	8000288 <__aeabi_dsub>
 800d212:	4602      	mov	r2, r0
 800d214:	460b      	mov	r3, r1
 800d216:	4682      	mov	sl, r0
 800d218:	468b      	mov	fp, r1
 800d21a:	4640      	mov	r0, r8
 800d21c:	4649      	mov	r1, r9
 800d21e:	f7f3 f833 	bl	8000288 <__aeabi_dsub>
 800d222:	4632      	mov	r2, r6
 800d224:	463b      	mov	r3, r7
 800d226:	f7f3 f82f 	bl	8000288 <__aeabi_dsub>
 800d22a:	a31b      	add	r3, pc, #108	@ (adr r3, 800d298 <__ieee754_rem_pio2+0x318>)
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	4606      	mov	r6, r0
 800d232:	460f      	mov	r7, r1
 800d234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d238:	f7f3 f9de 	bl	80005f8 <__aeabi_dmul>
 800d23c:	4632      	mov	r2, r6
 800d23e:	463b      	mov	r3, r7
 800d240:	f7f3 f822 	bl	8000288 <__aeabi_dsub>
 800d244:	4606      	mov	r6, r0
 800d246:	460f      	mov	r7, r1
 800d248:	e764      	b.n	800d114 <__ieee754_rem_pio2+0x194>
 800d24a:	4b1b      	ldr	r3, [pc, #108]	@ (800d2b8 <__ieee754_rem_pio2+0x338>)
 800d24c:	4598      	cmp	r8, r3
 800d24e:	d935      	bls.n	800d2bc <__ieee754_rem_pio2+0x33c>
 800d250:	4632      	mov	r2, r6
 800d252:	463b      	mov	r3, r7
 800d254:	4630      	mov	r0, r6
 800d256:	4639      	mov	r1, r7
 800d258:	f7f3 f816 	bl	8000288 <__aeabi_dsub>
 800d25c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d260:	e9c4 0100 	strd	r0, r1, [r4]
 800d264:	e69e      	b.n	800cfa4 <__ieee754_rem_pio2+0x24>
 800d266:	bf00      	nop
 800d268:	54400000 	.word	0x54400000
 800d26c:	3ff921fb 	.word	0x3ff921fb
 800d270:	1a626331 	.word	0x1a626331
 800d274:	3dd0b461 	.word	0x3dd0b461
 800d278:	1a600000 	.word	0x1a600000
 800d27c:	3dd0b461 	.word	0x3dd0b461
 800d280:	2e037073 	.word	0x2e037073
 800d284:	3ba3198a 	.word	0x3ba3198a
 800d288:	6dc9c883 	.word	0x6dc9c883
 800d28c:	3fe45f30 	.word	0x3fe45f30
 800d290:	2e000000 	.word	0x2e000000
 800d294:	3ba3198a 	.word	0x3ba3198a
 800d298:	252049c1 	.word	0x252049c1
 800d29c:	397b839a 	.word	0x397b839a
 800d2a0:	3fe921fb 	.word	0x3fe921fb
 800d2a4:	4002d97b 	.word	0x4002d97b
 800d2a8:	3ff921fb 	.word	0x3ff921fb
 800d2ac:	413921fb 	.word	0x413921fb
 800d2b0:	3fe00000 	.word	0x3fe00000
 800d2b4:	0800e458 	.word	0x0800e458
 800d2b8:	7fefffff 	.word	0x7fefffff
 800d2bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d2c0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800d2c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	460f      	mov	r7, r1
 800d2cc:	f7f3 fc44 	bl	8000b58 <__aeabi_d2iz>
 800d2d0:	f7f3 f928 	bl	8000524 <__aeabi_i2d>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	4630      	mov	r0, r6
 800d2da:	4639      	mov	r1, r7
 800d2dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2e0:	f7f2 ffd2 	bl	8000288 <__aeabi_dsub>
 800d2e4:	4b22      	ldr	r3, [pc, #136]	@ (800d370 <__ieee754_rem_pio2+0x3f0>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	f7f3 f986 	bl	80005f8 <__aeabi_dmul>
 800d2ec:	460f      	mov	r7, r1
 800d2ee:	4606      	mov	r6, r0
 800d2f0:	f7f3 fc32 	bl	8000b58 <__aeabi_d2iz>
 800d2f4:	f7f3 f916 	bl	8000524 <__aeabi_i2d>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	4639      	mov	r1, r7
 800d300:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d304:	f7f2 ffc0 	bl	8000288 <__aeabi_dsub>
 800d308:	4b19      	ldr	r3, [pc, #100]	@ (800d370 <__ieee754_rem_pio2+0x3f0>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	f7f3 f974 	bl	80005f8 <__aeabi_dmul>
 800d310:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800d314:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800d318:	f04f 0803 	mov.w	r8, #3
 800d31c:	2600      	movs	r6, #0
 800d31e:	2700      	movs	r7, #0
 800d320:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d324:	4632      	mov	r2, r6
 800d326:	463b      	mov	r3, r7
 800d328:	46c2      	mov	sl, r8
 800d32a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d32e:	f7f3 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 800d332:	2800      	cmp	r0, #0
 800d334:	d1f4      	bne.n	800d320 <__ieee754_rem_pio2+0x3a0>
 800d336:	4b0f      	ldr	r3, [pc, #60]	@ (800d374 <__ieee754_rem_pio2+0x3f4>)
 800d338:	9301      	str	r3, [sp, #4]
 800d33a:	2302      	movs	r3, #2
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	462a      	mov	r2, r5
 800d340:	4653      	mov	r3, sl
 800d342:	4621      	mov	r1, r4
 800d344:	a806      	add	r0, sp, #24
 800d346:	f000 fa4b 	bl	800d7e0 <__kernel_rem_pio2>
 800d34a:	9b04      	ldr	r3, [sp, #16]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	4605      	mov	r5, r0
 800d350:	f6bf ae53 	bge.w	800cffa <__ieee754_rem_pio2+0x7a>
 800d354:	e9d4 2100 	ldrd	r2, r1, [r4]
 800d358:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d35c:	e9c4 2300 	strd	r2, r3, [r4]
 800d360:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800d364:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d368:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d36c:	e740      	b.n	800d1f0 <__ieee754_rem_pio2+0x270>
 800d36e:	bf00      	nop
 800d370:	41700000 	.word	0x41700000
 800d374:	0800e4d8 	.word	0x0800e4d8

0800d378 <__ieee754_atan2f>:
 800d378:	ee10 2a90 	vmov	r2, s1
 800d37c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800d380:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d384:	b510      	push	{r4, lr}
 800d386:	eef0 7a40 	vmov.f32	s15, s0
 800d38a:	d806      	bhi.n	800d39a <__ieee754_atan2f+0x22>
 800d38c:	ee10 0a10 	vmov	r0, s0
 800d390:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d394:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d398:	d904      	bls.n	800d3a4 <__ieee754_atan2f+0x2c>
 800d39a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d39e:	eeb0 0a67 	vmov.f32	s0, s15
 800d3a2:	bd10      	pop	{r4, pc}
 800d3a4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800d3a8:	d103      	bne.n	800d3b2 <__ieee754_atan2f+0x3a>
 800d3aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3ae:	f000 b883 	b.w	800d4b8 <atanf>
 800d3b2:	1794      	asrs	r4, r2, #30
 800d3b4:	f004 0402 	and.w	r4, r4, #2
 800d3b8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d3bc:	b943      	cbnz	r3, 800d3d0 <__ieee754_atan2f+0x58>
 800d3be:	2c02      	cmp	r4, #2
 800d3c0:	d05e      	beq.n	800d480 <__ieee754_atan2f+0x108>
 800d3c2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d494 <__ieee754_atan2f+0x11c>
 800d3c6:	2c03      	cmp	r4, #3
 800d3c8:	bf08      	it	eq
 800d3ca:	eef0 7a47 	vmoveq.f32	s15, s14
 800d3ce:	e7e6      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d3d0:	b941      	cbnz	r1, 800d3e4 <__ieee754_atan2f+0x6c>
 800d3d2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800d498 <__ieee754_atan2f+0x120>
 800d3d6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d49c <__ieee754_atan2f+0x124>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	bfa8      	it	ge
 800d3de:	eef0 7a47 	vmovge.f32	s15, s14
 800d3e2:	e7dc      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d3e4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d3e8:	d110      	bne.n	800d40c <__ieee754_atan2f+0x94>
 800d3ea:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d3ee:	f104 34ff 	add.w	r4, r4, #4294967295
 800d3f2:	d107      	bne.n	800d404 <__ieee754_atan2f+0x8c>
 800d3f4:	2c02      	cmp	r4, #2
 800d3f6:	d846      	bhi.n	800d486 <__ieee754_atan2f+0x10e>
 800d3f8:	4b29      	ldr	r3, [pc, #164]	@ (800d4a0 <__ieee754_atan2f+0x128>)
 800d3fa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d3fe:	edd3 7a00 	vldr	s15, [r3]
 800d402:	e7cc      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d404:	2c02      	cmp	r4, #2
 800d406:	d841      	bhi.n	800d48c <__ieee754_atan2f+0x114>
 800d408:	4b26      	ldr	r3, [pc, #152]	@ (800d4a4 <__ieee754_atan2f+0x12c>)
 800d40a:	e7f6      	b.n	800d3fa <__ieee754_atan2f+0x82>
 800d40c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d410:	d0df      	beq.n	800d3d2 <__ieee754_atan2f+0x5a>
 800d412:	1a5b      	subs	r3, r3, r1
 800d414:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800d418:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d41c:	da1a      	bge.n	800d454 <__ieee754_atan2f+0xdc>
 800d41e:	2a00      	cmp	r2, #0
 800d420:	da01      	bge.n	800d426 <__ieee754_atan2f+0xae>
 800d422:	313c      	adds	r1, #60	@ 0x3c
 800d424:	db19      	blt.n	800d45a <__ieee754_atan2f+0xe2>
 800d426:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d42a:	f000 f919 	bl	800d660 <fabsf>
 800d42e:	f000 f843 	bl	800d4b8 <atanf>
 800d432:	eef0 7a40 	vmov.f32	s15, s0
 800d436:	2c01      	cmp	r4, #1
 800d438:	d012      	beq.n	800d460 <__ieee754_atan2f+0xe8>
 800d43a:	2c02      	cmp	r4, #2
 800d43c:	d017      	beq.n	800d46e <__ieee754_atan2f+0xf6>
 800d43e:	2c00      	cmp	r4, #0
 800d440:	d0ad      	beq.n	800d39e <__ieee754_atan2f+0x26>
 800d442:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d4a8 <__ieee754_atan2f+0x130>
 800d446:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d44a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800d4ac <__ieee754_atan2f+0x134>
 800d44e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d452:	e7a4      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d454:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800d49c <__ieee754_atan2f+0x124>
 800d458:	e7ed      	b.n	800d436 <__ieee754_atan2f+0xbe>
 800d45a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d4b0 <__ieee754_atan2f+0x138>
 800d45e:	e7ea      	b.n	800d436 <__ieee754_atan2f+0xbe>
 800d460:	ee17 3a90 	vmov	r3, s15
 800d464:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d468:	ee07 3a90 	vmov	s15, r3
 800d46c:	e797      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d46e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d4a8 <__ieee754_atan2f+0x130>
 800d472:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d476:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800d4ac <__ieee754_atan2f+0x134>
 800d47a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d47e:	e78e      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d480:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d4ac <__ieee754_atan2f+0x134>
 800d484:	e78b      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d486:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800d4b4 <__ieee754_atan2f+0x13c>
 800d48a:	e788      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d48c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d4b0 <__ieee754_atan2f+0x138>
 800d490:	e785      	b.n	800d39e <__ieee754_atan2f+0x26>
 800d492:	bf00      	nop
 800d494:	c0490fdb 	.word	0xc0490fdb
 800d498:	bfc90fdb 	.word	0xbfc90fdb
 800d49c:	3fc90fdb 	.word	0x3fc90fdb
 800d4a0:	0800e5ec 	.word	0x0800e5ec
 800d4a4:	0800e5e0 	.word	0x0800e5e0
 800d4a8:	33bbbd2e 	.word	0x33bbbd2e
 800d4ac:	40490fdb 	.word	0x40490fdb
 800d4b0:	00000000 	.word	0x00000000
 800d4b4:	3f490fdb 	.word	0x3f490fdb

0800d4b8 <atanf>:
 800d4b8:	b538      	push	{r3, r4, r5, lr}
 800d4ba:	ee10 5a10 	vmov	r5, s0
 800d4be:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d4c2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d4c6:	eef0 7a40 	vmov.f32	s15, s0
 800d4ca:	d310      	bcc.n	800d4ee <atanf+0x36>
 800d4cc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d4d0:	d904      	bls.n	800d4dc <atanf+0x24>
 800d4d2:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d4d6:	eeb0 0a67 	vmov.f32	s0, s15
 800d4da:	bd38      	pop	{r3, r4, r5, pc}
 800d4dc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d614 <atanf+0x15c>
 800d4e0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d618 <atanf+0x160>
 800d4e4:	2d00      	cmp	r5, #0
 800d4e6:	bfc8      	it	gt
 800d4e8:	eef0 7a47 	vmovgt.f32	s15, s14
 800d4ec:	e7f3      	b.n	800d4d6 <atanf+0x1e>
 800d4ee:	4b4b      	ldr	r3, [pc, #300]	@ (800d61c <atanf+0x164>)
 800d4f0:	429c      	cmp	r4, r3
 800d4f2:	d810      	bhi.n	800d516 <atanf+0x5e>
 800d4f4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d4f8:	d20a      	bcs.n	800d510 <atanf+0x58>
 800d4fa:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d620 <atanf+0x168>
 800d4fe:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d506:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d50e:	dce2      	bgt.n	800d4d6 <atanf+0x1e>
 800d510:	f04f 33ff 	mov.w	r3, #4294967295
 800d514:	e013      	b.n	800d53e <atanf+0x86>
 800d516:	f000 f8a3 	bl	800d660 <fabsf>
 800d51a:	4b42      	ldr	r3, [pc, #264]	@ (800d624 <atanf+0x16c>)
 800d51c:	429c      	cmp	r4, r3
 800d51e:	d84f      	bhi.n	800d5c0 <atanf+0x108>
 800d520:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d524:	429c      	cmp	r4, r3
 800d526:	d841      	bhi.n	800d5ac <atanf+0xf4>
 800d528:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d52c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d530:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d534:	2300      	movs	r3, #0
 800d536:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d53a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d53e:	1c5a      	adds	r2, r3, #1
 800d540:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d544:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800d628 <atanf+0x170>
 800d548:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800d62c <atanf+0x174>
 800d54c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800d630 <atanf+0x178>
 800d550:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d554:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d558:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800d634 <atanf+0x17c>
 800d55c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d560:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800d638 <atanf+0x180>
 800d564:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d568:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800d63c <atanf+0x184>
 800d56c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d570:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d640 <atanf+0x188>
 800d574:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d578:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d644 <atanf+0x18c>
 800d57c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d580:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800d648 <atanf+0x190>
 800d584:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d588:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800d64c <atanf+0x194>
 800d58c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d590:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800d650 <atanf+0x198>
 800d594:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d598:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d59c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d5a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d5a4:	d121      	bne.n	800d5ea <atanf+0x132>
 800d5a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5aa:	e794      	b.n	800d4d6 <atanf+0x1e>
 800d5ac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d5b0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d5b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d5be:	e7be      	b.n	800d53e <atanf+0x86>
 800d5c0:	4b24      	ldr	r3, [pc, #144]	@ (800d654 <atanf+0x19c>)
 800d5c2:	429c      	cmp	r4, r3
 800d5c4:	d80b      	bhi.n	800d5de <atanf+0x126>
 800d5c6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d5ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d5ce:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d5d2:	2302      	movs	r3, #2
 800d5d4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d5d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5dc:	e7af      	b.n	800d53e <atanf+0x86>
 800d5de:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d5e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d5e6:	2303      	movs	r3, #3
 800d5e8:	e7a9      	b.n	800d53e <atanf+0x86>
 800d5ea:	4a1b      	ldr	r2, [pc, #108]	@ (800d658 <atanf+0x1a0>)
 800d5ec:	491b      	ldr	r1, [pc, #108]	@ (800d65c <atanf+0x1a4>)
 800d5ee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d5f2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d5f6:	edd3 6a00 	vldr	s13, [r3]
 800d5fa:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d5fe:	2d00      	cmp	r5, #0
 800d600:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d604:	edd2 7a00 	vldr	s15, [r2]
 800d608:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d60c:	bfb8      	it	lt
 800d60e:	eef1 7a67 	vneglt.f32	s15, s15
 800d612:	e760      	b.n	800d4d6 <atanf+0x1e>
 800d614:	bfc90fdb 	.word	0xbfc90fdb
 800d618:	3fc90fdb 	.word	0x3fc90fdb
 800d61c:	3edfffff 	.word	0x3edfffff
 800d620:	7149f2ca 	.word	0x7149f2ca
 800d624:	3f97ffff 	.word	0x3f97ffff
 800d628:	3c8569d7 	.word	0x3c8569d7
 800d62c:	3d4bda59 	.word	0x3d4bda59
 800d630:	bd6ef16b 	.word	0xbd6ef16b
 800d634:	3d886b35 	.word	0x3d886b35
 800d638:	3dba2e6e 	.word	0x3dba2e6e
 800d63c:	3e124925 	.word	0x3e124925
 800d640:	3eaaaaab 	.word	0x3eaaaaab
 800d644:	bd15a221 	.word	0xbd15a221
 800d648:	bd9d8795 	.word	0xbd9d8795
 800d64c:	bde38e38 	.word	0xbde38e38
 800d650:	be4ccccd 	.word	0xbe4ccccd
 800d654:	401bffff 	.word	0x401bffff
 800d658:	0800e608 	.word	0x0800e608
 800d65c:	0800e5f8 	.word	0x0800e5f8

0800d660 <fabsf>:
 800d660:	ee10 3a10 	vmov	r3, s0
 800d664:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d668:	ee00 3a10 	vmov	s0, r3
 800d66c:	4770      	bx	lr
	...

0800d670 <scalbn>:
 800d670:	b570      	push	{r4, r5, r6, lr}
 800d672:	ec55 4b10 	vmov	r4, r5, d0
 800d676:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d67a:	4606      	mov	r6, r0
 800d67c:	462b      	mov	r3, r5
 800d67e:	b991      	cbnz	r1, 800d6a6 <scalbn+0x36>
 800d680:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d684:	4323      	orrs	r3, r4
 800d686:	d03b      	beq.n	800d700 <scalbn+0x90>
 800d688:	4b33      	ldr	r3, [pc, #204]	@ (800d758 <scalbn+0xe8>)
 800d68a:	4620      	mov	r0, r4
 800d68c:	4629      	mov	r1, r5
 800d68e:	2200      	movs	r2, #0
 800d690:	f7f2 ffb2 	bl	80005f8 <__aeabi_dmul>
 800d694:	4b31      	ldr	r3, [pc, #196]	@ (800d75c <scalbn+0xec>)
 800d696:	429e      	cmp	r6, r3
 800d698:	4604      	mov	r4, r0
 800d69a:	460d      	mov	r5, r1
 800d69c:	da0f      	bge.n	800d6be <scalbn+0x4e>
 800d69e:	a326      	add	r3, pc, #152	@ (adr r3, 800d738 <scalbn+0xc8>)
 800d6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a4:	e01e      	b.n	800d6e4 <scalbn+0x74>
 800d6a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d6aa:	4291      	cmp	r1, r2
 800d6ac:	d10b      	bne.n	800d6c6 <scalbn+0x56>
 800d6ae:	4622      	mov	r2, r4
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	f7f2 fdea 	bl	800028c <__adddf3>
 800d6b8:	4604      	mov	r4, r0
 800d6ba:	460d      	mov	r5, r1
 800d6bc:	e020      	b.n	800d700 <scalbn+0x90>
 800d6be:	460b      	mov	r3, r1
 800d6c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d6c4:	3936      	subs	r1, #54	@ 0x36
 800d6c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d6ca:	4296      	cmp	r6, r2
 800d6cc:	dd0d      	ble.n	800d6ea <scalbn+0x7a>
 800d6ce:	2d00      	cmp	r5, #0
 800d6d0:	a11b      	add	r1, pc, #108	@ (adr r1, 800d740 <scalbn+0xd0>)
 800d6d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6d6:	da02      	bge.n	800d6de <scalbn+0x6e>
 800d6d8:	a11b      	add	r1, pc, #108	@ (adr r1, 800d748 <scalbn+0xd8>)
 800d6da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6de:	a318      	add	r3, pc, #96	@ (adr r3, 800d740 <scalbn+0xd0>)
 800d6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e4:	f7f2 ff88 	bl	80005f8 <__aeabi_dmul>
 800d6e8:	e7e6      	b.n	800d6b8 <scalbn+0x48>
 800d6ea:	1872      	adds	r2, r6, r1
 800d6ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d6f0:	428a      	cmp	r2, r1
 800d6f2:	dcec      	bgt.n	800d6ce <scalbn+0x5e>
 800d6f4:	2a00      	cmp	r2, #0
 800d6f6:	dd06      	ble.n	800d706 <scalbn+0x96>
 800d6f8:	f36f 531e 	bfc	r3, #20, #11
 800d6fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d700:	ec45 4b10 	vmov	d0, r4, r5
 800d704:	bd70      	pop	{r4, r5, r6, pc}
 800d706:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d70a:	da08      	bge.n	800d71e <scalbn+0xae>
 800d70c:	2d00      	cmp	r5, #0
 800d70e:	a10a      	add	r1, pc, #40	@ (adr r1, 800d738 <scalbn+0xc8>)
 800d710:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d714:	dac3      	bge.n	800d69e <scalbn+0x2e>
 800d716:	a10e      	add	r1, pc, #56	@ (adr r1, 800d750 <scalbn+0xe0>)
 800d718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d71c:	e7bf      	b.n	800d69e <scalbn+0x2e>
 800d71e:	3236      	adds	r2, #54	@ 0x36
 800d720:	f36f 531e 	bfc	r3, #20, #11
 800d724:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d728:	4620      	mov	r0, r4
 800d72a:	4b0d      	ldr	r3, [pc, #52]	@ (800d760 <scalbn+0xf0>)
 800d72c:	4629      	mov	r1, r5
 800d72e:	2200      	movs	r2, #0
 800d730:	e7d8      	b.n	800d6e4 <scalbn+0x74>
 800d732:	bf00      	nop
 800d734:	f3af 8000 	nop.w
 800d738:	c2f8f359 	.word	0xc2f8f359
 800d73c:	01a56e1f 	.word	0x01a56e1f
 800d740:	8800759c 	.word	0x8800759c
 800d744:	7e37e43c 	.word	0x7e37e43c
 800d748:	8800759c 	.word	0x8800759c
 800d74c:	fe37e43c 	.word	0xfe37e43c
 800d750:	c2f8f359 	.word	0xc2f8f359
 800d754:	81a56e1f 	.word	0x81a56e1f
 800d758:	43500000 	.word	0x43500000
 800d75c:	ffff3cb0 	.word	0xffff3cb0
 800d760:	3c900000 	.word	0x3c900000

0800d764 <with_errno>:
 800d764:	b510      	push	{r4, lr}
 800d766:	ed2d 8b02 	vpush	{d8}
 800d76a:	eeb0 8a40 	vmov.f32	s16, s0
 800d76e:	eef0 8a60 	vmov.f32	s17, s1
 800d772:	4604      	mov	r4, r0
 800d774:	f7fc f804 	bl	8009780 <__errno>
 800d778:	eeb0 0a48 	vmov.f32	s0, s16
 800d77c:	eef0 0a68 	vmov.f32	s1, s17
 800d780:	ecbd 8b02 	vpop	{d8}
 800d784:	6004      	str	r4, [r0, #0]
 800d786:	bd10      	pop	{r4, pc}

0800d788 <xflow>:
 800d788:	4603      	mov	r3, r0
 800d78a:	b507      	push	{r0, r1, r2, lr}
 800d78c:	ec51 0b10 	vmov	r0, r1, d0
 800d790:	b183      	cbz	r3, 800d7b4 <xflow+0x2c>
 800d792:	4602      	mov	r2, r0
 800d794:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d798:	e9cd 2300 	strd	r2, r3, [sp]
 800d79c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7a0:	f7f2 ff2a 	bl	80005f8 <__aeabi_dmul>
 800d7a4:	ec41 0b10 	vmov	d0, r0, r1
 800d7a8:	2022      	movs	r0, #34	@ 0x22
 800d7aa:	b003      	add	sp, #12
 800d7ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7b0:	f7ff bfd8 	b.w	800d764 <with_errno>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	e7ee      	b.n	800d798 <xflow+0x10>
 800d7ba:	0000      	movs	r0, r0
 800d7bc:	0000      	movs	r0, r0
	...

0800d7c0 <__math_uflow>:
 800d7c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d7c8 <__math_uflow+0x8>
 800d7c4:	f7ff bfe0 	b.w	800d788 <xflow>
 800d7c8:	00000000 	.word	0x00000000
 800d7cc:	10000000 	.word	0x10000000

0800d7d0 <__math_oflow>:
 800d7d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d7d8 <__math_oflow+0x8>
 800d7d4:	f7ff bfd8 	b.w	800d788 <xflow>
 800d7d8:	00000000 	.word	0x00000000
 800d7dc:	70000000 	.word	0x70000000

0800d7e0 <__kernel_rem_pio2>:
 800d7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7e4:	ed2d 8b02 	vpush	{d8}
 800d7e8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800d7ec:	f112 0f14 	cmn.w	r2, #20
 800d7f0:	9306      	str	r3, [sp, #24]
 800d7f2:	9104      	str	r1, [sp, #16]
 800d7f4:	4bc2      	ldr	r3, [pc, #776]	@ (800db00 <__kernel_rem_pio2+0x320>)
 800d7f6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800d7f8:	9008      	str	r0, [sp, #32]
 800d7fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d7fe:	9300      	str	r3, [sp, #0]
 800d800:	9b06      	ldr	r3, [sp, #24]
 800d802:	f103 33ff 	add.w	r3, r3, #4294967295
 800d806:	bfa8      	it	ge
 800d808:	1ed4      	subge	r4, r2, #3
 800d80a:	9305      	str	r3, [sp, #20]
 800d80c:	bfb2      	itee	lt
 800d80e:	2400      	movlt	r4, #0
 800d810:	2318      	movge	r3, #24
 800d812:	fb94 f4f3 	sdivge	r4, r4, r3
 800d816:	f06f 0317 	mvn.w	r3, #23
 800d81a:	fb04 3303 	mla	r3, r4, r3, r3
 800d81e:	eb03 0b02 	add.w	fp, r3, r2
 800d822:	9b00      	ldr	r3, [sp, #0]
 800d824:	9a05      	ldr	r2, [sp, #20]
 800d826:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800daf0 <__kernel_rem_pio2+0x310>
 800d82a:	eb03 0802 	add.w	r8, r3, r2
 800d82e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d830:	1aa7      	subs	r7, r4, r2
 800d832:	ae20      	add	r6, sp, #128	@ 0x80
 800d834:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d838:	2500      	movs	r5, #0
 800d83a:	4545      	cmp	r5, r8
 800d83c:	dd12      	ble.n	800d864 <__kernel_rem_pio2+0x84>
 800d83e:	9b06      	ldr	r3, [sp, #24]
 800d840:	aa20      	add	r2, sp, #128	@ 0x80
 800d842:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d846:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800d84a:	2700      	movs	r7, #0
 800d84c:	9b00      	ldr	r3, [sp, #0]
 800d84e:	429f      	cmp	r7, r3
 800d850:	dc2e      	bgt.n	800d8b0 <__kernel_rem_pio2+0xd0>
 800d852:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800daf0 <__kernel_rem_pio2+0x310>
 800d856:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d85a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d85e:	46a8      	mov	r8, r5
 800d860:	2600      	movs	r6, #0
 800d862:	e01b      	b.n	800d89c <__kernel_rem_pio2+0xbc>
 800d864:	42ef      	cmn	r7, r5
 800d866:	d407      	bmi.n	800d878 <__kernel_rem_pio2+0x98>
 800d868:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d86c:	f7f2 fe5a 	bl	8000524 <__aeabi_i2d>
 800d870:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d874:	3501      	adds	r5, #1
 800d876:	e7e0      	b.n	800d83a <__kernel_rem_pio2+0x5a>
 800d878:	ec51 0b18 	vmov	r0, r1, d8
 800d87c:	e7f8      	b.n	800d870 <__kernel_rem_pio2+0x90>
 800d87e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800d882:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d886:	f7f2 feb7 	bl	80005f8 <__aeabi_dmul>
 800d88a:	4602      	mov	r2, r0
 800d88c:	460b      	mov	r3, r1
 800d88e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d892:	f7f2 fcfb 	bl	800028c <__adddf3>
 800d896:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d89a:	3601      	adds	r6, #1
 800d89c:	9b05      	ldr	r3, [sp, #20]
 800d89e:	429e      	cmp	r6, r3
 800d8a0:	dded      	ble.n	800d87e <__kernel_rem_pio2+0x9e>
 800d8a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8a6:	3701      	adds	r7, #1
 800d8a8:	ecaa 7b02 	vstmia	sl!, {d7}
 800d8ac:	3508      	adds	r5, #8
 800d8ae:	e7cd      	b.n	800d84c <__kernel_rem_pio2+0x6c>
 800d8b0:	9b00      	ldr	r3, [sp, #0]
 800d8b2:	f8dd 8000 	ldr.w	r8, [sp]
 800d8b6:	aa0c      	add	r2, sp, #48	@ 0x30
 800d8b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8be:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800d8c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d8c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8c6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800d8ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8cc:	ab98      	add	r3, sp, #608	@ 0x260
 800d8ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d8d2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800d8d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d8da:	ac0c      	add	r4, sp, #48	@ 0x30
 800d8dc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d8de:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800d8e2:	46a1      	mov	r9, r4
 800d8e4:	46c2      	mov	sl, r8
 800d8e6:	f1ba 0f00 	cmp.w	sl, #0
 800d8ea:	dc77      	bgt.n	800d9dc <__kernel_rem_pio2+0x1fc>
 800d8ec:	4658      	mov	r0, fp
 800d8ee:	ed9d 0b02 	vldr	d0, [sp, #8]
 800d8f2:	f7ff febd 	bl	800d670 <scalbn>
 800d8f6:	ec57 6b10 	vmov	r6, r7, d0
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800d900:	4630      	mov	r0, r6
 800d902:	4639      	mov	r1, r7
 800d904:	f7f2 fe78 	bl	80005f8 <__aeabi_dmul>
 800d908:	ec41 0b10 	vmov	d0, r0, r1
 800d90c:	f000 fab8 	bl	800de80 <floor>
 800d910:	4b7c      	ldr	r3, [pc, #496]	@ (800db04 <__kernel_rem_pio2+0x324>)
 800d912:	ec51 0b10 	vmov	r0, r1, d0
 800d916:	2200      	movs	r2, #0
 800d918:	f7f2 fe6e 	bl	80005f8 <__aeabi_dmul>
 800d91c:	4602      	mov	r2, r0
 800d91e:	460b      	mov	r3, r1
 800d920:	4630      	mov	r0, r6
 800d922:	4639      	mov	r1, r7
 800d924:	f7f2 fcb0 	bl	8000288 <__aeabi_dsub>
 800d928:	460f      	mov	r7, r1
 800d92a:	4606      	mov	r6, r0
 800d92c:	f7f3 f914 	bl	8000b58 <__aeabi_d2iz>
 800d930:	9002      	str	r0, [sp, #8]
 800d932:	f7f2 fdf7 	bl	8000524 <__aeabi_i2d>
 800d936:	4602      	mov	r2, r0
 800d938:	460b      	mov	r3, r1
 800d93a:	4630      	mov	r0, r6
 800d93c:	4639      	mov	r1, r7
 800d93e:	f7f2 fca3 	bl	8000288 <__aeabi_dsub>
 800d942:	f1bb 0f00 	cmp.w	fp, #0
 800d946:	4606      	mov	r6, r0
 800d948:	460f      	mov	r7, r1
 800d94a:	dd6c      	ble.n	800da26 <__kernel_rem_pio2+0x246>
 800d94c:	f108 31ff 	add.w	r1, r8, #4294967295
 800d950:	ab0c      	add	r3, sp, #48	@ 0x30
 800d952:	9d02      	ldr	r5, [sp, #8]
 800d954:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d958:	f1cb 0018 	rsb	r0, fp, #24
 800d95c:	fa43 f200 	asr.w	r2, r3, r0
 800d960:	4415      	add	r5, r2
 800d962:	4082      	lsls	r2, r0
 800d964:	1a9b      	subs	r3, r3, r2
 800d966:	aa0c      	add	r2, sp, #48	@ 0x30
 800d968:	9502      	str	r5, [sp, #8]
 800d96a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d96e:	f1cb 0217 	rsb	r2, fp, #23
 800d972:	fa43 f902 	asr.w	r9, r3, r2
 800d976:	f1b9 0f00 	cmp.w	r9, #0
 800d97a:	dd64      	ble.n	800da46 <__kernel_rem_pio2+0x266>
 800d97c:	9b02      	ldr	r3, [sp, #8]
 800d97e:	2200      	movs	r2, #0
 800d980:	3301      	adds	r3, #1
 800d982:	9302      	str	r3, [sp, #8]
 800d984:	4615      	mov	r5, r2
 800d986:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800d98a:	4590      	cmp	r8, r2
 800d98c:	f300 80a1 	bgt.w	800dad2 <__kernel_rem_pio2+0x2f2>
 800d990:	f1bb 0f00 	cmp.w	fp, #0
 800d994:	dd07      	ble.n	800d9a6 <__kernel_rem_pio2+0x1c6>
 800d996:	f1bb 0f01 	cmp.w	fp, #1
 800d99a:	f000 80c1 	beq.w	800db20 <__kernel_rem_pio2+0x340>
 800d99e:	f1bb 0f02 	cmp.w	fp, #2
 800d9a2:	f000 80c8 	beq.w	800db36 <__kernel_rem_pio2+0x356>
 800d9a6:	f1b9 0f02 	cmp.w	r9, #2
 800d9aa:	d14c      	bne.n	800da46 <__kernel_rem_pio2+0x266>
 800d9ac:	4632      	mov	r2, r6
 800d9ae:	463b      	mov	r3, r7
 800d9b0:	4955      	ldr	r1, [pc, #340]	@ (800db08 <__kernel_rem_pio2+0x328>)
 800d9b2:	2000      	movs	r0, #0
 800d9b4:	f7f2 fc68 	bl	8000288 <__aeabi_dsub>
 800d9b8:	4606      	mov	r6, r0
 800d9ba:	460f      	mov	r7, r1
 800d9bc:	2d00      	cmp	r5, #0
 800d9be:	d042      	beq.n	800da46 <__kernel_rem_pio2+0x266>
 800d9c0:	4658      	mov	r0, fp
 800d9c2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800daf8 <__kernel_rem_pio2+0x318>
 800d9c6:	f7ff fe53 	bl	800d670 <scalbn>
 800d9ca:	4630      	mov	r0, r6
 800d9cc:	4639      	mov	r1, r7
 800d9ce:	ec53 2b10 	vmov	r2, r3, d0
 800d9d2:	f7f2 fc59 	bl	8000288 <__aeabi_dsub>
 800d9d6:	4606      	mov	r6, r0
 800d9d8:	460f      	mov	r7, r1
 800d9da:	e034      	b.n	800da46 <__kernel_rem_pio2+0x266>
 800d9dc:	4b4b      	ldr	r3, [pc, #300]	@ (800db0c <__kernel_rem_pio2+0x32c>)
 800d9de:	2200      	movs	r2, #0
 800d9e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9e4:	f7f2 fe08 	bl	80005f8 <__aeabi_dmul>
 800d9e8:	f7f3 f8b6 	bl	8000b58 <__aeabi_d2iz>
 800d9ec:	f7f2 fd9a 	bl	8000524 <__aeabi_i2d>
 800d9f0:	4b47      	ldr	r3, [pc, #284]	@ (800db10 <__kernel_rem_pio2+0x330>)
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	4606      	mov	r6, r0
 800d9f6:	460f      	mov	r7, r1
 800d9f8:	f7f2 fdfe 	bl	80005f8 <__aeabi_dmul>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	460b      	mov	r3, r1
 800da00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da04:	f7f2 fc40 	bl	8000288 <__aeabi_dsub>
 800da08:	f7f3 f8a6 	bl	8000b58 <__aeabi_d2iz>
 800da0c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800da10:	f849 0b04 	str.w	r0, [r9], #4
 800da14:	4639      	mov	r1, r7
 800da16:	4630      	mov	r0, r6
 800da18:	f7f2 fc38 	bl	800028c <__adddf3>
 800da1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da24:	e75f      	b.n	800d8e6 <__kernel_rem_pio2+0x106>
 800da26:	d107      	bne.n	800da38 <__kernel_rem_pio2+0x258>
 800da28:	f108 33ff 	add.w	r3, r8, #4294967295
 800da2c:	aa0c      	add	r2, sp, #48	@ 0x30
 800da2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da32:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800da36:	e79e      	b.n	800d976 <__kernel_rem_pio2+0x196>
 800da38:	4b36      	ldr	r3, [pc, #216]	@ (800db14 <__kernel_rem_pio2+0x334>)
 800da3a:	2200      	movs	r2, #0
 800da3c:	f7f3 f862 	bl	8000b04 <__aeabi_dcmpge>
 800da40:	2800      	cmp	r0, #0
 800da42:	d143      	bne.n	800dacc <__kernel_rem_pio2+0x2ec>
 800da44:	4681      	mov	r9, r0
 800da46:	2200      	movs	r2, #0
 800da48:	2300      	movs	r3, #0
 800da4a:	4630      	mov	r0, r6
 800da4c:	4639      	mov	r1, r7
 800da4e:	f7f3 f83b 	bl	8000ac8 <__aeabi_dcmpeq>
 800da52:	2800      	cmp	r0, #0
 800da54:	f000 80c1 	beq.w	800dbda <__kernel_rem_pio2+0x3fa>
 800da58:	f108 33ff 	add.w	r3, r8, #4294967295
 800da5c:	2200      	movs	r2, #0
 800da5e:	9900      	ldr	r1, [sp, #0]
 800da60:	428b      	cmp	r3, r1
 800da62:	da70      	bge.n	800db46 <__kernel_rem_pio2+0x366>
 800da64:	2a00      	cmp	r2, #0
 800da66:	f000 808b 	beq.w	800db80 <__kernel_rem_pio2+0x3a0>
 800da6a:	f108 38ff 	add.w	r8, r8, #4294967295
 800da6e:	ab0c      	add	r3, sp, #48	@ 0x30
 800da70:	f1ab 0b18 	sub.w	fp, fp, #24
 800da74:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d0f6      	beq.n	800da6a <__kernel_rem_pio2+0x28a>
 800da7c:	4658      	mov	r0, fp
 800da7e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800daf8 <__kernel_rem_pio2+0x318>
 800da82:	f7ff fdf5 	bl	800d670 <scalbn>
 800da86:	f108 0301 	add.w	r3, r8, #1
 800da8a:	00da      	lsls	r2, r3, #3
 800da8c:	9205      	str	r2, [sp, #20]
 800da8e:	ec55 4b10 	vmov	r4, r5, d0
 800da92:	aa70      	add	r2, sp, #448	@ 0x1c0
 800da94:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800db0c <__kernel_rem_pio2+0x32c>
 800da98:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800da9c:	4646      	mov	r6, r8
 800da9e:	f04f 0a00 	mov.w	sl, #0
 800daa2:	2e00      	cmp	r6, #0
 800daa4:	f280 80d1 	bge.w	800dc4a <__kernel_rem_pio2+0x46a>
 800daa8:	4644      	mov	r4, r8
 800daaa:	2c00      	cmp	r4, #0
 800daac:	f2c0 80ff 	blt.w	800dcae <__kernel_rem_pio2+0x4ce>
 800dab0:	4b19      	ldr	r3, [pc, #100]	@ (800db18 <__kernel_rem_pio2+0x338>)
 800dab2:	461f      	mov	r7, r3
 800dab4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800dab6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800daba:	9306      	str	r3, [sp, #24]
 800dabc:	f04f 0a00 	mov.w	sl, #0
 800dac0:	f04f 0b00 	mov.w	fp, #0
 800dac4:	2600      	movs	r6, #0
 800dac6:	eba8 0504 	sub.w	r5, r8, r4
 800daca:	e0e4      	b.n	800dc96 <__kernel_rem_pio2+0x4b6>
 800dacc:	f04f 0902 	mov.w	r9, #2
 800dad0:	e754      	b.n	800d97c <__kernel_rem_pio2+0x19c>
 800dad2:	f854 3b04 	ldr.w	r3, [r4], #4
 800dad6:	bb0d      	cbnz	r5, 800db1c <__kernel_rem_pio2+0x33c>
 800dad8:	b123      	cbz	r3, 800dae4 <__kernel_rem_pio2+0x304>
 800dada:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800dade:	f844 3c04 	str.w	r3, [r4, #-4]
 800dae2:	2301      	movs	r3, #1
 800dae4:	3201      	adds	r2, #1
 800dae6:	461d      	mov	r5, r3
 800dae8:	e74f      	b.n	800d98a <__kernel_rem_pio2+0x1aa>
 800daea:	bf00      	nop
 800daec:	f3af 8000 	nop.w
	...
 800dafc:	3ff00000 	.word	0x3ff00000
 800db00:	0800e658 	.word	0x0800e658
 800db04:	40200000 	.word	0x40200000
 800db08:	3ff00000 	.word	0x3ff00000
 800db0c:	3e700000 	.word	0x3e700000
 800db10:	41700000 	.word	0x41700000
 800db14:	3fe00000 	.word	0x3fe00000
 800db18:	0800e618 	.word	0x0800e618
 800db1c:	1acb      	subs	r3, r1, r3
 800db1e:	e7de      	b.n	800dade <__kernel_rem_pio2+0x2fe>
 800db20:	f108 32ff 	add.w	r2, r8, #4294967295
 800db24:	ab0c      	add	r3, sp, #48	@ 0x30
 800db26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db2a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800db2e:	a90c      	add	r1, sp, #48	@ 0x30
 800db30:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800db34:	e737      	b.n	800d9a6 <__kernel_rem_pio2+0x1c6>
 800db36:	f108 32ff 	add.w	r2, r8, #4294967295
 800db3a:	ab0c      	add	r3, sp, #48	@ 0x30
 800db3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800db44:	e7f3      	b.n	800db2e <__kernel_rem_pio2+0x34e>
 800db46:	a90c      	add	r1, sp, #48	@ 0x30
 800db48:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800db4c:	3b01      	subs	r3, #1
 800db4e:	430a      	orrs	r2, r1
 800db50:	e785      	b.n	800da5e <__kernel_rem_pio2+0x27e>
 800db52:	3401      	adds	r4, #1
 800db54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800db58:	2a00      	cmp	r2, #0
 800db5a:	d0fa      	beq.n	800db52 <__kernel_rem_pio2+0x372>
 800db5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db5e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800db62:	eb0d 0503 	add.w	r5, sp, r3
 800db66:	9b06      	ldr	r3, [sp, #24]
 800db68:	aa20      	add	r2, sp, #128	@ 0x80
 800db6a:	4443      	add	r3, r8
 800db6c:	f108 0701 	add.w	r7, r8, #1
 800db70:	3d98      	subs	r5, #152	@ 0x98
 800db72:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800db76:	4444      	add	r4, r8
 800db78:	42bc      	cmp	r4, r7
 800db7a:	da04      	bge.n	800db86 <__kernel_rem_pio2+0x3a6>
 800db7c:	46a0      	mov	r8, r4
 800db7e:	e6a2      	b.n	800d8c6 <__kernel_rem_pio2+0xe6>
 800db80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db82:	2401      	movs	r4, #1
 800db84:	e7e6      	b.n	800db54 <__kernel_rem_pio2+0x374>
 800db86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db88:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800db8c:	f7f2 fcca 	bl	8000524 <__aeabi_i2d>
 800db90:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800de50 <__kernel_rem_pio2+0x670>
 800db94:	e8e6 0102 	strd	r0, r1, [r6], #8
 800db98:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dba0:	46b2      	mov	sl, r6
 800dba2:	f04f 0800 	mov.w	r8, #0
 800dba6:	9b05      	ldr	r3, [sp, #20]
 800dba8:	4598      	cmp	r8, r3
 800dbaa:	dd05      	ble.n	800dbb8 <__kernel_rem_pio2+0x3d8>
 800dbac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbb0:	3701      	adds	r7, #1
 800dbb2:	eca5 7b02 	vstmia	r5!, {d7}
 800dbb6:	e7df      	b.n	800db78 <__kernel_rem_pio2+0x398>
 800dbb8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800dbbc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dbc0:	f7f2 fd1a 	bl	80005f8 <__aeabi_dmul>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	460b      	mov	r3, r1
 800dbc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbcc:	f7f2 fb5e 	bl	800028c <__adddf3>
 800dbd0:	f108 0801 	add.w	r8, r8, #1
 800dbd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbd8:	e7e5      	b.n	800dba6 <__kernel_rem_pio2+0x3c6>
 800dbda:	f1cb 0000 	rsb	r0, fp, #0
 800dbde:	ec47 6b10 	vmov	d0, r6, r7
 800dbe2:	f7ff fd45 	bl	800d670 <scalbn>
 800dbe6:	ec55 4b10 	vmov	r4, r5, d0
 800dbea:	4b9b      	ldr	r3, [pc, #620]	@ (800de58 <__kernel_rem_pio2+0x678>)
 800dbec:	2200      	movs	r2, #0
 800dbee:	4620      	mov	r0, r4
 800dbf0:	4629      	mov	r1, r5
 800dbf2:	f7f2 ff87 	bl	8000b04 <__aeabi_dcmpge>
 800dbf6:	b300      	cbz	r0, 800dc3a <__kernel_rem_pio2+0x45a>
 800dbf8:	4b98      	ldr	r3, [pc, #608]	@ (800de5c <__kernel_rem_pio2+0x67c>)
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	4629      	mov	r1, r5
 800dc00:	f7f2 fcfa 	bl	80005f8 <__aeabi_dmul>
 800dc04:	f7f2 ffa8 	bl	8000b58 <__aeabi_d2iz>
 800dc08:	4606      	mov	r6, r0
 800dc0a:	f7f2 fc8b 	bl	8000524 <__aeabi_i2d>
 800dc0e:	4b92      	ldr	r3, [pc, #584]	@ (800de58 <__kernel_rem_pio2+0x678>)
 800dc10:	2200      	movs	r2, #0
 800dc12:	f7f2 fcf1 	bl	80005f8 <__aeabi_dmul>
 800dc16:	460b      	mov	r3, r1
 800dc18:	4602      	mov	r2, r0
 800dc1a:	4629      	mov	r1, r5
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	f7f2 fb33 	bl	8000288 <__aeabi_dsub>
 800dc22:	f7f2 ff99 	bl	8000b58 <__aeabi_d2iz>
 800dc26:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc28:	f10b 0b18 	add.w	fp, fp, #24
 800dc2c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dc30:	f108 0801 	add.w	r8, r8, #1
 800dc34:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800dc38:	e720      	b.n	800da7c <__kernel_rem_pio2+0x29c>
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	4629      	mov	r1, r5
 800dc3e:	f7f2 ff8b 	bl	8000b58 <__aeabi_d2iz>
 800dc42:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc44:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800dc48:	e718      	b.n	800da7c <__kernel_rem_pio2+0x29c>
 800dc4a:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc4c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dc50:	f7f2 fc68 	bl	8000524 <__aeabi_i2d>
 800dc54:	4622      	mov	r2, r4
 800dc56:	462b      	mov	r3, r5
 800dc58:	f7f2 fcce 	bl	80005f8 <__aeabi_dmul>
 800dc5c:	4652      	mov	r2, sl
 800dc5e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800dc62:	465b      	mov	r3, fp
 800dc64:	4620      	mov	r0, r4
 800dc66:	4629      	mov	r1, r5
 800dc68:	f7f2 fcc6 	bl	80005f8 <__aeabi_dmul>
 800dc6c:	3e01      	subs	r6, #1
 800dc6e:	4604      	mov	r4, r0
 800dc70:	460d      	mov	r5, r1
 800dc72:	e716      	b.n	800daa2 <__kernel_rem_pio2+0x2c2>
 800dc74:	9906      	ldr	r1, [sp, #24]
 800dc76:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800dc7a:	9106      	str	r1, [sp, #24]
 800dc7c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800dc80:	f7f2 fcba 	bl	80005f8 <__aeabi_dmul>
 800dc84:	4602      	mov	r2, r0
 800dc86:	460b      	mov	r3, r1
 800dc88:	4650      	mov	r0, sl
 800dc8a:	4659      	mov	r1, fp
 800dc8c:	f7f2 fafe 	bl	800028c <__adddf3>
 800dc90:	3601      	adds	r6, #1
 800dc92:	4682      	mov	sl, r0
 800dc94:	468b      	mov	fp, r1
 800dc96:	9b00      	ldr	r3, [sp, #0]
 800dc98:	429e      	cmp	r6, r3
 800dc9a:	dc01      	bgt.n	800dca0 <__kernel_rem_pio2+0x4c0>
 800dc9c:	42ae      	cmp	r6, r5
 800dc9e:	dde9      	ble.n	800dc74 <__kernel_rem_pio2+0x494>
 800dca0:	ab48      	add	r3, sp, #288	@ 0x120
 800dca2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dca6:	e9c5 ab00 	strd	sl, fp, [r5]
 800dcaa:	3c01      	subs	r4, #1
 800dcac:	e6fd      	b.n	800daaa <__kernel_rem_pio2+0x2ca>
 800dcae:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	dc0b      	bgt.n	800dccc <__kernel_rem_pio2+0x4ec>
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	dc35      	bgt.n	800dd24 <__kernel_rem_pio2+0x544>
 800dcb8:	d059      	beq.n	800dd6e <__kernel_rem_pio2+0x58e>
 800dcba:	9b02      	ldr	r3, [sp, #8]
 800dcbc:	f003 0007 	and.w	r0, r3, #7
 800dcc0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800dcc4:	ecbd 8b02 	vpop	{d8}
 800dcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dccc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800dcce:	2b03      	cmp	r3, #3
 800dcd0:	d1f3      	bne.n	800dcba <__kernel_rem_pio2+0x4da>
 800dcd2:	9b05      	ldr	r3, [sp, #20]
 800dcd4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dcd8:	eb0d 0403 	add.w	r4, sp, r3
 800dcdc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800dce0:	4625      	mov	r5, r4
 800dce2:	46c2      	mov	sl, r8
 800dce4:	f1ba 0f00 	cmp.w	sl, #0
 800dce8:	dc69      	bgt.n	800ddbe <__kernel_rem_pio2+0x5de>
 800dcea:	4645      	mov	r5, r8
 800dcec:	2d01      	cmp	r5, #1
 800dcee:	f300 8087 	bgt.w	800de00 <__kernel_rem_pio2+0x620>
 800dcf2:	9c05      	ldr	r4, [sp, #20]
 800dcf4:	ab48      	add	r3, sp, #288	@ 0x120
 800dcf6:	441c      	add	r4, r3
 800dcf8:	2000      	movs	r0, #0
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	f1b8 0f01 	cmp.w	r8, #1
 800dd00:	f300 809c 	bgt.w	800de3c <__kernel_rem_pio2+0x65c>
 800dd04:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800dd08:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800dd0c:	f1b9 0f00 	cmp.w	r9, #0
 800dd10:	f040 80a6 	bne.w	800de60 <__kernel_rem_pio2+0x680>
 800dd14:	9b04      	ldr	r3, [sp, #16]
 800dd16:	e9c3 5600 	strd	r5, r6, [r3]
 800dd1a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800dd1e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dd22:	e7ca      	b.n	800dcba <__kernel_rem_pio2+0x4da>
 800dd24:	9d05      	ldr	r5, [sp, #20]
 800dd26:	ab48      	add	r3, sp, #288	@ 0x120
 800dd28:	441d      	add	r5, r3
 800dd2a:	4644      	mov	r4, r8
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	2100      	movs	r1, #0
 800dd30:	2c00      	cmp	r4, #0
 800dd32:	da35      	bge.n	800dda0 <__kernel_rem_pio2+0x5c0>
 800dd34:	f1b9 0f00 	cmp.w	r9, #0
 800dd38:	d038      	beq.n	800ddac <__kernel_rem_pio2+0x5cc>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd40:	9c04      	ldr	r4, [sp, #16]
 800dd42:	e9c4 2300 	strd	r2, r3, [r4]
 800dd46:	4602      	mov	r2, r0
 800dd48:	460b      	mov	r3, r1
 800dd4a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800dd4e:	f7f2 fa9b 	bl	8000288 <__aeabi_dsub>
 800dd52:	ad4a      	add	r5, sp, #296	@ 0x128
 800dd54:	2401      	movs	r4, #1
 800dd56:	45a0      	cmp	r8, r4
 800dd58:	da2b      	bge.n	800ddb2 <__kernel_rem_pio2+0x5d2>
 800dd5a:	f1b9 0f00 	cmp.w	r9, #0
 800dd5e:	d002      	beq.n	800dd66 <__kernel_rem_pio2+0x586>
 800dd60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd64:	4619      	mov	r1, r3
 800dd66:	9b04      	ldr	r3, [sp, #16]
 800dd68:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dd6c:	e7a5      	b.n	800dcba <__kernel_rem_pio2+0x4da>
 800dd6e:	9c05      	ldr	r4, [sp, #20]
 800dd70:	ab48      	add	r3, sp, #288	@ 0x120
 800dd72:	441c      	add	r4, r3
 800dd74:	2000      	movs	r0, #0
 800dd76:	2100      	movs	r1, #0
 800dd78:	f1b8 0f00 	cmp.w	r8, #0
 800dd7c:	da09      	bge.n	800dd92 <__kernel_rem_pio2+0x5b2>
 800dd7e:	f1b9 0f00 	cmp.w	r9, #0
 800dd82:	d002      	beq.n	800dd8a <__kernel_rem_pio2+0x5aa>
 800dd84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd88:	4619      	mov	r1, r3
 800dd8a:	9b04      	ldr	r3, [sp, #16]
 800dd8c:	e9c3 0100 	strd	r0, r1, [r3]
 800dd90:	e793      	b.n	800dcba <__kernel_rem_pio2+0x4da>
 800dd92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dd96:	f7f2 fa79 	bl	800028c <__adddf3>
 800dd9a:	f108 38ff 	add.w	r8, r8, #4294967295
 800dd9e:	e7eb      	b.n	800dd78 <__kernel_rem_pio2+0x598>
 800dda0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800dda4:	f7f2 fa72 	bl	800028c <__adddf3>
 800dda8:	3c01      	subs	r4, #1
 800ddaa:	e7c1      	b.n	800dd30 <__kernel_rem_pio2+0x550>
 800ddac:	4602      	mov	r2, r0
 800ddae:	460b      	mov	r3, r1
 800ddb0:	e7c6      	b.n	800dd40 <__kernel_rem_pio2+0x560>
 800ddb2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ddb6:	f7f2 fa69 	bl	800028c <__adddf3>
 800ddba:	3401      	adds	r4, #1
 800ddbc:	e7cb      	b.n	800dd56 <__kernel_rem_pio2+0x576>
 800ddbe:	ed35 7b02 	vldmdb	r5!, {d7}
 800ddc2:	ed8d 7b00 	vstr	d7, [sp]
 800ddc6:	ed95 7b02 	vldr	d7, [r5, #8]
 800ddca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ddce:	ec53 2b17 	vmov	r2, r3, d7
 800ddd2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ddd6:	f7f2 fa59 	bl	800028c <__adddf3>
 800ddda:	4602      	mov	r2, r0
 800dddc:	460b      	mov	r3, r1
 800ddde:	4606      	mov	r6, r0
 800dde0:	460f      	mov	r7, r1
 800dde2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dde6:	f7f2 fa4f 	bl	8000288 <__aeabi_dsub>
 800ddea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ddee:	f7f2 fa4d 	bl	800028c <__adddf3>
 800ddf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ddf6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ddfa:	e9c5 6700 	strd	r6, r7, [r5]
 800ddfe:	e771      	b.n	800dce4 <__kernel_rem_pio2+0x504>
 800de00:	ed34 7b02 	vldmdb	r4!, {d7}
 800de04:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800de08:	ec51 0b17 	vmov	r0, r1, d7
 800de0c:	4652      	mov	r2, sl
 800de0e:	465b      	mov	r3, fp
 800de10:	ed8d 7b00 	vstr	d7, [sp]
 800de14:	f7f2 fa3a 	bl	800028c <__adddf3>
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	4606      	mov	r6, r0
 800de1e:	460f      	mov	r7, r1
 800de20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800de24:	f7f2 fa30 	bl	8000288 <__aeabi_dsub>
 800de28:	4652      	mov	r2, sl
 800de2a:	465b      	mov	r3, fp
 800de2c:	f7f2 fa2e 	bl	800028c <__adddf3>
 800de30:	3d01      	subs	r5, #1
 800de32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800de36:	e9c4 6700 	strd	r6, r7, [r4]
 800de3a:	e757      	b.n	800dcec <__kernel_rem_pio2+0x50c>
 800de3c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800de40:	f7f2 fa24 	bl	800028c <__adddf3>
 800de44:	f108 38ff 	add.w	r8, r8, #4294967295
 800de48:	e758      	b.n	800dcfc <__kernel_rem_pio2+0x51c>
 800de4a:	bf00      	nop
 800de4c:	f3af 8000 	nop.w
	...
 800de58:	41700000 	.word	0x41700000
 800de5c:	3e700000 	.word	0x3e700000
 800de60:	9b04      	ldr	r3, [sp, #16]
 800de62:	9a04      	ldr	r2, [sp, #16]
 800de64:	601d      	str	r5, [r3, #0]
 800de66:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800de6a:	605c      	str	r4, [r3, #4]
 800de6c:	609f      	str	r7, [r3, #8]
 800de6e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800de72:	60d3      	str	r3, [r2, #12]
 800de74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de78:	6110      	str	r0, [r2, #16]
 800de7a:	6153      	str	r3, [r2, #20]
 800de7c:	e71d      	b.n	800dcba <__kernel_rem_pio2+0x4da>
 800de7e:	bf00      	nop

0800de80 <floor>:
 800de80:	ec51 0b10 	vmov	r0, r1, d0
 800de84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800de88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de8c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800de90:	2e13      	cmp	r6, #19
 800de92:	460c      	mov	r4, r1
 800de94:	4605      	mov	r5, r0
 800de96:	4680      	mov	r8, r0
 800de98:	dc34      	bgt.n	800df04 <floor+0x84>
 800de9a:	2e00      	cmp	r6, #0
 800de9c:	da17      	bge.n	800dece <floor+0x4e>
 800de9e:	a332      	add	r3, pc, #200	@ (adr r3, 800df68 <floor+0xe8>)
 800dea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea4:	f7f2 f9f2 	bl	800028c <__adddf3>
 800dea8:	2200      	movs	r2, #0
 800deaa:	2300      	movs	r3, #0
 800deac:	f7f2 fe34 	bl	8000b18 <__aeabi_dcmpgt>
 800deb0:	b150      	cbz	r0, 800dec8 <floor+0x48>
 800deb2:	2c00      	cmp	r4, #0
 800deb4:	da55      	bge.n	800df62 <floor+0xe2>
 800deb6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800deba:	432c      	orrs	r4, r5
 800debc:	2500      	movs	r5, #0
 800debe:	42ac      	cmp	r4, r5
 800dec0:	4c2b      	ldr	r4, [pc, #172]	@ (800df70 <floor+0xf0>)
 800dec2:	bf08      	it	eq
 800dec4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800dec8:	4621      	mov	r1, r4
 800deca:	4628      	mov	r0, r5
 800decc:	e023      	b.n	800df16 <floor+0x96>
 800dece:	4f29      	ldr	r7, [pc, #164]	@ (800df74 <floor+0xf4>)
 800ded0:	4137      	asrs	r7, r6
 800ded2:	ea01 0307 	and.w	r3, r1, r7
 800ded6:	4303      	orrs	r3, r0
 800ded8:	d01d      	beq.n	800df16 <floor+0x96>
 800deda:	a323      	add	r3, pc, #140	@ (adr r3, 800df68 <floor+0xe8>)
 800dedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee0:	f7f2 f9d4 	bl	800028c <__adddf3>
 800dee4:	2200      	movs	r2, #0
 800dee6:	2300      	movs	r3, #0
 800dee8:	f7f2 fe16 	bl	8000b18 <__aeabi_dcmpgt>
 800deec:	2800      	cmp	r0, #0
 800deee:	d0eb      	beq.n	800dec8 <floor+0x48>
 800def0:	2c00      	cmp	r4, #0
 800def2:	bfbe      	ittt	lt
 800def4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800def8:	4133      	asrlt	r3, r6
 800defa:	18e4      	addlt	r4, r4, r3
 800defc:	ea24 0407 	bic.w	r4, r4, r7
 800df00:	2500      	movs	r5, #0
 800df02:	e7e1      	b.n	800dec8 <floor+0x48>
 800df04:	2e33      	cmp	r6, #51	@ 0x33
 800df06:	dd0a      	ble.n	800df1e <floor+0x9e>
 800df08:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800df0c:	d103      	bne.n	800df16 <floor+0x96>
 800df0e:	4602      	mov	r2, r0
 800df10:	460b      	mov	r3, r1
 800df12:	f7f2 f9bb 	bl	800028c <__adddf3>
 800df16:	ec41 0b10 	vmov	d0, r0, r1
 800df1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df1e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800df22:	f04f 37ff 	mov.w	r7, #4294967295
 800df26:	40df      	lsrs	r7, r3
 800df28:	4207      	tst	r7, r0
 800df2a:	d0f4      	beq.n	800df16 <floor+0x96>
 800df2c:	a30e      	add	r3, pc, #56	@ (adr r3, 800df68 <floor+0xe8>)
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	f7f2 f9ab 	bl	800028c <__adddf3>
 800df36:	2200      	movs	r2, #0
 800df38:	2300      	movs	r3, #0
 800df3a:	f7f2 fded 	bl	8000b18 <__aeabi_dcmpgt>
 800df3e:	2800      	cmp	r0, #0
 800df40:	d0c2      	beq.n	800dec8 <floor+0x48>
 800df42:	2c00      	cmp	r4, #0
 800df44:	da0a      	bge.n	800df5c <floor+0xdc>
 800df46:	2e14      	cmp	r6, #20
 800df48:	d101      	bne.n	800df4e <floor+0xce>
 800df4a:	3401      	adds	r4, #1
 800df4c:	e006      	b.n	800df5c <floor+0xdc>
 800df4e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800df52:	2301      	movs	r3, #1
 800df54:	40b3      	lsls	r3, r6
 800df56:	441d      	add	r5, r3
 800df58:	4545      	cmp	r5, r8
 800df5a:	d3f6      	bcc.n	800df4a <floor+0xca>
 800df5c:	ea25 0507 	bic.w	r5, r5, r7
 800df60:	e7b2      	b.n	800dec8 <floor+0x48>
 800df62:	2500      	movs	r5, #0
 800df64:	462c      	mov	r4, r5
 800df66:	e7af      	b.n	800dec8 <floor+0x48>
 800df68:	8800759c 	.word	0x8800759c
 800df6c:	7e37e43c 	.word	0x7e37e43c
 800df70:	bff00000 	.word	0xbff00000
 800df74:	000fffff 	.word	0x000fffff

0800df78 <_init>:
 800df78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7a:	bf00      	nop
 800df7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df7e:	bc08      	pop	{r3}
 800df80:	469e      	mov	lr, r3
 800df82:	4770      	bx	lr

0800df84 <_fini>:
 800df84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df86:	bf00      	nop
 800df88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df8a:	bc08      	pop	{r3}
 800df8c:	469e      	mov	lr, r3
 800df8e:	4770      	bx	lr
